
uart2_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000efd0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003a80  0800f160  0800f160  0001f160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012be0  08012be0  00030d34  2**0
                  CONTENTS
  4 .ARM          00000008  08012be0  08012be0  00022be0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012be8  08012be8  00030d34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012be8  08012be8  00022be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012bec  08012bec  00022bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000d34  20000000  08012bf0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a84  20000d40  08013924  00030d40  2**4
                  ALLOC
 10 ._user_heap_stack 00000604  200017c4  08013924  000317c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030d34  2**0
                  CONTENTS, READONLY
 12 .debug_info   001ef037  00000000  00000000  00030d64  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000e7a7  00000000  00000000  0021fd9b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00006dc8  00000000  00000000  0022e548  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00006be8  00000000  00000000  00235310  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f28b  00000000  00000000  0023bef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0003b54e  00000000  00000000  0026b183  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00187c60  00000000  00000000  002a66d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0042e331  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0002082c  00000000  00000000  0042e3ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000d40 	.word	0x20000d40
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f148 	.word	0x0800f148

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000d44 	.word	0x20000d44
 80001cc:	0800f148 	.word	0x0800f148

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2f>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bd0:	bf24      	itt	cs
 8000bd2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bd6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bda:	d90d      	bls.n	8000bf8 <__aeabi_d2f+0x30>
 8000bdc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000be0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000be4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000be8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bf0:	bf08      	it	eq
 8000bf2:	f020 0001 	biceq.w	r0, r0, #1
 8000bf6:	4770      	bx	lr
 8000bf8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bfc:	d121      	bne.n	8000c42 <__aeabi_d2f+0x7a>
 8000bfe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c02:	bfbc      	itt	lt
 8000c04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	4770      	bxlt	lr
 8000c0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c12:	f1c2 0218 	rsb	r2, r2, #24
 8000c16:	f1c2 0c20 	rsb	ip, r2, #32
 8000c1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c22:	bf18      	it	ne
 8000c24:	f040 0001 	orrne.w	r0, r0, #1
 8000c28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c34:	ea40 000c 	orr.w	r0, r0, ip
 8000c38:	fa23 f302 	lsr.w	r3, r3, r2
 8000c3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c40:	e7cc      	b.n	8000bdc <__aeabi_d2f+0x14>
 8000c42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c46:	d107      	bne.n	8000c58 <__aeabi_d2f+0x90>
 8000c48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c4c:	bf1e      	ittt	ne
 8000c4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c56:	4770      	bxne	lr
 8000c58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop

08000c68 <__aeabi_uldivmod>:
 8000c68:	b953      	cbnz	r3, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6a:	b94a      	cbnz	r2, 8000c80 <__aeabi_uldivmod+0x18>
 8000c6c:	2900      	cmp	r1, #0
 8000c6e:	bf08      	it	eq
 8000c70:	2800      	cmpeq	r0, #0
 8000c72:	bf1c      	itt	ne
 8000c74:	f04f 31ff 	movne.w	r1, #4294967295
 8000c78:	f04f 30ff 	movne.w	r0, #4294967295
 8000c7c:	f000 b9ac 	b.w	8000fd8 <__aeabi_idiv0>
 8000c80:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c84:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c88:	f000 f840 	bl	8000d0c <__udivmoddi4>
 8000c8c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c94:	b004      	add	sp, #16
 8000c96:	4770      	bx	lr

08000c98 <__aeabi_d2lz>:
 8000c98:	b538      	push	{r3, r4, r5, lr}
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	4604      	mov	r4, r0
 8000ca0:	460d      	mov	r5, r1
 8000ca2:	f7ff ff2b 	bl	8000afc <__aeabi_dcmplt>
 8000ca6:	b928      	cbnz	r0, 8000cb4 <__aeabi_d2lz+0x1c>
 8000ca8:	4620      	mov	r0, r4
 8000caa:	4629      	mov	r1, r5
 8000cac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cb0:	f000 b80a 	b.w	8000cc8 <__aeabi_d2ulz>
 8000cb4:	4620      	mov	r0, r4
 8000cb6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cba:	f000 f805 	bl	8000cc8 <__aeabi_d2ulz>
 8000cbe:	4240      	negs	r0, r0
 8000cc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cc4:	bd38      	pop	{r3, r4, r5, pc}
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_d2ulz>:
 8000cc8:	b5d0      	push	{r4, r6, r7, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	4b0d      	ldr	r3, [pc, #52]	; (8000d04 <__aeabi_d2ulz+0x3c>)
 8000cce:	4606      	mov	r6, r0
 8000cd0:	460f      	mov	r7, r1
 8000cd2:	f7ff fca1 	bl	8000618 <__aeabi_dmul>
 8000cd6:	f000 f981 	bl	8000fdc <__aeabi_d2uiz>
 8000cda:	4604      	mov	r4, r0
 8000cdc:	f7ff fc22 	bl	8000524 <__aeabi_ui2d>
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <__aeabi_d2ulz+0x40>)
 8000ce4:	f7ff fc98 	bl	8000618 <__aeabi_dmul>
 8000ce8:	4602      	mov	r2, r0
 8000cea:	460b      	mov	r3, r1
 8000cec:	4630      	mov	r0, r6
 8000cee:	4639      	mov	r1, r7
 8000cf0:	f7ff fada 	bl	80002a8 <__aeabi_dsub>
 8000cf4:	f000 f972 	bl	8000fdc <__aeabi_d2uiz>
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4623      	mov	r3, r4
 8000cfc:	4310      	orrs	r0, r2
 8000cfe:	4619      	mov	r1, r3
 8000d00:	bdd0      	pop	{r4, r6, r7, pc}
 8000d02:	bf00      	nop
 8000d04:	3df00000 	.word	0x3df00000
 8000d08:	41f00000 	.word	0x41f00000

08000d0c <__udivmoddi4>:
 8000d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d10:	9e08      	ldr	r6, [sp, #32]
 8000d12:	4604      	mov	r4, r0
 8000d14:	4688      	mov	r8, r1
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d14b      	bne.n	8000db2 <__udivmoddi4+0xa6>
 8000d1a:	428a      	cmp	r2, r1
 8000d1c:	4615      	mov	r5, r2
 8000d1e:	d967      	bls.n	8000df0 <__udivmoddi4+0xe4>
 8000d20:	fab2 f282 	clz	r2, r2
 8000d24:	b14a      	cbz	r2, 8000d3a <__udivmoddi4+0x2e>
 8000d26:	f1c2 0720 	rsb	r7, r2, #32
 8000d2a:	fa01 f302 	lsl.w	r3, r1, r2
 8000d2e:	fa20 f707 	lsr.w	r7, r0, r7
 8000d32:	4095      	lsls	r5, r2
 8000d34:	ea47 0803 	orr.w	r8, r7, r3
 8000d38:	4094      	lsls	r4, r2
 8000d3a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d3e:	0c23      	lsrs	r3, r4, #16
 8000d40:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d44:	fa1f fc85 	uxth.w	ip, r5
 8000d48:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d4c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d50:	fb07 f10c 	mul.w	r1, r7, ip
 8000d54:	4299      	cmp	r1, r3
 8000d56:	d909      	bls.n	8000d6c <__udivmoddi4+0x60>
 8000d58:	18eb      	adds	r3, r5, r3
 8000d5a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d5e:	f080 811b 	bcs.w	8000f98 <__udivmoddi4+0x28c>
 8000d62:	4299      	cmp	r1, r3
 8000d64:	f240 8118 	bls.w	8000f98 <__udivmoddi4+0x28c>
 8000d68:	3f02      	subs	r7, #2
 8000d6a:	442b      	add	r3, r5
 8000d6c:	1a5b      	subs	r3, r3, r1
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d74:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d78:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d7c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d80:	45a4      	cmp	ip, r4
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x8c>
 8000d84:	192c      	adds	r4, r5, r4
 8000d86:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d8a:	f080 8107 	bcs.w	8000f9c <__udivmoddi4+0x290>
 8000d8e:	45a4      	cmp	ip, r4
 8000d90:	f240 8104 	bls.w	8000f9c <__udivmoddi4+0x290>
 8000d94:	3802      	subs	r0, #2
 8000d96:	442c      	add	r4, r5
 8000d98:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d9c:	eba4 040c 	sub.w	r4, r4, ip
 8000da0:	2700      	movs	r7, #0
 8000da2:	b11e      	cbz	r6, 8000dac <__udivmoddi4+0xa0>
 8000da4:	40d4      	lsrs	r4, r2
 8000da6:	2300      	movs	r3, #0
 8000da8:	e9c6 4300 	strd	r4, r3, [r6]
 8000dac:	4639      	mov	r1, r7
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d909      	bls.n	8000dca <__udivmoddi4+0xbe>
 8000db6:	2e00      	cmp	r6, #0
 8000db8:	f000 80eb 	beq.w	8000f92 <__udivmoddi4+0x286>
 8000dbc:	2700      	movs	r7, #0
 8000dbe:	e9c6 0100 	strd	r0, r1, [r6]
 8000dc2:	4638      	mov	r0, r7
 8000dc4:	4639      	mov	r1, r7
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	fab3 f783 	clz	r7, r3
 8000dce:	2f00      	cmp	r7, #0
 8000dd0:	d147      	bne.n	8000e62 <__udivmoddi4+0x156>
 8000dd2:	428b      	cmp	r3, r1
 8000dd4:	d302      	bcc.n	8000ddc <__udivmoddi4+0xd0>
 8000dd6:	4282      	cmp	r2, r0
 8000dd8:	f200 80fa 	bhi.w	8000fd0 <__udivmoddi4+0x2c4>
 8000ddc:	1a84      	subs	r4, r0, r2
 8000dde:	eb61 0303 	sbc.w	r3, r1, r3
 8000de2:	2001      	movs	r0, #1
 8000de4:	4698      	mov	r8, r3
 8000de6:	2e00      	cmp	r6, #0
 8000de8:	d0e0      	beq.n	8000dac <__udivmoddi4+0xa0>
 8000dea:	e9c6 4800 	strd	r4, r8, [r6]
 8000dee:	e7dd      	b.n	8000dac <__udivmoddi4+0xa0>
 8000df0:	b902      	cbnz	r2, 8000df4 <__udivmoddi4+0xe8>
 8000df2:	deff      	udf	#255	; 0xff
 8000df4:	fab2 f282 	clz	r2, r2
 8000df8:	2a00      	cmp	r2, #0
 8000dfa:	f040 808f 	bne.w	8000f1c <__udivmoddi4+0x210>
 8000dfe:	1b49      	subs	r1, r1, r5
 8000e00:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e04:	fa1f f885 	uxth.w	r8, r5
 8000e08:	2701      	movs	r7, #1
 8000e0a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e0e:	0c23      	lsrs	r3, r4, #16
 8000e10:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e18:	fb08 f10c 	mul.w	r1, r8, ip
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x124>
 8000e20:	18eb      	adds	r3, r5, r3
 8000e22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x122>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	f200 80cd 	bhi.w	8000fc8 <__udivmoddi4+0x2bc>
 8000e2e:	4684      	mov	ip, r0
 8000e30:	1a59      	subs	r1, r3, r1
 8000e32:	b2a3      	uxth	r3, r4
 8000e34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e38:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e3c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e40:	fb08 f800 	mul.w	r8, r8, r0
 8000e44:	45a0      	cmp	r8, r4
 8000e46:	d907      	bls.n	8000e58 <__udivmoddi4+0x14c>
 8000e48:	192c      	adds	r4, r5, r4
 8000e4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4e:	d202      	bcs.n	8000e56 <__udivmoddi4+0x14a>
 8000e50:	45a0      	cmp	r8, r4
 8000e52:	f200 80b6 	bhi.w	8000fc2 <__udivmoddi4+0x2b6>
 8000e56:	4618      	mov	r0, r3
 8000e58:	eba4 0408 	sub.w	r4, r4, r8
 8000e5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e60:	e79f      	b.n	8000da2 <__udivmoddi4+0x96>
 8000e62:	f1c7 0c20 	rsb	ip, r7, #32
 8000e66:	40bb      	lsls	r3, r7
 8000e68:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e6c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e70:	fa01 f407 	lsl.w	r4, r1, r7
 8000e74:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e78:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e7c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e80:	4325      	orrs	r5, r4
 8000e82:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e86:	0c2c      	lsrs	r4, r5, #16
 8000e88:	fb08 3319 	mls	r3, r8, r9, r3
 8000e8c:	fa1f fa8e 	uxth.w	sl, lr
 8000e90:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e94:	fb09 f40a 	mul.w	r4, r9, sl
 8000e98:	429c      	cmp	r4, r3
 8000e9a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e9e:	fa00 f107 	lsl.w	r1, r0, r7
 8000ea2:	d90b      	bls.n	8000ebc <__udivmoddi4+0x1b0>
 8000ea4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ea8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000eac:	f080 8087 	bcs.w	8000fbe <__udivmoddi4+0x2b2>
 8000eb0:	429c      	cmp	r4, r3
 8000eb2:	f240 8084 	bls.w	8000fbe <__udivmoddi4+0x2b2>
 8000eb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000eba:	4473      	add	r3, lr
 8000ebc:	1b1b      	subs	r3, r3, r4
 8000ebe:	b2ad      	uxth	r5, r5
 8000ec0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ec4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ec8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ecc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ed0:	45a2      	cmp	sl, r4
 8000ed2:	d908      	bls.n	8000ee6 <__udivmoddi4+0x1da>
 8000ed4:	eb1e 0404 	adds.w	r4, lr, r4
 8000ed8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000edc:	d26b      	bcs.n	8000fb6 <__udivmoddi4+0x2aa>
 8000ede:	45a2      	cmp	sl, r4
 8000ee0:	d969      	bls.n	8000fb6 <__udivmoddi4+0x2aa>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	4474      	add	r4, lr
 8000ee6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eea:	fba0 8902 	umull	r8, r9, r0, r2
 8000eee:	eba4 040a 	sub.w	r4, r4, sl
 8000ef2:	454c      	cmp	r4, r9
 8000ef4:	46c2      	mov	sl, r8
 8000ef6:	464b      	mov	r3, r9
 8000ef8:	d354      	bcc.n	8000fa4 <__udivmoddi4+0x298>
 8000efa:	d051      	beq.n	8000fa0 <__udivmoddi4+0x294>
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d069      	beq.n	8000fd4 <__udivmoddi4+0x2c8>
 8000f00:	ebb1 050a 	subs.w	r5, r1, sl
 8000f04:	eb64 0403 	sbc.w	r4, r4, r3
 8000f08:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f0c:	40fd      	lsrs	r5, r7
 8000f0e:	40fc      	lsrs	r4, r7
 8000f10:	ea4c 0505 	orr.w	r5, ip, r5
 8000f14:	e9c6 5400 	strd	r5, r4, [r6]
 8000f18:	2700      	movs	r7, #0
 8000f1a:	e747      	b.n	8000dac <__udivmoddi4+0xa0>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f703 	lsr.w	r7, r0, r3
 8000f24:	4095      	lsls	r5, r2
 8000f26:	fa01 f002 	lsl.w	r0, r1, r2
 8000f2a:	fa21 f303 	lsr.w	r3, r1, r3
 8000f2e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f32:	4338      	orrs	r0, r7
 8000f34:	0c01      	lsrs	r1, r0, #16
 8000f36:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f3a:	fa1f f885 	uxth.w	r8, r5
 8000f3e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f42:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f46:	fb07 f308 	mul.w	r3, r7, r8
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f50:	d907      	bls.n	8000f62 <__udivmoddi4+0x256>
 8000f52:	1869      	adds	r1, r5, r1
 8000f54:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f58:	d22f      	bcs.n	8000fba <__udivmoddi4+0x2ae>
 8000f5a:	428b      	cmp	r3, r1
 8000f5c:	d92d      	bls.n	8000fba <__udivmoddi4+0x2ae>
 8000f5e:	3f02      	subs	r7, #2
 8000f60:	4429      	add	r1, r5
 8000f62:	1acb      	subs	r3, r1, r3
 8000f64:	b281      	uxth	r1, r0
 8000f66:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f6a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f72:	fb00 f308 	mul.w	r3, r0, r8
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d907      	bls.n	8000f8a <__udivmoddi4+0x27e>
 8000f7a:	1869      	adds	r1, r5, r1
 8000f7c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f80:	d217      	bcs.n	8000fb2 <__udivmoddi4+0x2a6>
 8000f82:	428b      	cmp	r3, r1
 8000f84:	d915      	bls.n	8000fb2 <__udivmoddi4+0x2a6>
 8000f86:	3802      	subs	r0, #2
 8000f88:	4429      	add	r1, r5
 8000f8a:	1ac9      	subs	r1, r1, r3
 8000f8c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f90:	e73b      	b.n	8000e0a <__udivmoddi4+0xfe>
 8000f92:	4637      	mov	r7, r6
 8000f94:	4630      	mov	r0, r6
 8000f96:	e709      	b.n	8000dac <__udivmoddi4+0xa0>
 8000f98:	4607      	mov	r7, r0
 8000f9a:	e6e7      	b.n	8000d6c <__udivmoddi4+0x60>
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	e6fb      	b.n	8000d98 <__udivmoddi4+0x8c>
 8000fa0:	4541      	cmp	r1, r8
 8000fa2:	d2ab      	bcs.n	8000efc <__udivmoddi4+0x1f0>
 8000fa4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000fa8:	eb69 020e 	sbc.w	r2, r9, lr
 8000fac:	3801      	subs	r0, #1
 8000fae:	4613      	mov	r3, r2
 8000fb0:	e7a4      	b.n	8000efc <__udivmoddi4+0x1f0>
 8000fb2:	4660      	mov	r0, ip
 8000fb4:	e7e9      	b.n	8000f8a <__udivmoddi4+0x27e>
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	e795      	b.n	8000ee6 <__udivmoddi4+0x1da>
 8000fba:	4667      	mov	r7, ip
 8000fbc:	e7d1      	b.n	8000f62 <__udivmoddi4+0x256>
 8000fbe:	4681      	mov	r9, r0
 8000fc0:	e77c      	b.n	8000ebc <__udivmoddi4+0x1b0>
 8000fc2:	3802      	subs	r0, #2
 8000fc4:	442c      	add	r4, r5
 8000fc6:	e747      	b.n	8000e58 <__udivmoddi4+0x14c>
 8000fc8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fcc:	442b      	add	r3, r5
 8000fce:	e72f      	b.n	8000e30 <__udivmoddi4+0x124>
 8000fd0:	4638      	mov	r0, r7
 8000fd2:	e708      	b.n	8000de6 <__udivmoddi4+0xda>
 8000fd4:	4637      	mov	r7, r6
 8000fd6:	e6e9      	b.n	8000dac <__udivmoddi4+0xa0>

08000fd8 <__aeabi_idiv0>:
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop

08000fdc <__aeabi_d2uiz>:
 8000fdc:	004a      	lsls	r2, r1, #1
 8000fde:	d211      	bcs.n	8001004 <__aeabi_d2uiz+0x28>
 8000fe0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000fe4:	d211      	bcs.n	800100a <__aeabi_d2uiz+0x2e>
 8000fe6:	d50d      	bpl.n	8001004 <__aeabi_d2uiz+0x28>
 8000fe8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000fec:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ff0:	d40e      	bmi.n	8001010 <__aeabi_d2uiz+0x34>
 8000ff2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ff6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ffa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ffe:	fa23 f002 	lsr.w	r0, r3, r2
 8001002:	4770      	bx	lr
 8001004:	f04f 0000 	mov.w	r0, #0
 8001008:	4770      	bx	lr
 800100a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800100e:	d102      	bne.n	8001016 <__aeabi_d2uiz+0x3a>
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	4770      	bx	lr
 8001016:	f04f 0000 	mov.w	r0, #0
 800101a:	4770      	bx	lr

0800101c <_ZN6tflite13ErrorReporterD1Ev>:
/// Subclass ErrorReporter to provide another reporting destination.
/// For example, if you have a GUI program, you might redirect to a buffer
/// that drives a GUI error log box.
class ErrorReporter {
 public:
  virtual ~ErrorReporter() {}
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	4a04      	ldr	r2, [pc, #16]	; (8001038 <_ZN6tflite13ErrorReporterD1Ev+0x1c>)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	601a      	str	r2, [r3, #0]
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	08011ca8 	.word	0x08011ca8

0800103c <_ZN6tflite13ErrorReporterD0Ev>:
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f7ff ffe9 	bl	800101c <_ZN6tflite13ErrorReporterD1Ev>
 800104a:	2104      	movs	r1, #4
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f00b f99d 	bl	800c38c <_ZdlPvj>
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	4618      	mov	r0, r3
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <_ZN6tflite18MicroErrorReporterD1Ev>:

namespace tflite {

class MicroErrorReporter : public ErrorReporter {
 public:
  ~MicroErrorReporter() override {}
 800105c:	b580      	push	{r7, lr}
 800105e:	b082      	sub	sp, #8
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	4a05      	ldr	r2, [pc, #20]	; (800107c <_ZN6tflite18MicroErrorReporterD1Ev+0x20>)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ffd5 	bl	800101c <_ZN6tflite13ErrorReporterD1Ev>
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4618      	mov	r0, r3
 8001076:	3708      	adds	r7, #8
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	08012818 	.word	0x08012818

08001080 <_ZN6tflite18MicroErrorReporterD0Ev>:
 8001080:	b580      	push	{r7, lr}
 8001082:	b082      	sub	sp, #8
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ffe7 	bl	800105c <_ZN6tflite18MicroErrorReporterD1Ev>
 800108e:	2104      	movs	r1, #4
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f00b f97b 	bl	800c38c <_ZdlPvj>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <_ZN11flatbuffers11EndianCheckEv>:
  Offset(uoffset_t _o) : o(_o) {}
  Offset<void> Union() const { return Offset<void>(o); }
  bool IsNull() const { return !o; }
};

inline void EndianCheck() {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
  int endiantest = 1;
 80010a6:	2301      	movs	r3, #1
 80010a8:	607b      	str	r3, [r7, #4]
  // If this fails, see FLATBUFFERS_LITTLEENDIAN above.
  FLATBUFFERS_ASSERT(*reinterpret_cast<char *>(&endiantest) ==
 80010aa:	1d3b      	adds	r3, r7, #4
 80010ac:	781b      	ldrb	r3, [r3, #0]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d005      	beq.n	80010be <_ZN11flatbuffers11EndianCheckEv+0x1e>
 80010b2:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <_ZN11flatbuffers11EndianCheckEv+0x28>)
 80010b4:	4a05      	ldr	r2, [pc, #20]	; (80010cc <_ZN11flatbuffers11EndianCheckEv+0x2c>)
 80010b6:	214e      	movs	r1, #78	; 0x4e
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <_ZN11flatbuffers11EndianCheckEv+0x30>)
 80010ba:	f00b fa53 	bl	800c564 <__assert_func>
                     FLATBUFFERS_LITTLEENDIAN);
  (void)endiantest;
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	0800f160 	.word	0x0800f160
 80010cc:	08011cb4 	.word	0x08011cb4
 80010d0:	0800f1a4 	.word	0x0800f1a4

080010d4 <_ZNK11flatbuffers5Table9GetVTableEv>:

// "tables" use an offset table (possibly shared) that allows fields to be
// omitted and added at will, but uses an extra indirection to read.
class Table {
 public:
  const uint8_t *GetVTable() const {
 80010d4:	b590      	push	{r4, r7, lr}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
    return data_ - ReadScalar<soffset_t>(data_);
 80010dc:	687c      	ldr	r4, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fba0 	bl	8001826 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80010e6:	4603      	mov	r3, r0
 80010e8:	425b      	negs	r3, r3
 80010ea:	4423      	add	r3, r4
  }
 80010ec:	4618      	mov	r0, r3
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	bd90      	pop	{r4, r7, pc}

080010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>:

  // This gets the field offset for any of the functions below it, or 0
  // if the field was not present.
  voffset_t GetOptionalFieldOffset(voffset_t field) const {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
 80010fc:	460b      	mov	r3, r1
 80010fe:	807b      	strh	r3, [r7, #2]
    // The vtable offset is always at the start.
    auto vtable = GetVTable();
 8001100:	6878      	ldr	r0, [r7, #4]
 8001102:	f7ff ffe7 	bl	80010d4 <_ZNK11flatbuffers5Table9GetVTableEv>
 8001106:	60f8      	str	r0, [r7, #12]
    // The first element is the size of the vtable (fields + type id + itself).
    auto vtsize = ReadScalar<voffset_t>(vtable);
 8001108:	68f8      	ldr	r0, [r7, #12]
 800110a:	f000 fb70 	bl	80017ee <_ZN11flatbuffers10ReadScalarItEET_PKv>
 800110e:	4603      	mov	r3, r0
 8001110:	817b      	strh	r3, [r7, #10]
    // If the field we're accessing is outside the vtable, we're reading older
    // data, so it's the same as if the offset was 0 (not present).
    return field < vtsize ? ReadScalar<voffset_t>(vtable + field) : 0;
 8001112:	887a      	ldrh	r2, [r7, #2]
 8001114:	897b      	ldrh	r3, [r7, #10]
 8001116:	429a      	cmp	r2, r3
 8001118:	d207      	bcs.n	800112a <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x36>
 800111a:	887b      	ldrh	r3, [r7, #2]
 800111c:	68fa      	ldr	r2, [r7, #12]
 800111e:	4413      	add	r3, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f000 fb64 	bl	80017ee <_ZN11flatbuffers10ReadScalarItEET_PKv>
 8001126:	4603      	mov	r3, r0
 8001128:	e000      	b.n	800112c <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt+0x38>
 800112a:	2300      	movs	r3, #0
  }
 800112c:	4618      	mov	r0, r3
 800112e:	3710      	adds	r7, #16
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <_ZNK6tflite5Model7versionEv>:
    VT_BUFFERS = 12,
    VT_METADATA_BUFFER = 14,
    VT_METADATA = 16,
    VT_SIGNATURE_DEFS = 18
  };
  uint32_t version() const {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_VERSION, 0);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2200      	movs	r2, #0
 8001140:	2104      	movs	r1, #4
 8001142:	4618      	mov	r0, r3
 8001144:	f000 fb7d 	bl	8001842 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8001148:	4603      	mov	r3, r0
  }
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_ZN6tflite8GetModelEPKv>:
  }
  value = nullptr;
  type = BuiltinOptions_NONE;
}

inline const tflite::Model *GetModel(const void *buf) {
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  return flatbuffers::GetRoot<tflite::Model>(buf);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f000 fb8f 	bl	800187e <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <_ZNK6tflite10OpResolver12GetDelegatesEi>:
  // Returns optional delegates for resolving and handling ops in the flatbuffer
  // model. This may be used in addition to the standard TfLiteRegistration
  // lookup for graph resolution.
  using TfLiteDelegatePtrVector =
      std::vector<std::unique_ptr<TfLiteDelegate, void (*)(TfLiteDelegate*)>>;
  virtual TfLiteDelegatePtrVector GetDelegates(int num_threads) const {
 800116a:	b580      	push	{r7, lr}
 800116c:	b084      	sub	sp, #16
 800116e:	af00      	add	r7, sp, #0
 8001170:	60f8      	str	r0, [r7, #12]
 8001172:	60b9      	str	r1, [r7, #8]
 8001174:	607a      	str	r2, [r7, #4]
    return TfLiteDelegatePtrVector();
 8001176:	68f8      	ldr	r0, [r7, #12]
 8001178:	f000 fb8d 	bl	8001896 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
  }
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}

08001184 <_ZN6tflite10OpResolverD1Ev>:

  virtual ~OpResolver() {}
 8001184:	b480      	push	{r7}
 8001186:	b083      	sub	sp, #12
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	4a04      	ldr	r2, [pc, #16]	; (80011a0 <_ZN6tflite10OpResolverD1Ev+0x1c>)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	601a      	str	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	08011c8c 	.word	0x08011c8c

080011a4 <_ZN6tflite10OpResolverD0Ev>:
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
 80011ac:	6878      	ldr	r0, [r7, #4]
 80011ae:	f7ff ffe9 	bl	8001184 <_ZN6tflite10OpResolverD1Ev>
 80011b2:	2104      	movs	r1, #4
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f00b f8e9 	bl	800c38c <_ZdlPvj>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <_ZNK6tflite15MicroOpResolver6FindOpENS_15BuiltinOperatorEi>:
  // name.
  virtual const TfLiteRegistration* FindOp(const char* op) const = 0;

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(BuiltinOperator op,
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	60f8      	str	r0, [r7, #12]
 80011cc:	460b      	mov	r3, r1
 80011ce:	607a      	str	r2, [r7, #4]
 80011d0:	72fb      	strb	r3, [r7, #11]
                                   int version) const final {
    return FindOp(op);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3314      	adds	r3, #20
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	7afa      	ldrb	r2, [r7, #11]
 80011dc:	4611      	mov	r1, r2
 80011de:	68f8      	ldr	r0, [r7, #12]
 80011e0:	4798      	blx	r3
 80011e2:	4603      	mov	r3, r0
  }
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}

080011ec <_ZNK6tflite15MicroOpResolver6FindOpEPKci>:

  // This implementation exists for compatibility with the OpResolver base class
  // and disregards the version parameter.
  const TfLiteRegistration* FindOp(const char* op, int version) const final {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b084      	sub	sp, #16
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	60f8      	str	r0, [r7, #12]
 80011f4:	60b9      	str	r1, [r7, #8]
 80011f6:	607a      	str	r2, [r7, #4]
    return FindOp(op);
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	3318      	adds	r3, #24
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	68b9      	ldr	r1, [r7, #8]
 8001202:	68f8      	ldr	r0, [r7, #12]
 8001204:	4798      	blx	r3
 8001206:	4603      	mov	r3, r0
  }
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}

08001210 <_ZN6tflite15MicroOpResolverD1Ev>:

  // Returns the operator specific parsing function for the OpData for a
  // BuiltinOperator (if registered), else nullptr.
  virtual BuiltinParseFunction GetOpDataParser(BuiltinOperator op) const = 0;

  ~MicroOpResolver() override {}
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	4a05      	ldr	r2, [pc, #20]	; (8001230 <_ZN6tflite15MicroOpResolverD1Ev+0x20>)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffaf 	bl	8001184 <_ZN6tflite10OpResolverD1Ev>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	4618      	mov	r0, r3
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}
 8001230:	08011c64 	.word	0x08011c64

08001234 <_ZN6tflite15MicroOpResolverD0Ev>:
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6878      	ldr	r0, [r7, #4]
 800123e:	f7ff ffe7 	bl	8001210 <_ZN6tflite15MicroOpResolverD1Ev>
 8001242:	2104      	movs	r1, #4
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f00b f8a1 	bl	800c38c <_ZdlPvj>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4618      	mov	r0, r3
 800124e:	3708      	adds	r7, #8
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <__tcf_0>:
  /* USER CODE BEGIN 2 */
  // Start timer/counter
    HAL_TIM_Base_Start(&htim16);

    // Set up logging (modify tensorflow/lite/micro/debug_log.cc)
    static tflite::MicroErrorReporter micro_error_reporter;
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
 8001258:	4801      	ldr	r0, [pc, #4]	; (8001260 <__tcf_0+0xc>)
 800125a:	f7ff feff 	bl	800105c <_ZN6tflite18MicroErrorReporterD1Ev>
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000b50 	.word	0x20000b50

08001264 <__tcf_1>:
    }

    // Pull in only needed operations (should match NN layers). Template parameter
    // <n> is number of ops to be added. Available ops:
    // tensorflow/lite/micro/kernels/micro_ops.h
    static tflite::MicroMutableOpResolver<1> micro_op_resolver;
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
 8001268:	4801      	ldr	r0, [pc, #4]	; (8001270 <__tcf_1+0xc>)
 800126a:	f000 fc7d 	bl	8001b68 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20001644 	.word	0x20001644

08001274 <__tcf_2>:
      while(1);
    }

    // Build an interpreter to run the model with.
    static tflite::MicroInterpreter static_interpreter(
        model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 8001274:	b580      	push	{r7, lr}
 8001276:	af00      	add	r7, sp, #0
 8001278:	4801      	ldr	r0, [pc, #4]	; (8001280 <__tcf_2+0xc>)
 800127a:	f007 fb39 	bl	80088f0 <_ZN6tflite16MicroInterpreterD1Ev>
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20001680 	.word	0x20001680

08001284 <main>:
{
 8001284:	b5b0      	push	{r4, r5, r7, lr}
 8001286:	b0a0      	sub	sp, #128	; 0x80
 8001288:	af04      	add	r7, sp, #16
	int buf_len = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	66bb      	str	r3, [r7, #104]	; 0x68
  HAL_Init();
 800128e:	f000 feb8 	bl	8002002 <HAL_Init>
  SystemClock_Config();
 8001292:	f000 f96f 	bl	8001574 <_Z18SystemClock_Configv>
  MX_GPIO_Init();
 8001296:	f000 fa63 	bl	8001760 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800129a:	f000 fa2d 	bl	80016f8 <_ZL19MX_USART2_UART_Initv>
  MX_TIM16_Init();
 800129e:	f000 f9ff 	bl	80016a0 <_ZL13MX_TIM16_Initv>
    HAL_TIM_Base_Start(&htim16);
 80012a2:	489b      	ldr	r0, [pc, #620]	; (8001510 <main+0x28c>)
 80012a4:	f002 fb76 	bl	8003994 <HAL_TIM_Base_Start>
    static tflite::MicroErrorReporter micro_error_reporter;
 80012a8:	4b9a      	ldr	r3, [pc, #616]	; (8001514 <main+0x290>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	f3bf 8f5b 	dmb	ish
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	bf0c      	ite	eq
 80012ba:	2301      	moveq	r3, #1
 80012bc:	2300      	movne	r3, #0
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d010      	beq.n	80012e6 <main+0x62>
 80012c4:	4893      	ldr	r0, [pc, #588]	; (8001514 <main+0x290>)
 80012c6:	f00b f874 	bl	800c3b2 <__cxa_guard_acquire>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	bf14      	ite	ne
 80012d0:	2301      	movne	r3, #1
 80012d2:	2300      	moveq	r3, #0
 80012d4:	b2db      	uxtb	r3, r3
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d005      	beq.n	80012e6 <main+0x62>
 80012da:	488e      	ldr	r0, [pc, #568]	; (8001514 <main+0x290>)
 80012dc:	f00b f875 	bl	800c3ca <__cxa_guard_release>
 80012e0:	488d      	ldr	r0, [pc, #564]	; (8001518 <main+0x294>)
 80012e2:	f00b f95d 	bl	800c5a0 <atexit>
    error_reporter = &micro_error_reporter;
 80012e6:	4b8d      	ldr	r3, [pc, #564]	; (800151c <main+0x298>)
 80012e8:	4a8d      	ldr	r2, [pc, #564]	; (8001520 <main+0x29c>)
 80012ea:	601a      	str	r2, [r3, #0]
    error_reporter->Report("STM32 TensorFlow Lite test");
 80012ec:	4b8b      	ldr	r3, [pc, #556]	; (800151c <main+0x298>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	498c      	ldr	r1, [pc, #560]	; (8001524 <main+0x2a0>)
 80012f2:	4618      	mov	r0, r3
 80012f4:	f003 f8ca 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
    model = tflite::GetModel(sine_model);
 80012f8:	488b      	ldr	r0, [pc, #556]	; (8001528 <main+0x2a4>)
 80012fa:	f7ff ff2a 	bl	8001152 <_ZN6tflite8GetModelEPKv>
 80012fe:	4602      	mov	r2, r0
 8001300:	4b8a      	ldr	r3, [pc, #552]	; (800152c <main+0x2a8>)
 8001302:	601a      	str	r2, [r3, #0]
    if (model->version() != TFLITE_SCHEMA_VERSION)
 8001304:	4b89      	ldr	r3, [pc, #548]	; (800152c <main+0x2a8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff ff13 	bl	8001134 <_ZNK6tflite5Model7versionEv>
 800130e:	4603      	mov	r3, r0
 8001310:	2b03      	cmp	r3, #3
 8001312:	bf14      	ite	ne
 8001314:	2301      	movne	r3, #1
 8001316:	2300      	moveq	r3, #0
 8001318:	b2db      	uxtb	r3, r3
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <main+0xa8>
      error_reporter->Report("Model version does not match Schema");
 800131e:	4b7f      	ldr	r3, [pc, #508]	; (800151c <main+0x298>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4983      	ldr	r1, [pc, #524]	; (8001530 <main+0x2ac>)
 8001324:	4618      	mov	r0, r3
 8001326:	f003 f8b1 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      while(1);
 800132a:	e7fe      	b.n	800132a <main+0xa6>
    static tflite::MicroMutableOpResolver<1> micro_op_resolver;
 800132c:	4b81      	ldr	r3, [pc, #516]	; (8001534 <main+0x2b0>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	f3bf 8f5b 	dmb	ish
 8001334:	b2db      	uxtb	r3, r3
 8001336:	f003 0301 	and.w	r3, r3, #1
 800133a:	2b00      	cmp	r3, #0
 800133c:	bf0c      	ite	eq
 800133e:	2301      	moveq	r3, #1
 8001340:	2300      	movne	r3, #0
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d014      	beq.n	8001372 <main+0xee>
 8001348:	487a      	ldr	r0, [pc, #488]	; (8001534 <main+0x2b0>)
 800134a:	f00b f832 	bl	800c3b2 <__cxa_guard_acquire>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf14      	ite	ne
 8001354:	2301      	movne	r3, #1
 8001356:	2300      	moveq	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d009      	beq.n	8001372 <main+0xee>
 800135e:	2100      	movs	r1, #0
 8001360:	4875      	ldr	r0, [pc, #468]	; (8001538 <main+0x2b4>)
 8001362:	f000 fac7 	bl	80018f4 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE>
 8001366:	4873      	ldr	r0, [pc, #460]	; (8001534 <main+0x2b0>)
 8001368:	f00b f82f 	bl	800c3ca <__cxa_guard_release>
 800136c:	4873      	ldr	r0, [pc, #460]	; (800153c <main+0x2b8>)
 800136e:	f00b f917 	bl	800c5a0 <atexit>
    return AddBuiltin(BuiltinOperator_FLOOR,
                      tflite::ops::micro::Register_FLOOR(), ParseFloor);
  }

  TfLiteStatus AddFullyConnected(
      const TfLiteRegistration& registration = Register_FULLY_CONNECTED()) {
 8001372:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001376:	4618      	mov	r0, r3
 8001378:	f00a fb8a 	bl	800ba90 <_ZN6tflite24Register_FULLY_CONNECTEDEv>
    tflite_status = micro_op_resolver.AddFullyConnected();
 800137c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001380:	4619      	mov	r1, r3
 8001382:	486d      	ldr	r0, [pc, #436]	; (8001538 <main+0x2b4>)
 8001384:	f000 fad2 	bl	800192c <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK18TfLiteRegistration>
 8001388:	4603      	mov	r3, r0
 800138a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (tflite_status != kTfLiteOk)
 800138e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001392:	2b00      	cmp	r3, #0
 8001394:	d006      	beq.n	80013a4 <main+0x120>
      error_reporter->Report("Could not add FULLY CONNECTED op");
 8001396:	4b61      	ldr	r3, [pc, #388]	; (800151c <main+0x298>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4969      	ldr	r1, [pc, #420]	; (8001540 <main+0x2bc>)
 800139c:	4618      	mov	r0, r3
 800139e:	f003 f875 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      while(1);
 80013a2:	e7fe      	b.n	80013a2 <main+0x11e>
        model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
 80013a4:	4b67      	ldr	r3, [pc, #412]	; (8001544 <main+0x2c0>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	f3bf 8f5b 	dmb	ish
 80013ac:	b2db      	uxtb	r3, r3
 80013ae:	f003 0301 	and.w	r3, r3, #1
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	bf0c      	ite	eq
 80013b6:	2301      	moveq	r3, #1
 80013b8:	2300      	movne	r3, #0
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d01f      	beq.n	8001400 <main+0x17c>
 80013c0:	4860      	ldr	r0, [pc, #384]	; (8001544 <main+0x2c0>)
 80013c2:	f00a fff6 	bl	800c3b2 <__cxa_guard_acquire>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	bf14      	ite	ne
 80013cc:	2301      	movne	r3, #1
 80013ce:	2300      	moveq	r3, #0
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d014      	beq.n	8001400 <main+0x17c>
 80013d6:	4b55      	ldr	r3, [pc, #340]	; (800152c <main+0x2a8>)
 80013d8:	6819      	ldr	r1, [r3, #0]
 80013da:	4b50      	ldr	r3, [pc, #320]	; (800151c <main+0x298>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	9202      	str	r2, [sp, #8]
 80013e2:	9301      	str	r3, [sp, #4]
 80013e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	4b57      	ldr	r3, [pc, #348]	; (8001548 <main+0x2c4>)
 80013ec:	4a52      	ldr	r2, [pc, #328]	; (8001538 <main+0x2b4>)
 80013ee:	4857      	ldr	r0, [pc, #348]	; (800154c <main+0x2c8>)
 80013f0:	f007 fa30 	bl	8008854 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>
 80013f4:	4853      	ldr	r0, [pc, #332]	; (8001544 <main+0x2c0>)
 80013f6:	f00a ffe8 	bl	800c3ca <__cxa_guard_release>
 80013fa:	4855      	ldr	r0, [pc, #340]	; (8001550 <main+0x2cc>)
 80013fc:	f00b f8d0 	bl	800c5a0 <atexit>
    interpreter = &static_interpreter;
 8001400:	4b54      	ldr	r3, [pc, #336]	; (8001554 <main+0x2d0>)
 8001402:	4a52      	ldr	r2, [pc, #328]	; (800154c <main+0x2c8>)
 8001404:	601a      	str	r2, [r3, #0]

    // Allocate memory from the tensor_arena for the model's tensors.
    tflite_status = interpreter->AllocateTensors();
 8001406:	4b53      	ldr	r3, [pc, #332]	; (8001554 <main+0x2d0>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f007 fb04 	bl	8008a18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8001410:	4603      	mov	r3, r0
 8001412:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    if (tflite_status != kTfLiteOk)
 8001416:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800141a:	2b00      	cmp	r3, #0
 800141c:	d006      	beq.n	800142c <main+0x1a8>
    {
      error_reporter->Report("AllocateTensors() failed");
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <main+0x298>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	494d      	ldr	r1, [pc, #308]	; (8001558 <main+0x2d4>)
 8001424:	4618      	mov	r0, r3
 8001426:	f003 f831 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
      while(1);
 800142a:	e7fe      	b.n	800142a <main+0x1a6>
    }

    // Assign model input and output buffers (tensors) to pointers
    model_input = interpreter->input(0);
 800142c:	4b49      	ldr	r3, [pc, #292]	; (8001554 <main+0x2d0>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	2100      	movs	r1, #0
 8001432:	4618      	mov	r0, r3
 8001434:	f007 fcc0 	bl	8008db8 <_ZN6tflite16MicroInterpreter5inputEj>
 8001438:	4602      	mov	r2, r0
 800143a:	4b48      	ldr	r3, [pc, #288]	; (800155c <main+0x2d8>)
 800143c:	601a      	str	r2, [r3, #0]
    model_output = interpreter->output(0);
 800143e:	4b45      	ldr	r3, [pc, #276]	; (8001554 <main+0x2d0>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2100      	movs	r1, #0
 8001444:	4618      	mov	r0, r3
 8001446:	f007 fd1d 	bl	8008e84 <_ZN6tflite16MicroInterpreter6outputEj>
 800144a:	4602      	mov	r2, r0
 800144c:	4b44      	ldr	r3, [pc, #272]	; (8001560 <main+0x2dc>)
 800144e:	601a      	str	r2, [r3, #0]

    // Get number of elements in input tensor
    num_elements = model_input->bytes / sizeof(float);
 8001450:	4b42      	ldr	r3, [pc, #264]	; (800155c <main+0x2d8>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	089b      	lsrs	r3, r3, #2
 8001458:	663b      	str	r3, [r7, #96]	; 0x60
    buf_len = sprintf(buf, "Number of input elements: %lu\r\n", num_elements);
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800145e:	4941      	ldr	r1, [pc, #260]	; (8001564 <main+0x2e0>)
 8001460:	4618      	mov	r0, r3
 8001462:	f00b ffb3 	bl	800d3cc <siprintf>
 8001466:	66b8      	str	r0, [r7, #104]	; 0x68
    HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 8001468:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800146a:	b29a      	uxth	r2, r3
 800146c:	1d39      	adds	r1, r7, #4
 800146e:	2364      	movs	r3, #100	; 0x64
 8001470:	483d      	ldr	r0, [pc, #244]	; (8001568 <main+0x2e4>)
 8001472:	f002 fb8d 	bl	8003b90 <HAL_UART_Transmit>
  /* USER CODE BEGIN WHILE */
  //uint8_t buf[4] = {'s', 'u', 'p', '\n'};
    while (1)
     {
       // Fill input buffer (use test value)
       for (uint32_t i = 0; i < num_elements; i++)
 8001476:	2300      	movs	r3, #0
 8001478:	66fb      	str	r3, [r7, #108]	; 0x6c
 800147a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800147c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800147e:	429a      	cmp	r2, r3
 8001480:	d20c      	bcs.n	800149c <main+0x218>
       {
         model_input->data.f[i] = 2.0f;
 8001482:	4b36      	ldr	r3, [pc, #216]	; (800155c <main+0x2d8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	685a      	ldr	r2, [r3, #4]
 8001488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4413      	add	r3, r2
 800148e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001492:	601a      	str	r2, [r3, #0]
       for (uint32_t i = 0; i < num_elements; i++)
 8001494:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001496:	3301      	adds	r3, #1
 8001498:	66fb      	str	r3, [r7, #108]	; 0x6c
 800149a:	e7ee      	b.n	800147a <main+0x1f6>
       }

       // Get current timestamp
       timestamp = htim16.Instance->CNT;
 800149c:	4b1c      	ldr	r3, [pc, #112]	; (8001510 <main+0x28c>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	65fb      	str	r3, [r7, #92]	; 0x5c

       // Run inference
       tflite_status = interpreter->Invoke();
 80014a4:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <main+0x2d0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f007 fbe7 	bl	8008c7c <_ZN6tflite16MicroInterpreter6InvokeEv>
 80014ae:	4603      	mov	r3, r0
 80014b0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
       if (tflite_status != kTfLiteOk)
 80014b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <main+0x244>
       {
         error_reporter->Report("Invoke failed");
 80014bc:	4b17      	ldr	r3, [pc, #92]	; (800151c <main+0x298>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	492a      	ldr	r1, [pc, #168]	; (800156c <main+0x2e8>)
 80014c2:	4618      	mov	r0, r3
 80014c4:	f002 ffe2 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
       }

       // Read output (predicted y) of neural network
       y_val = model_output->data.f[0];
 80014c8:	4b25      	ldr	r3, [pc, #148]	; (8001560 <main+0x2dc>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	685b      	ldr	r3, [r3, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	65bb      	str	r3, [r7, #88]	; 0x58

       // Print output of neural network along with inference time (microseconds)
       buf_len = sprintf(buf,
 80014d2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80014d4:	f7ff f848 	bl	8000568 <__aeabi_f2d>
 80014d8:	4604      	mov	r4, r0
 80014da:	460d      	mov	r5, r1
                         "Output: %f | Duration: %lu\r\n",
                         y_val,
                         htim16.Instance->CNT - timestamp);
 80014dc:	4b0c      	ldr	r3, [pc, #48]	; (8001510 <main+0x28c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
       buf_len = sprintf(buf,
 80014e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	1d38      	adds	r0, r7, #4
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4622      	mov	r2, r4
 80014ec:	462b      	mov	r3, r5
 80014ee:	4920      	ldr	r1, [pc, #128]	; (8001570 <main+0x2ec>)
 80014f0:	f00b ff6c 	bl	800d3cc <siprintf>
 80014f4:	66b8      	str	r0, [r7, #104]	; 0x68
       HAL_UART_Transmit(&huart2, (uint8_t *)buf, buf_len, 100);
 80014f6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	1d39      	adds	r1, r7, #4
 80014fc:	2364      	movs	r3, #100	; 0x64
 80014fe:	481a      	ldr	r0, [pc, #104]	; (8001568 <main+0x2e4>)
 8001500:	f002 fb46 	bl	8003b90 <HAL_UART_Transmit>

       // Wait before doing it again
       HAL_Delay(500);
 8001504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001508:	f000 fdf0 	bl	80020ec <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800150c:	e7b3      	b.n	8001476 <main+0x1f2>
 800150e:	bf00      	nop
 8001510:	20000d5c 	.word	0x20000d5c
 8001514:	20001640 	.word	0x20001640
 8001518:	08001255 	.word	0x08001255
 800151c:	20000e28 	.word	0x20000e28
 8001520:	20000b50 	.word	0x20000b50
 8001524:	0800f22c 	.word	0x0800f22c
 8001528:	20000000 	.word	0x20000000
 800152c:	20000e2c 	.word	0x20000e2c
 8001530:	0800f248 	.word	0x0800f248
 8001534:	2000167c 	.word	0x2000167c
 8001538:	20001644 	.word	0x20001644
 800153c:	08001265 	.word	0x08001265
 8001540:	0800f26c 	.word	0x0800f26c
 8001544:	20001718 	.word	0x20001718
 8001548:	20000e40 	.word	0x20000e40
 800154c:	20001680 	.word	0x20001680
 8001550:	08001275 	.word	0x08001275
 8001554:	20000e30 	.word	0x20000e30
 8001558:	0800f290 	.word	0x0800f290
 800155c:	20000e34 	.word	0x20000e34
 8001560:	20000e38 	.word	0x20000e38
 8001564:	0800f2ac 	.word	0x0800f2ac
 8001568:	20000da8 	.word	0x20000da8
 800156c:	0800f2cc 	.word	0x0800f2cc
 8001570:	0800f2dc 	.word	0x0800f2dc

08001574 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b0ac      	sub	sp, #176	; 0xb0
 8001578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800157e:	2244      	movs	r2, #68	; 0x44
 8001580:	2100      	movs	r1, #0
 8001582:	4618      	mov	r0, r3
 8001584:	f00b f882 	bl	800c68c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001588:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800158c:	2200      	movs	r2, #0
 800158e:	601a      	str	r2, [r3, #0]
 8001590:	605a      	str	r2, [r3, #4]
 8001592:	609a      	str	r2, [r3, #8]
 8001594:	60da      	str	r2, [r3, #12]
 8001596:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001598:	1d3b      	adds	r3, r7, #4
 800159a:	2254      	movs	r2, #84	; 0x54
 800159c:	2100      	movs	r1, #0
 800159e:	4618      	mov	r0, r3
 80015a0:	f00b f874 	bl	800c68c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015a4:	f001 f814 	bl	80025d0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015a8:	4b3c      	ldr	r3, [pc, #240]	; (800169c <_Z18SystemClock_Configv+0x128>)
 80015aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015ae:	4a3b      	ldr	r2, [pc, #236]	; (800169c <_Z18SystemClock_Configv+0x128>)
 80015b0:	f023 0318 	bic.w	r3, r3, #24
 80015b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015b8:	2314      	movs	r3, #20
 80015ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015bc:	2301      	movs	r3, #1
 80015be:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015c0:	2301      	movs	r3, #1
 80015c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015cc:	2360      	movs	r3, #96	; 0x60
 80015ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015d2:	2302      	movs	r3, #2
 80015d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80015d8:	2301      	movs	r3, #1
 80015da:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015de:	2301      	movs	r3, #1
 80015e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80015e4:	2328      	movs	r3, #40	; 0x28
 80015e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015ea:	2307      	movs	r3, #7
 80015ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015f6:	2302      	movs	r3, #2
 80015f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001600:	4618      	mov	r0, r3
 8001602:	f001 f859 	bl	80026b8 <HAL_RCC_OscConfig>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	bf14      	ite	ne
 800160c:	2301      	movne	r3, #1
 800160e:	2300      	moveq	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <_Z18SystemClock_Configv+0xa6>
  {
    Error_Handler();
 8001616:	f000 f8db 	bl	80017d0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800161a:	230f      	movs	r3, #15
 800161c:	65bb      	str	r3, [r7, #88]	; 0x58
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800161e:	2303      	movs	r3, #3
 8001620:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001622:	2300      	movs	r3, #0
 8001624:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001626:	2300      	movs	r3, #0
 8001628:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	66bb      	str	r3, [r7, #104]	; 0x68

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800162e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001632:	2104      	movs	r1, #4
 8001634:	4618      	mov	r0, r3
 8001636:	f001 fc5f 	bl	8002ef8 <HAL_RCC_ClockConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	bf14      	ite	ne
 8001640:	2301      	movne	r3, #1
 8001642:	2300      	moveq	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <_Z18SystemClock_Configv+0xda>
  {
    Error_Handler();
 800164a:	f000 f8c1 	bl	80017d0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800164e:	2302      	movs	r3, #2
 8001650:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001652:	2300      	movs	r3, #0
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	4618      	mov	r0, r3
 800165a:	f001 fe51 	bl	8003300 <HAL_RCCEx_PeriphCLKConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	bf14      	ite	ne
 8001664:	2301      	movne	r3, #1
 8001666:	2300      	moveq	r3, #0
 8001668:	b2db      	uxtb	r3, r3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <_Z18SystemClock_Configv+0xfe>
  {
    Error_Handler();
 800166e:	f000 f8af 	bl	80017d0 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001672:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001676:	f000 ffc9 	bl	800260c <HAL_PWREx_ControlVoltageScaling>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	bf14      	ite	ne
 8001680:	2301      	movne	r3, #1
 8001682:	2300      	moveq	r3, #0
 8001684:	b2db      	uxtb	r3, r3
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <_Z18SystemClock_Configv+0x11a>
  {
    Error_Handler();
 800168a:	f000 f8a1 	bl	80017d0 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800168e:	f002 f829 	bl	80036e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001692:	bf00      	nop
 8001694:	37b0      	adds	r7, #176	; 0xb0
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40021000 	.word	0x40021000

080016a0 <_ZL13MX_TIM16_Initv>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <_ZL13MX_TIM16_Initv+0x50>)
 80016a6:	4a13      	ldr	r2, [pc, #76]	; (80016f4 <_ZL13MX_TIM16_Initv+0x54>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 79;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <_ZL13MX_TIM16_Initv+0x50>)
 80016ac:	224f      	movs	r2, #79	; 0x4f
 80016ae:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <_ZL13MX_TIM16_Initv+0x50>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 80016b6:	4b0e      	ldr	r3, [pc, #56]	; (80016f0 <_ZL13MX_TIM16_Initv+0x50>)
 80016b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80016bc:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b0c      	ldr	r3, [pc, #48]	; (80016f0 <_ZL13MX_TIM16_Initv+0x50>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80016c4:	4b0a      	ldr	r3, [pc, #40]	; (80016f0 <_ZL13MX_TIM16_Initv+0x50>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016ca:	4b09      	ldr	r3, [pc, #36]	; (80016f0 <_ZL13MX_TIM16_Initv+0x50>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80016d0:	4807      	ldr	r0, [pc, #28]	; (80016f0 <_ZL13MX_TIM16_Initv+0x50>)
 80016d2:	f002 f907 	bl	80038e4 <HAL_TIM_Base_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <_ZL13MX_TIM16_Initv+0x4a>
  {
    Error_Handler();
 80016e6:	f000 f873 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000d5c 	.word	0x20000d5c
 80016f4:	40014400 	.word	0x40014400

080016f8 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016fc:	4b16      	ldr	r3, [pc, #88]	; (8001758 <_ZL19MX_USART2_UART_Initv+0x60>)
 80016fe:	4a17      	ldr	r2, [pc, #92]	; (800175c <_ZL19MX_USART2_UART_Initv+0x64>)
 8001700:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001704:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001708:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800170a:	4b13      	ldr	r3, [pc, #76]	; (8001758 <_ZL19MX_USART2_UART_Initv+0x60>)
 800170c:	2200      	movs	r2, #0
 800170e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001712:	2200      	movs	r2, #0
 8001714:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001718:	2200      	movs	r2, #0
 800171a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800171c:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <_ZL19MX_USART2_UART_Initv+0x60>)
 800171e:	220c      	movs	r2, #12
 8001720:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001722:	4b0d      	ldr	r3, [pc, #52]	; (8001758 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001724:	2200      	movs	r2, #0
 8001726:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001728:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <_ZL19MX_USART2_UART_Initv+0x60>)
 800172a:	2200      	movs	r2, #0
 800172c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172e:	4b0a      	ldr	r3, [pc, #40]	; (8001758 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001730:	2200      	movs	r2, #0
 8001732:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001734:	4b08      	ldr	r3, [pc, #32]	; (8001758 <_ZL19MX_USART2_UART_Initv+0x60>)
 8001736:	2200      	movs	r2, #0
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800173a:	4807      	ldr	r0, [pc, #28]	; (8001758 <_ZL19MX_USART2_UART_Initv+0x60>)
 800173c:	f002 f9da 	bl	8003af4 <HAL_UART_Init>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	bf14      	ite	ne
 8001746:	2301      	movne	r3, #1
 8001748:	2300      	moveq	r3, #0
 800174a:	b2db      	uxtb	r3, r3
 800174c:	2b00      	cmp	r3, #0
 800174e:	d001      	beq.n	8001754 <_ZL19MX_USART2_UART_Initv+0x5c>
  {
    Error_Handler();
 8001750:	f000 f83e 	bl	80017d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001754:	bf00      	nop
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000da8 	.word	0x20000da8
 800175c:	40004400 	.word	0x40004400

08001760 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	4b0f      	ldr	r3, [pc, #60]	; (80017a4 <_ZL12MX_GPIO_Initv+0x44>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800176a:	4a0e      	ldr	r2, [pc, #56]	; (80017a4 <_ZL12MX_GPIO_Initv+0x44>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001772:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <_ZL12MX_GPIO_Initv+0x44>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	607b      	str	r3, [r7, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <_ZL12MX_GPIO_Initv+0x44>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001782:	4a08      	ldr	r2, [pc, #32]	; (80017a4 <_ZL12MX_GPIO_Initv+0x44>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	64d3      	str	r3, [r2, #76]	; 0x4c
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <_ZL12MX_GPIO_Initv+0x44>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	603b      	str	r3, [r7, #0]
 8001794:	683b      	ldr	r3, [r7, #0]

}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40021000 	.word	0x40021000

080017a8 <DebugLog>:

/* USER CODE BEGIN 4 */
extern "C" void DebugLog(const char* s)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b082      	sub	sp, #8
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)s, strlen(s), 100);
 80017b0:	6878      	ldr	r0, [r7, #4]
 80017b2:	f7fe fd17 	bl	80001e4 <strlen>
 80017b6:	4603      	mov	r3, r0
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	2364      	movs	r3, #100	; 0x64
 80017bc:	6879      	ldr	r1, [r7, #4]
 80017be:	4803      	ldr	r0, [pc, #12]	; (80017cc <DebugLog+0x24>)
 80017c0:	f002 f9e6 	bl	8003b90 <HAL_UART_Transmit>
}
 80017c4:	bf00      	nop
 80017c6:	3708      	adds	r7, #8
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	20000da8 	.word	0x20000da8

080017d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017d4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017d6:	e7fe      	b.n	80017d6 <Error_Handler+0x6>

080017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>:
#if defined(_MSC_VER)
  #pragma warning(pop)
#endif


template<typename T> T EndianScalar(T t) {
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  #if FLATBUFFERS_LITTLEENDIAN
    return t;
 80017e0:	687b      	ldr	r3, [r7, #4]
  #else
    return EndianSwap(t);
  #endif
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <_ZN11flatbuffers10ReadScalarItEET_PKv>:

template<typename T>
// UBSAN: C++ aliasing type rules, see std::bit_cast<> for details.
__supress_ubsan__("alignment")
T ReadScalar(const void *p) {
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b082      	sub	sp, #8
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	881b      	ldrh	r3, [r3, #0]
 80017fa:	4618      	mov	r0, r3
 80017fc:	f000 f8b3 	bl	8001966 <_ZN11flatbuffers12EndianScalarItEET_S1_>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	3708      	adds	r7, #8
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}

0800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>:
T ReadScalar(const void *p) {
 800180a:	b580      	push	{r7, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ffde 	bl	80017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_ZN11flatbuffers10ReadScalarIlEET_PKv>:
T ReadScalar(const void *p) {
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f000 f88c 	bl	8001950 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>:

  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8001842:	b580      	push	{r7, lr}
 8001844:	b086      	sub	sp, #24
 8001846:	af00      	add	r7, sp, #0
 8001848:	60f8      	str	r0, [r7, #12]
 800184a:	460b      	mov	r3, r1
 800184c:	607a      	str	r2, [r7, #4]
 800184e:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 8001850:	897b      	ldrh	r3, [r7, #10]
 8001852:	4619      	mov	r1, r3
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7ff fc4d 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800185a:	4603      	mov	r3, r0
 800185c:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800185e:	8afb      	ldrh	r3, [r7, #22]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d007      	beq.n	8001874 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x32>
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	8afb      	ldrh	r3, [r7, #22]
 8001868:	4413      	add	r3, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ffcd 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8001870:	4603      	mov	r3, r0
 8001872:	e000      	b.n	8001876 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_+0x34>
 8001874:	687b      	ldr	r3, [r7, #4]
  }
 8001876:	4618      	mov	r0, r3
 8001878:	3718      	adds	r7, #24
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <_ZN11flatbuffers7GetRootIN6tflite5ModelEEEPKT_PKv>:
template<typename T> const T *GetRoot(const void *buf) {
 800187e:	b580      	push	{r7, lr}
 8001880:	b082      	sub	sp, #8
 8001882:	af00      	add	r7, sp, #0
 8001884:	6078      	str	r0, [r7, #4]
  return GetMutableRoot<T>(const_cast<void *>(buf));
 8001886:	6878      	ldr	r0, [r7, #4]
 8001888:	f000 f879 	bl	800197e <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>
 800188c:	4603      	mov	r3, r0
}
 800188e:	4618      	mov	r0, r3
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <_ZNSt6vectorISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      // (assign() and get_allocator() are also listed in this section)

      /**
       *  @brief  Creates a %vector with no elements.
       */
      vector()
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	6078      	str	r0, [r7, #4]
#if __cplusplus >= 201103L
      noexcept(is_nothrow_default_constructible<_Alloc>::value)
#endif
      : _Base() { }
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f000 f87e 	bl	80019a2 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <_ZN6tflite10OpResolverC1Ev>:
class OpResolver {
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	4a04      	ldr	r2, [pc, #16]	; (80018cc <_ZN6tflite10OpResolverC1Ev+0x1c>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4618      	mov	r0, r3
 80018c2:	370c      	adds	r7, #12
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr
 80018cc:	08011c8c 	.word	0x08011c8c

080018d0 <_ZN6tflite15MicroOpResolverC1Ev>:
class MicroOpResolver : public OpResolver {
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff ffe8 	bl	80018b0 <_ZN6tflite10OpResolverC1Ev>
 80018e0:	4a03      	ldr	r2, [pc, #12]	; (80018f0 <_ZN6tflite15MicroOpResolverC1Ev+0x20>)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4618      	mov	r0, r3
 80018ea:	3708      	adds	r7, #8
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	08011c64 	.word	0x08011c64

080018f4 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE>:
  explicit MicroMutableOpResolver(ErrorReporter* error_reporter = nullptr)
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
 80018fc:	6039      	str	r1, [r7, #0]
      : error_reporter_(error_reporter) {}
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4618      	mov	r0, r3
 8001902:	f7ff ffe5 	bl	80018d0 <_ZN6tflite15MicroOpResolverC1Ev>
 8001906:	4a08      	ldr	r2, [pc, #32]	; (8001928 <_ZN6tflite22MicroMutableOpResolverILj1EEC1EPNS_13ErrorReporterE+0x34>)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	601a      	str	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	625a      	str	r2, [r3, #36]	; 0x24
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2200      	movs	r2, #0
 8001916:	631a      	str	r2, [r3, #48]	; 0x30
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	635a      	str	r2, [r3, #52]	; 0x34
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	4618      	mov	r0, r3
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	08011c3c 	.word	0x08011c3c

0800192c <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK18TfLiteRegistration>:
  TfLiteStatus AddFullyConnected(
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
    return AddBuiltin(BuiltinOperator_FULLY_CONNECTED, registration,
                      ParseFullyConnected);
 8001936:	4b05      	ldr	r3, [pc, #20]	; (800194c <_ZN6tflite22MicroMutableOpResolverILj1EE17AddFullyConnectedERK18TfLiteRegistration+0x20>)
 8001938:	683a      	ldr	r2, [r7, #0]
 800193a:	2109      	movs	r1, #9
 800193c:	6878      	ldr	r0, [r7, #4]
 800193e:	f000 f83d 	bl	80019bc <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>
 8001942:	4603      	mov	r3, r0
  }
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	080047e9 	.word	0x080047e9

08001950 <_ZN11flatbuffers12EndianScalarIlEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
    return t;
 8001958:	687b      	ldr	r3, [r7, #4]
}
 800195a:	4618      	mov	r0, r3
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr

08001966 <_ZN11flatbuffers12EndianScalarItEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8001966:	b480      	push	{r7}
 8001968:	b083      	sub	sp, #12
 800196a:	af00      	add	r7, sp, #0
 800196c:	4603      	mov	r3, r0
 800196e:	80fb      	strh	r3, [r7, #6]
    return t;
 8001970:	88fb      	ldrh	r3, [r7, #6]
}
 8001972:	4618      	mov	r0, r3
 8001974:	370c      	adds	r7, #12
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr

0800197e <_ZN11flatbuffers14GetMutableRootIN6tflite5ModelEEEPT_Pv>:
template<typename T> T *GetMutableRoot(void *buf) {
 800197e:	b580      	push	{r7, lr}
 8001980:	b082      	sub	sp, #8
 8001982:	af00      	add	r7, sp, #0
 8001984:	6078      	str	r0, [r7, #4]
  EndianCheck();
 8001986:	f7ff fb8b 	bl	80010a0 <_ZN11flatbuffers11EndianCheckEv>
      EndianScalar(*reinterpret_cast<uoffset_t *>(buf)));
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f7ff ff22 	bl	80017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8001994:	4602      	mov	r2, r0
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EEC1Ev>:
      _Vector_base()
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
      : _M_impl() { }
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f885 	bl	8001abc <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE>:
  unsigned int GetRegistrationLength() { return registrations_len_; }

 private:
  TF_LITE_REMOVE_VIRTUAL_DELETE

  TfLiteStatus AddBuiltin(tflite::BuiltinOperator op,
 80019bc:	b5b0      	push	{r4, r5, r7, lr}
 80019be:	b084      	sub	sp, #16
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	607a      	str	r2, [r7, #4]
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	460b      	mov	r3, r1
 80019ca:	72fb      	strb	r3, [r7, #11]
                          const TfLiteRegistration& registration,
                          MicroOpResolver::BuiltinParseFunction parser) {
    if (op == BuiltinOperator_CUSTOM) {
 80019cc:	7afb      	ldrb	r3, [r7, #11]
 80019ce:	2b20      	cmp	r3, #32
 80019d0:	d10b      	bne.n	80019ea <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2e>
      if (error_reporter_ != nullptr) {
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d005      	beq.n	80019e6 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x2a>
        TF_LITE_REPORT_ERROR(error_reporter_,
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019de:	4934      	ldr	r1, [pc, #208]	; (8001ab0 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf4>)
 80019e0:	4618      	mov	r0, r3
 80019e2:	f002 fd53 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Invalid parameter BuiltinOperator_CUSTOM to the "
                             "AddBuiltin function.");
      }
      return kTfLiteError;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e05d      	b.n	8001aa6 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (FindOp(op) != nullptr) {
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	3314      	adds	r3, #20
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	7afa      	ldrb	r2, [r7, #11]
 80019f4:	4611      	mov	r1, r2
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	4798      	blx	r3
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	bf14      	ite	ne
 8001a00:	2301      	movne	r3, #1
 8001a02:	2300      	moveq	r3, #0
 8001a04:	b2db      	uxtb	r3, r3
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00c      	beq.n	8001a24 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x68>
      if (error_reporter_ != nullptr) {
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d006      	beq.n	8001a20 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x64>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a16:	7afa      	ldrb	r2, [r7, #11]
 8001a18:	4926      	ldr	r1, [pc, #152]	; (8001ab4 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xf8>)
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f002 fd36 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Calling AddBuiltin with the same op more than "
                             "once is not supported (Op: #%d).",
                             op);
      }
      return kTfLiteError;
 8001a20:	2301      	movs	r3, #1
 8001a22:	e040      	b.n	8001aa6 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    if (registrations_len_ >= tOpCount) {
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00c      	beq.n	8001a46 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x8a>
      if (error_reporter_) {
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d006      	beq.n	8001a42 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0x86>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001a38:	7afa      	ldrb	r2, [r7, #11]
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	491e      	ldr	r1, [pc, #120]	; (8001ab8 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xfc>)
 8001a3e:	f002 fd25 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Couldn't register builtin op #%d, resolver size "
                             "is too small (%d).",
                             op, tOpCount);
      }
      return kTfLiteError;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e02f      	b.n	8001aa6 <_ZN6tflite22MicroMutableOpResolverILj1EE10AddBuiltinENS_15BuiltinOperatorERK18TfLiteRegistrationPF12TfLiteStatusPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPvE+0xea>
    }

    registrations_[registrations_len_] = registration;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	68fa      	ldr	r2, [r7, #12]
 8001a4c:	015b      	lsls	r3, r3, #5
 8001a4e:	4413      	add	r3, r2
 8001a50:	687a      	ldr	r2, [r7, #4]
 8001a52:	1d1c      	adds	r4, r3, #4
 8001a54:	4615      	mov	r5, r2
 8001a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001a5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Strictly speaking, the builtin_code is not necessary for TFLM but filling
    // it in regardless.
    registrations_[registrations_len_].builtin_code = op;
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a66:	7afa      	ldrb	r2, [r7, #11]
 8001a68:	68f9      	ldr	r1, [r7, #12]
 8001a6a:	015b      	lsls	r3, r3, #5
 8001a6c:	440b      	add	r3, r1
 8001a6e:	3318      	adds	r3, #24
 8001a70:	601a      	str	r2, [r3, #0]
    registrations_len_++;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a76:	1c5a      	adds	r2, r3, #1
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	625a      	str	r2, [r3, #36]	; 0x24

    builtin_codes_[num_buitin_ops_] = op;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a80:	68fa      	ldr	r2, [r7, #12]
 8001a82:	4413      	add	r3, r2
 8001a84:	7afa      	ldrb	r2, [r7, #11]
 8001a86:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    builtin_parsers_[num_buitin_ops_] = parser;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	330a      	adds	r3, #10
 8001a92:	009b      	lsls	r3, r3, #2
 8001a94:	4413      	add	r3, r2
 8001a96:	683a      	ldr	r2, [r7, #0]
 8001a98:	605a      	str	r2, [r3, #4]
    num_buitin_ops_++;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30

    return kTfLiteOk;
 8001aa4:	2300      	movs	r3, #0
  }
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bdb0      	pop	{r4, r5, r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	0800f2fc 	.word	0x0800f2fc
 8001ab4:	0800f344 	.word	0x0800f344
 8001ab8:	0800f394 	.word	0x0800f394

08001abc <_ZNSt12_Vector_baseISt10unique_ptrI14TfLiteDelegatePFvPS1_EESaIS5_EE12_Vector_implC1Ev>:
	_Vector_impl()
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type(), _M_start(), _M_finish(), _M_end_of_storage()
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	f000 f838 	bl	8001b3a <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2200      	movs	r2, #0
 8001ace:	601a      	str	r2, [r3, #0]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	609a      	str	r2, [r3, #8]
	{ }
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE>:
  const TfLiteRegistration* FindOp(tflite::BuiltinOperator op) const override {
 8001ae6:	b480      	push	{r7}
 8001ae8:	b085      	sub	sp, #20
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	6078      	str	r0, [r7, #4]
 8001aee:	460b      	mov	r3, r1
 8001af0:	70fb      	strb	r3, [r7, #3]
    if (op == BuiltinOperator_CUSTOM) return nullptr;
 8001af2:	78fb      	ldrb	r3, [r7, #3]
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d101      	bne.n	8001afc <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x16>
 8001af8:	2300      	movs	r3, #0
 8001afa:	e018      	b.n	8001b2e <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b04:	68fa      	ldr	r2, [r7, #12]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d210      	bcs.n	8001b2c <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x46>
      const TfLiteRegistration& registration = registrations_[i];
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	015b      	lsls	r3, r3, #5
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	4413      	add	r3, r2
 8001b12:	3304      	adds	r3, #4
 8001b14:	60bb      	str	r3, [r7, #8]
      if (registration.builtin_code == op) {
 8001b16:	68bb      	ldr	r3, [r7, #8]
 8001b18:	695a      	ldr	r2, [r3, #20]
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d101      	bne.n	8001b24 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x3e>
        return &registration;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	e004      	b.n	8001b2e <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x48>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	3301      	adds	r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	e7e9      	b.n	8001b00 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpENS_15BuiltinOperatorE+0x1a>
    return nullptr;
 8001b2c:	2300      	movs	r3, #0
  }
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3714      	adds	r7, #20
 8001b32:	46bd      	mov	sp, r7
 8001b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b38:	4770      	bx	lr

08001b3a <_ZNSaISt10unique_ptrI14TfLiteDelegatePFvPS0_EEEC1Ev>:
      typedef true_type propagate_on_container_move_assignment;

      typedef true_type is_always_equal;
#endif

      allocator() throw() { }
 8001b3a:	b580      	push	{r7, lr}
 8001b3c:	b082      	sub	sp, #8
 8001b3e:	af00      	add	r7, sp, #0
 8001b40:	6078      	str	r0, [r7, #4]
 8001b42:	6878      	ldr	r0, [r7, #4]
 8001b44:	f000 f805 	bl	8001b52 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <_ZN9__gnu_cxx13new_allocatorISt10unique_ptrI14TfLiteDelegatePFvPS2_EEEC1Ev>:
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2103. propagate_on_container_move_assignment
      typedef std::true_type propagate_on_container_move_assignment;
#endif

      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>:
class MicroMutableOpResolver : public MicroOpResolver {
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	4a05      	ldr	r2, [pc, #20]	; (8001b88 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev+0x20>)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fb49 	bl	8001210 <_ZN6tflite15MicroOpResolverD1Ev>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	08011c3c 	.word	0x08011c3c

08001b8c <_ZN6tflite22MicroMutableOpResolverILj1EED0Ev>:
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffe7 	bl	8001b68 <_ZN6tflite22MicroMutableOpResolverILj1EED1Ev>
 8001b9a:	2138      	movs	r1, #56	; 0x38
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f00a fbf5 	bl	800c38c <_ZdlPvj>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3708      	adds	r7, #8
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc>:
  const TfLiteRegistration* FindOp(const char* op) const override {
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	6039      	str	r1, [r7, #0]
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d218      	bcs.n	8001bf6 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x4a>
      const TfLiteRegistration& registration = registrations_[i];
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	015b      	lsls	r3, r3, #5
 8001bc8:	687a      	ldr	r2, [r7, #4]
 8001bca:	4413      	add	r3, r2
 8001bcc:	3304      	adds	r3, #4
 8001bce:	60bb      	str	r3, [r7, #8]
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001bd0:	68bb      	ldr	r3, [r7, #8]
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	2b20      	cmp	r3, #32
 8001bd6:	d10a      	bne.n	8001bee <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x42>
          (strcmp(registration.custom_name, op) == 0)) {
 8001bd8:	68bb      	ldr	r3, [r7, #8]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	6839      	ldr	r1, [r7, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe faf6 	bl	80001d0 <strcmp>
 8001be4:	4603      	mov	r3, r0
      if ((registration.builtin_code == BuiltinOperator_CUSTOM) &&
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d101      	bne.n	8001bee <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x42>
        return &registration;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	e004      	b.n	8001bf8 <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0x4c>
    for (unsigned int i = 0; i < registrations_len_; ++i) {
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	3301      	adds	r3, #1
 8001bf2:	60fb      	str	r3, [r7, #12]
 8001bf4:	e7e1      	b.n	8001bba <_ZNK6tflite22MicroMutableOpResolverILj1EE6FindOpEPKc+0xe>
    return nullptr;
 8001bf6:	2300      	movs	r3, #0
  }
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE>:
  MicroOpResolver::BuiltinParseFunction GetOpDataParser(
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	460b      	mov	r3, r1
 8001c0a:	70fb      	strb	r3, [r7, #3]
    TFLITE_DCHECK(num_buitin_ops_ <= tOpCount);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d901      	bls.n	8001c18 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x18>
 8001c14:	f00a fc9e 	bl	800c554 <abort>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001c18:	2300      	movs	r3, #0
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c20:	68fa      	ldr	r2, [r7, #12]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d212      	bcs.n	8001c4c <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4c>
      if (builtin_codes_[i] == op) return builtin_parsers_[i];
 8001c26:	687a      	ldr	r2, [r7, #4]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4413      	add	r3, r2
 8001c2c:	3328      	adds	r3, #40	; 0x28
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d106      	bne.n	8001c44 <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x44>
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	330a      	adds	r3, #10
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	4413      	add	r3, r2
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	e004      	b.n	8001c4e <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x4e>
    for (unsigned int i = 0; i < num_buitin_ops_; ++i) {
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	3301      	adds	r3, #1
 8001c48:	60fb      	str	r3, [r7, #12]
 8001c4a:	e7e7      	b.n	8001c1c <_ZNK6tflite22MicroMutableOpResolverILj1EE15GetOpDataParserENS_15BuiltinOperatorE+0x1c>
    return nullptr;
 8001c4c:	2300      	movs	r3, #0
  }
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
	...

08001c58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	b083      	sub	sp, #12
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <HAL_MspInit+0x44>)
 8001c60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c62:	4a0e      	ldr	r2, [pc, #56]	; (8001c9c <HAL_MspInit+0x44>)
 8001c64:	f043 0301 	orr.w	r3, r3, #1
 8001c68:	6613      	str	r3, [r2, #96]	; 0x60
 8001c6a:	4b0c      	ldr	r3, [pc, #48]	; (8001c9c <HAL_MspInit+0x44>)
 8001c6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	607b      	str	r3, [r7, #4]
 8001c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c76:	4b09      	ldr	r3, [pc, #36]	; (8001c9c <HAL_MspInit+0x44>)
 8001c78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c7a:	4a08      	ldr	r2, [pc, #32]	; (8001c9c <HAL_MspInit+0x44>)
 8001c7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c80:	6593      	str	r3, [r2, #88]	; 0x58
 8001c82:	4b06      	ldr	r3, [pc, #24]	; (8001c9c <HAL_MspInit+0x44>)
 8001c84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8a:	603b      	str	r3, [r7, #0]
 8001c8c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b085      	sub	sp, #20
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_TIM_Base_MspInit+0x38>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d10b      	bne.n	8001cca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001cb2:	4b0a      	ldr	r3, [pc, #40]	; (8001cdc <HAL_TIM_Base_MspInit+0x3c>)
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb6:	4a09      	ldr	r2, [pc, #36]	; (8001cdc <HAL_TIM_Base_MspInit+0x3c>)
 8001cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001cbc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <HAL_TIM_Base_MspInit+0x3c>)
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc6:	60fb      	str	r3, [r7, #12]
 8001cc8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001cca:	bf00      	nop
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40014400 	.word	0x40014400
 8001cdc:	40021000 	.word	0x40021000

08001ce0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b08a      	sub	sp, #40	; 0x28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ce8:	f107 0314 	add.w	r3, r7, #20
 8001cec:	2200      	movs	r2, #0
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	605a      	str	r2, [r3, #4]
 8001cf2:	609a      	str	r2, [r3, #8]
 8001cf4:	60da      	str	r2, [r3, #12]
 8001cf6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a17      	ldr	r2, [pc, #92]	; (8001d5c <HAL_UART_MspInit+0x7c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d128      	bne.n	8001d54 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001d02:	4b17      	ldr	r3, [pc, #92]	; (8001d60 <HAL_UART_MspInit+0x80>)
 8001d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d06:	4a16      	ldr	r2, [pc, #88]	; (8001d60 <HAL_UART_MspInit+0x80>)
 8001d08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d0c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d0e:	4b14      	ldr	r3, [pc, #80]	; (8001d60 <HAL_UART_MspInit+0x80>)
 8001d10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	613b      	str	r3, [r7, #16]
 8001d18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	4b11      	ldr	r3, [pc, #68]	; (8001d60 <HAL_UART_MspInit+0x80>)
 8001d1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d1e:	4a10      	ldr	r2, [pc, #64]	; (8001d60 <HAL_UART_MspInit+0x80>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d26:	4b0e      	ldr	r3, [pc, #56]	; (8001d60 <HAL_UART_MspInit+0x80>)
 8001d28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	60fb      	str	r3, [r7, #12]
 8001d30:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001d32:	230c      	movs	r3, #12
 8001d34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d36:	2302      	movs	r3, #2
 8001d38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001d42:	2307      	movs	r3, #7
 8001d44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d46:	f107 0314 	add.w	r3, r7, #20
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d50:	f000 fad4 	bl	80022fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001d54:	bf00      	nop
 8001d56:	3728      	adds	r7, #40	; 0x28
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40004400 	.word	0x40004400
 8001d60:	40021000 	.word	0x40021000

08001d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d68:	e7fe      	b.n	8001d68 <NMI_Handler+0x4>

08001d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6e:	e7fe      	b.n	8001d6e <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	e7fe      	b.n	8001d74 <MemManage_Handler+0x4>

08001d76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7a:	e7fe      	b.n	8001d7a <BusFault_Handler+0x4>

08001d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d80:	e7fe      	b.n	8001d80 <UsageFault_Handler+0x4>

08001d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d82:	b480      	push	{r7}
 8001d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8e:	4770      	bx	lr

08001d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d90:	b480      	push	{r7}
 8001d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9c:	4770      	bx	lr

08001d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da2:	bf00      	nop
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db0:	f000 f97c 	bl	80020ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db4:	bf00      	nop
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
	return 1;
 8001dbc:	2301      	movs	r3, #1
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <_kill>:

int _kill(int pid, int sig)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001dd2:	f00a fbeb 	bl	800c5ac <__errno>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	2316      	movs	r3, #22
 8001dda:	6013      	str	r3, [r2, #0]
	return -1;
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <_exit>:

void _exit (int status)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001df0:	f04f 31ff 	mov.w	r1, #4294967295
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7ff ffe7 	bl	8001dc8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001dfa:	e7fe      	b.n	8001dfa <_exit+0x12>

08001dfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b086      	sub	sp, #24
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e08:	2300      	movs	r3, #0
 8001e0a:	617b      	str	r3, [r7, #20]
 8001e0c:	e00a      	b.n	8001e24 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001e0e:	f3af 8000 	nop.w
 8001e12:	4601      	mov	r1, r0
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	1c5a      	adds	r2, r3, #1
 8001e18:	60ba      	str	r2, [r7, #8]
 8001e1a:	b2ca      	uxtb	r2, r1
 8001e1c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	3301      	adds	r3, #1
 8001e22:	617b      	str	r3, [r7, #20]
 8001e24:	697a      	ldr	r2, [r7, #20]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	429a      	cmp	r2, r3
 8001e2a:	dbf0      	blt.n	8001e0e <_read+0x12>
	}

return len;
 8001e2c:	687b      	ldr	r3, [r7, #4]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b086      	sub	sp, #24
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
 8001e46:	e009      	b.n	8001e5c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	1c5a      	adds	r2, r3, #1
 8001e4c:	60ba      	str	r2, [r7, #8]
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	4618      	mov	r0, r3
 8001e52:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e56:	697b      	ldr	r3, [r7, #20]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	617b      	str	r3, [r7, #20]
 8001e5c:	697a      	ldr	r2, [r7, #20]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	dbf1      	blt.n	8001e48 <_write+0x12>
	}
	return len;
 8001e64:	687b      	ldr	r3, [r7, #4]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3718      	adds	r7, #24
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <_close>:

int _close(int file)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
	return -1;
 8001e76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e86:	b480      	push	{r7}
 8001e88:	b083      	sub	sp, #12
 8001e8a:	af00      	add	r7, sp, #0
 8001e8c:	6078      	str	r0, [r7, #4]
 8001e8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e96:	605a      	str	r2, [r3, #4]
	return 0;
 8001e98:	2300      	movs	r3, #0
}
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr

08001ea6 <_isatty>:

int _isatty(int file)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
	return 1;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr

08001ebc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	60f8      	str	r0, [r7, #12]
 8001ec4:	60b9      	str	r1, [r7, #8]
 8001ec6:	607a      	str	r2, [r7, #4]
	return 0;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
	...

08001ed8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b086      	sub	sp, #24
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee0:	4a14      	ldr	r2, [pc, #80]	; (8001f34 <_sbrk+0x5c>)
 8001ee2:	4b15      	ldr	r3, [pc, #84]	; (8001f38 <_sbrk+0x60>)
 8001ee4:	1ad3      	subs	r3, r2, r3
 8001ee6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001eec:	4b13      	ldr	r3, [pc, #76]	; (8001f3c <_sbrk+0x64>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d102      	bne.n	8001efa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ef4:	4b11      	ldr	r3, [pc, #68]	; (8001f3c <_sbrk+0x64>)
 8001ef6:	4a12      	ldr	r2, [pc, #72]	; (8001f40 <_sbrk+0x68>)
 8001ef8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001efa:	4b10      	ldr	r3, [pc, #64]	; (8001f3c <_sbrk+0x64>)
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	4413      	add	r3, r2
 8001f02:	693a      	ldr	r2, [r7, #16]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d207      	bcs.n	8001f18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f08:	f00a fb50 	bl	800c5ac <__errno>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	230c      	movs	r3, #12
 8001f10:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001f12:	f04f 33ff 	mov.w	r3, #4294967295
 8001f16:	e009      	b.n	8001f2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f18:	4b08      	ldr	r3, [pc, #32]	; (8001f3c <_sbrk+0x64>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f1e:	4b07      	ldr	r3, [pc, #28]	; (8001f3c <_sbrk+0x64>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4413      	add	r3, r2
 8001f26:	4a05      	ldr	r2, [pc, #20]	; (8001f3c <_sbrk+0x64>)
 8001f28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3718      	adds	r7, #24
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	20010000 	.word	0x20010000
 8001f38:	00000400 	.word	0x00000400
 8001f3c:	2000171c 	.word	0x2000171c
 8001f40:	200017c8 	.word	0x200017c8

08001f44 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f48:	4b17      	ldr	r3, [pc, #92]	; (8001fa8 <SystemInit+0x64>)
 8001f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f4e:	4a16      	ldr	r2, [pc, #88]	; (8001fa8 <SystemInit+0x64>)
 8001f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001f58:	4b14      	ldr	r3, [pc, #80]	; (8001fac <SystemInit+0x68>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a13      	ldr	r2, [pc, #76]	; (8001fac <SystemInit+0x68>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001f64:	4b11      	ldr	r3, [pc, #68]	; (8001fac <SystemInit+0x68>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001f6a:	4b10      	ldr	r3, [pc, #64]	; (8001fac <SystemInit+0x68>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a0f      	ldr	r2, [pc, #60]	; (8001fac <SystemInit+0x68>)
 8001f70:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f74:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f78:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f7a:	4b0c      	ldr	r3, [pc, #48]	; (8001fac <SystemInit+0x68>)
 8001f7c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f80:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f82:	4b0a      	ldr	r3, [pc, #40]	; (8001fac <SystemInit+0x68>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a09      	ldr	r2, [pc, #36]	; (8001fac <SystemInit+0x68>)
 8001f88:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f8e:	4b07      	ldr	r3, [pc, #28]	; (8001fac <SystemInit+0x68>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <SystemInit+0x64>)
 8001f96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f9a:	609a      	str	r2, [r3, #8]
#endif
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00
 8001fac:	40021000 	.word	0x40021000

08001fb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001fb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fe8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001fb4:	f7ff ffc6 	bl	8001f44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001fb8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001fba:	e003      	b.n	8001fc4 <LoopCopyDataInit>

08001fbc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001fbc:	4b0b      	ldr	r3, [pc, #44]	; (8001fec <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001fbe:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001fc0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001fc2:	3104      	adds	r1, #4

08001fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001fc4:	480a      	ldr	r0, [pc, #40]	; (8001ff0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001fc6:	4b0b      	ldr	r3, [pc, #44]	; (8001ff4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001fc8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001fca:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001fcc:	d3f6      	bcc.n	8001fbc <CopyDataInit>
	ldr	r2, =_sbss
 8001fce:	4a0a      	ldr	r2, [pc, #40]	; (8001ff8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001fd0:	e002      	b.n	8001fd8 <LoopFillZerobss>

08001fd2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001fd2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001fd4:	f842 3b04 	str.w	r3, [r2], #4

08001fd8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <LoopForever+0x16>)
	cmp	r2, r3
 8001fda:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001fdc:	d3f9      	bcc.n	8001fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fde:	f00a fafd 	bl	800c5dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001fe2:	f7ff f94f 	bl	8001284 <main>

08001fe6 <LoopForever>:

LoopForever:
    b LoopForever
 8001fe6:	e7fe      	b.n	8001fe6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001fe8:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8001fec:	08012bf0 	.word	0x08012bf0
	ldr	r0, =_sdata
 8001ff0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ff4:	20000d34 	.word	0x20000d34
	ldr	r2, =_sbss
 8001ff8:	20000d40 	.word	0x20000d40
	ldr	r3, = _ebss
 8001ffc:	200017c4 	.word	0x200017c4

08002000 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002000:	e7fe      	b.n	8002000 <ADC1_IRQHandler>

08002002 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002008:	2300      	movs	r3, #0
 800200a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800200c:	2003      	movs	r0, #3
 800200e:	f000 f941 	bl	8002294 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002012:	2000      	movs	r0, #0
 8002014:	f000 f80e 	bl	8002034 <HAL_InitTick>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d002      	beq.n	8002024 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800201e:	2301      	movs	r3, #1
 8002020:	71fb      	strb	r3, [r7, #7]
 8002022:	e001      	b.n	8002028 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002024:	f7ff fe18 	bl	8001c58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002028:	79fb      	ldrb	r3, [r7, #7]
}
 800202a:	4618      	mov	r0, r3
 800202c:	3708      	adds	r7, #8
 800202e:	46bd      	mov	sp, r7
 8002030:	bd80      	pop	{r7, pc}
	...

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b084      	sub	sp, #16
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_InitTick+0x6c>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d023      	beq.n	8002090 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002048:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <HAL_InitTick+0x70>)
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	4b14      	ldr	r3, [pc, #80]	; (80020a0 <HAL_InitTick+0x6c>)
 800204e:	781b      	ldrb	r3, [r3, #0]
 8002050:	4619      	mov	r1, r3
 8002052:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002056:	fbb3 f3f1 	udiv	r3, r3, r1
 800205a:	fbb2 f3f3 	udiv	r3, r2, r3
 800205e:	4618      	mov	r0, r3
 8002060:	f000 f93f 	bl	80022e2 <HAL_SYSTICK_Config>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10f      	bne.n	800208a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b0f      	cmp	r3, #15
 800206e:	d809      	bhi.n	8002084 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002070:	2200      	movs	r2, #0
 8002072:	6879      	ldr	r1, [r7, #4]
 8002074:	f04f 30ff 	mov.w	r0, #4294967295
 8002078:	f000 f917 	bl	80022aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_InitTick+0x74>)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6013      	str	r3, [r2, #0]
 8002082:	e007      	b.n	8002094 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
 8002088:	e004      	b.n	8002094 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	e001      	b.n	8002094 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002090:	2301      	movs	r3, #1
 8002092:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000b5c 	.word	0x20000b5c
 80020a4:	20000b54 	.word	0x20000b54
 80020a8:	20000b58 	.word	0x20000b58

080020ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <HAL_IncTick+0x20>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	461a      	mov	r2, r3
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_IncTick+0x24>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4413      	add	r3, r2
 80020bc:	4a04      	ldr	r2, [pc, #16]	; (80020d0 <HAL_IncTick+0x24>)
 80020be:	6013      	str	r3, [r2, #0]
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000b5c 	.word	0x20000b5c
 80020d0:	200017bc 	.word	0x200017bc

080020d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  return uwTick;
 80020d8:	4b03      	ldr	r3, [pc, #12]	; (80020e8 <HAL_GetTick+0x14>)
 80020da:	681b      	ldr	r3, [r3, #0]
}
 80020dc:	4618      	mov	r0, r3
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	200017bc 	.word	0x200017bc

080020ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020f4:	f7ff ffee 	bl	80020d4 <HAL_GetTick>
 80020f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002104:	d005      	beq.n	8002112 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002106:	4b09      	ldr	r3, [pc, #36]	; (800212c <HAL_Delay+0x40>)
 8002108:	781b      	ldrb	r3, [r3, #0]
 800210a:	461a      	mov	r2, r3
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	4413      	add	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002112:	bf00      	nop
 8002114:	f7ff ffde 	bl	80020d4 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	68fa      	ldr	r2, [r7, #12]
 8002120:	429a      	cmp	r2, r3
 8002122:	d8f7      	bhi.n	8002114 <HAL_Delay+0x28>
  {
  }
}
 8002124:	bf00      	nop
 8002126:	3710      	adds	r7, #16
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000b5c 	.word	0x20000b5c

08002130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b480      	push	{r7}
 8002132:	b085      	sub	sp, #20
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f003 0307 	and.w	r3, r3, #7
 800213e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002140:	4b0c      	ldr	r3, [pc, #48]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800214c:	4013      	ands	r3, r2
 800214e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800215c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002162:	4a04      	ldr	r2, [pc, #16]	; (8002174 <__NVIC_SetPriorityGrouping+0x44>)
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	60d3      	str	r3, [r2, #12]
}
 8002168:	bf00      	nop
 800216a:	3714      	adds	r7, #20
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <__NVIC_GetPriorityGrouping+0x18>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	0a1b      	lsrs	r3, r3, #8
 8002182:	f003 0307 	and.w	r3, r3, #7
}
 8002186:	4618      	mov	r0, r3
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr
 8002190:	e000ed00 	.word	0xe000ed00

08002194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002194:	b480      	push	{r7}
 8002196:	b083      	sub	sp, #12
 8002198:	af00      	add	r7, sp, #0
 800219a:	4603      	mov	r3, r0
 800219c:	6039      	str	r1, [r7, #0]
 800219e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	db0a      	blt.n	80021be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	b2da      	uxtb	r2, r3
 80021ac:	490c      	ldr	r1, [pc, #48]	; (80021e0 <__NVIC_SetPriority+0x4c>)
 80021ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	b2d2      	uxtb	r2, r2
 80021b6:	440b      	add	r3, r1
 80021b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021bc:	e00a      	b.n	80021d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	b2da      	uxtb	r2, r3
 80021c2:	4908      	ldr	r1, [pc, #32]	; (80021e4 <__NVIC_SetPriority+0x50>)
 80021c4:	79fb      	ldrb	r3, [r7, #7]
 80021c6:	f003 030f 	and.w	r3, r3, #15
 80021ca:	3b04      	subs	r3, #4
 80021cc:	0112      	lsls	r2, r2, #4
 80021ce:	b2d2      	uxtb	r2, r2
 80021d0:	440b      	add	r3, r1
 80021d2:	761a      	strb	r2, [r3, #24]
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr
 80021e0:	e000e100 	.word	0xe000e100
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b089      	sub	sp, #36	; 0x24
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	60f8      	str	r0, [r7, #12]
 80021f0:	60b9      	str	r1, [r7, #8]
 80021f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f003 0307 	and.w	r3, r3, #7
 80021fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	f1c3 0307 	rsb	r3, r3, #7
 8002202:	2b04      	cmp	r3, #4
 8002204:	bf28      	it	cs
 8002206:	2304      	movcs	r3, #4
 8002208:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	3304      	adds	r3, #4
 800220e:	2b06      	cmp	r3, #6
 8002210:	d902      	bls.n	8002218 <NVIC_EncodePriority+0x30>
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3b03      	subs	r3, #3
 8002216:	e000      	b.n	800221a <NVIC_EncodePriority+0x32>
 8002218:	2300      	movs	r3, #0
 800221a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800221c:	f04f 32ff 	mov.w	r2, #4294967295
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fa02 f303 	lsl.w	r3, r2, r3
 8002226:	43da      	mvns	r2, r3
 8002228:	68bb      	ldr	r3, [r7, #8]
 800222a:	401a      	ands	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002230:	f04f 31ff 	mov.w	r1, #4294967295
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	fa01 f303 	lsl.w	r3, r1, r3
 800223a:	43d9      	mvns	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002240:	4313      	orrs	r3, r2
         );
}
 8002242:	4618      	mov	r0, r3
 8002244:	3724      	adds	r7, #36	; 0x24
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3b01      	subs	r3, #1
 800225c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002260:	d301      	bcc.n	8002266 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002262:	2301      	movs	r3, #1
 8002264:	e00f      	b.n	8002286 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002266:	4a0a      	ldr	r2, [pc, #40]	; (8002290 <SysTick_Config+0x40>)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	3b01      	subs	r3, #1
 800226c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226e:	210f      	movs	r1, #15
 8002270:	f04f 30ff 	mov.w	r0, #4294967295
 8002274:	f7ff ff8e 	bl	8002194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002278:	4b05      	ldr	r3, [pc, #20]	; (8002290 <SysTick_Config+0x40>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227e:	4b04      	ldr	r3, [pc, #16]	; (8002290 <SysTick_Config+0x40>)
 8002280:	2207      	movs	r2, #7
 8002282:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002284:	2300      	movs	r3, #0
}
 8002286:	4618      	mov	r0, r3
 8002288:	3708      	adds	r7, #8
 800228a:	46bd      	mov	sp, r7
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	e000e010 	.word	0xe000e010

08002294 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800229c:	6878      	ldr	r0, [r7, #4]
 800229e:	f7ff ff47 	bl	8002130 <__NVIC_SetPriorityGrouping>
}
 80022a2:	bf00      	nop
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}

080022aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022aa:	b580      	push	{r7, lr}
 80022ac:	b086      	sub	sp, #24
 80022ae:	af00      	add	r7, sp, #0
 80022b0:	4603      	mov	r3, r0
 80022b2:	60b9      	str	r1, [r7, #8]
 80022b4:	607a      	str	r2, [r7, #4]
 80022b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022bc:	f7ff ff5c 	bl	8002178 <__NVIC_GetPriorityGrouping>
 80022c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	6978      	ldr	r0, [r7, #20]
 80022c8:	f7ff ff8e 	bl	80021e8 <NVIC_EncodePriority>
 80022cc:	4602      	mov	r2, r0
 80022ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022d2:	4611      	mov	r1, r2
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff5d 	bl	8002194 <__NVIC_SetPriority>
}
 80022da:	bf00      	nop
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ffb0 	bl	8002250 <SysTick_Config>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b087      	sub	sp, #28
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
 8002304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800230a:	e148      	b.n	800259e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	2101      	movs	r1, #1
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	fa01 f303 	lsl.w	r3, r1, r3
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 813a 	beq.w	8002598 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b01      	cmp	r3, #1
 800232a:	d00b      	beq.n	8002344 <HAL_GPIO_Init+0x48>
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2b02      	cmp	r3, #2
 8002332:	d007      	beq.n	8002344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002338:	2b11      	cmp	r3, #17
 800233a:	d003      	beq.n	8002344 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b12      	cmp	r3, #18
 8002342:	d130      	bne.n	80023a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800234a:	697b      	ldr	r3, [r7, #20]
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	2203      	movs	r2, #3
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	43db      	mvns	r3, r3
 8002356:	693a      	ldr	r2, [r7, #16]
 8002358:	4013      	ands	r3, r2
 800235a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	68da      	ldr	r2, [r3, #12]
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	fa02 f303 	lsl.w	r3, r2, r3
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	693a      	ldr	r2, [r7, #16]
 8002372:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800237a:	2201      	movs	r2, #1
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	43db      	mvns	r3, r3
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	091b      	lsrs	r3, r3, #4
 8002390:	f003 0201 	and.w	r2, r3, #1
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	4313      	orrs	r3, r2
 800239e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	693a      	ldr	r2, [r7, #16]
 80023ba:	4013      	ands	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	689a      	ldr	r2, [r3, #8]
 80023c2:	697b      	ldr	r3, [r7, #20]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	693a      	ldr	r2, [r7, #16]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	693a      	ldr	r2, [r7, #16]
 80023d4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d003      	beq.n	80023e6 <HAL_GPIO_Init+0xea>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b12      	cmp	r3, #18
 80023e4:	d123      	bne.n	800242e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	f003 0307 	and.w	r3, r3, #7
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	220f      	movs	r2, #15
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	693a      	ldr	r2, [r7, #16]
 8002406:	4013      	ands	r3, r2
 8002408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	691a      	ldr	r2, [r3, #16]
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	f003 0307 	and.w	r3, r3, #7
 8002414:	009b      	lsls	r3, r3, #2
 8002416:	fa02 f303 	lsl.w	r3, r2, r3
 800241a:	693a      	ldr	r2, [r7, #16]
 800241c:	4313      	orrs	r3, r2
 800241e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	08da      	lsrs	r2, r3, #3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	3208      	adds	r2, #8
 8002428:	6939      	ldr	r1, [r7, #16]
 800242a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	005b      	lsls	r3, r3, #1
 8002438:	2203      	movs	r2, #3
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	693a      	ldr	r2, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	f003 0203 	and.w	r2, r3, #3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 8094 	beq.w	8002598 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002470:	4b52      	ldr	r3, [pc, #328]	; (80025bc <HAL_GPIO_Init+0x2c0>)
 8002472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002474:	4a51      	ldr	r2, [pc, #324]	; (80025bc <HAL_GPIO_Init+0x2c0>)
 8002476:	f043 0301 	orr.w	r3, r3, #1
 800247a:	6613      	str	r3, [r2, #96]	; 0x60
 800247c:	4b4f      	ldr	r3, [pc, #316]	; (80025bc <HAL_GPIO_Init+0x2c0>)
 800247e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002480:	f003 0301 	and.w	r3, r3, #1
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002488:	4a4d      	ldr	r2, [pc, #308]	; (80025c0 <HAL_GPIO_Init+0x2c4>)
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	089b      	lsrs	r3, r3, #2
 800248e:	3302      	adds	r3, #2
 8002490:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f003 0303 	and.w	r3, r3, #3
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	220f      	movs	r2, #15
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	4013      	ands	r3, r2
 80024aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80024b2:	d00d      	beq.n	80024d0 <HAL_GPIO_Init+0x1d4>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	4a43      	ldr	r2, [pc, #268]	; (80025c4 <HAL_GPIO_Init+0x2c8>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d007      	beq.n	80024cc <HAL_GPIO_Init+0x1d0>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	4a42      	ldr	r2, [pc, #264]	; (80025c8 <HAL_GPIO_Init+0x2cc>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d101      	bne.n	80024c8 <HAL_GPIO_Init+0x1cc>
 80024c4:	2302      	movs	r3, #2
 80024c6:	e004      	b.n	80024d2 <HAL_GPIO_Init+0x1d6>
 80024c8:	2307      	movs	r3, #7
 80024ca:	e002      	b.n	80024d2 <HAL_GPIO_Init+0x1d6>
 80024cc:	2301      	movs	r3, #1
 80024ce:	e000      	b.n	80024d2 <HAL_GPIO_Init+0x1d6>
 80024d0:	2300      	movs	r3, #0
 80024d2:	697a      	ldr	r2, [r7, #20]
 80024d4:	f002 0203 	and.w	r2, r2, #3
 80024d8:	0092      	lsls	r2, r2, #2
 80024da:	4093      	lsls	r3, r2
 80024dc:	693a      	ldr	r2, [r7, #16]
 80024de:	4313      	orrs	r3, r2
 80024e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024e2:	4937      	ldr	r1, [pc, #220]	; (80025c0 <HAL_GPIO_Init+0x2c4>)
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	089b      	lsrs	r3, r3, #2
 80024e8:	3302      	adds	r3, #2
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80024f0:	4b36      	ldr	r3, [pc, #216]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	4013      	ands	r3, r2
 80024fe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800250c:	693a      	ldr	r2, [r7, #16]
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	4313      	orrs	r3, r2
 8002512:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002514:	4a2d      	ldr	r2, [pc, #180]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800251a:	4b2c      	ldr	r3, [pc, #176]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	43db      	mvns	r3, r3
 8002524:	693a      	ldr	r2, [r7, #16]
 8002526:	4013      	ands	r3, r2
 8002528:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8002536:	693a      	ldr	r2, [r7, #16]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	4313      	orrs	r3, r2
 800253c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800253e:	4a23      	ldr	r2, [pc, #140]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002544:	4b21      	ldr	r3, [pc, #132]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	43db      	mvns	r3, r3
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	4013      	ands	r3, r2
 8002552:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002560:	693a      	ldr	r2, [r7, #16]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	4313      	orrs	r3, r2
 8002566:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002568:	4a18      	ldr	r2, [pc, #96]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800256e:	4b17      	ldr	r3, [pc, #92]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	43db      	mvns	r3, r3
 8002578:	693a      	ldr	r2, [r7, #16]
 800257a:	4013      	ands	r3, r2
 800257c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800258a:	693a      	ldr	r2, [r7, #16]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002592:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <HAL_GPIO_Init+0x2d0>)
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	3301      	adds	r3, #1
 800259c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f47f aeaf 	bne.w	800230c <HAL_GPIO_Init+0x10>
  }
}
 80025ae:	bf00      	nop
 80025b0:	371c      	adds	r7, #28
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	40021000 	.word	0x40021000
 80025c0:	40010000 	.word	0x40010000
 80025c4:	48000400 	.word	0x48000400
 80025c8:	48000800 	.word	0x48000800
 80025cc:	40010400 	.word	0x40010400

080025d0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a04      	ldr	r2, [pc, #16]	; (80025ec <HAL_PWR_EnableBkUpAccess+0x1c>)
 80025da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025de:	6013      	str	r3, [r2, #0]
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40007000 	.word	0x40007000

080025f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80025f4:	4b04      	ldr	r3, [pc, #16]	; (8002608 <HAL_PWREx_GetVoltageRange+0x18>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop
 8002608:	40007000 	.word	0x40007000

0800260c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800260c:	b480      	push	{r7}
 800260e:	b085      	sub	sp, #20
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800261a:	d130      	bne.n	800267e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800261c:	4b23      	ldr	r3, [pc, #140]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002624:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002628:	d038      	beq.n	800269c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800262a:	4b20      	ldr	r3, [pc, #128]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002632:	4a1e      	ldr	r2, [pc, #120]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002634:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002638:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800263a:	4b1d      	ldr	r3, [pc, #116]	; (80026b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2232      	movs	r2, #50	; 0x32
 8002640:	fb02 f303 	mul.w	r3, r2, r3
 8002644:	4a1b      	ldr	r2, [pc, #108]	; (80026b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	0c9b      	lsrs	r3, r3, #18
 800264c:	3301      	adds	r3, #1
 800264e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002650:	e002      	b.n	8002658 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3b01      	subs	r3, #1
 8002656:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002658:	4b14      	ldr	r3, [pc, #80]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800265a:	695b      	ldr	r3, [r3, #20]
 800265c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002660:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002664:	d102      	bne.n	800266c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f2      	bne.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800266c:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800266e:	695b      	ldr	r3, [r3, #20]
 8002670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002674:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002678:	d110      	bne.n	800269c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e00f      	b.n	800269e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800267e:	4b0b      	ldr	r3, [pc, #44]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002686:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268a:	d007      	beq.n	800269c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800268c:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002694:	4a05      	ldr	r2, [pc, #20]	; (80026ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002696:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800269a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3714      	adds	r7, #20
 80026a2:	46bd      	mov	sp, r7
 80026a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	40007000 	.word	0x40007000
 80026b0:	20000b54 	.word	0x20000b54
 80026b4:	431bde83 	.word	0x431bde83

080026b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	f000 bc11 	b.w	8002eee <HAL_RCC_OscConfig+0x836>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026cc:	4ba0      	ldr	r3, [pc, #640]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	f003 030c 	and.w	r3, r3, #12
 80026d4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026d6:	4b9e      	ldr	r3, [pc, #632]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	f003 0303 	and.w	r3, r3, #3
 80026de:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 80e4 	beq.w	80028b6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d007      	beq.n	8002704 <HAL_RCC_OscConfig+0x4c>
 80026f4:	69bb      	ldr	r3, [r7, #24]
 80026f6:	2b0c      	cmp	r3, #12
 80026f8:	f040 808b 	bne.w	8002812 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b01      	cmp	r3, #1
 8002700:	f040 8087 	bne.w	8002812 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002704:	4b92      	ldr	r3, [pc, #584]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_OscConfig+0x64>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e3e8      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a1a      	ldr	r2, [r3, #32]
 8002720:	4b8b      	ldr	r3, [pc, #556]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0308 	and.w	r3, r3, #8
 8002728:	2b00      	cmp	r3, #0
 800272a:	d004      	beq.n	8002736 <HAL_RCC_OscConfig+0x7e>
 800272c:	4b88      	ldr	r3, [pc, #544]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002734:	e005      	b.n	8002742 <HAL_RCC_OscConfig+0x8a>
 8002736:	4b86      	ldr	r3, [pc, #536]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002738:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002742:	4293      	cmp	r3, r2
 8002744:	d223      	bcs.n	800278e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
 800274a:	4618      	mov	r0, r3
 800274c:	f000 fd78 	bl	8003240 <RCC_SetFlashLatencyFromMSIRange>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e3c9      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800275a:	4b7d      	ldr	r3, [pc, #500]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a7c      	ldr	r2, [pc, #496]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002760:	f043 0308 	orr.w	r3, r3, #8
 8002764:	6013      	str	r3, [r2, #0]
 8002766:	4b7a      	ldr	r3, [pc, #488]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	4977      	ldr	r1, [pc, #476]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002778:	4b75      	ldr	r3, [pc, #468]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	021b      	lsls	r3, r3, #8
 8002786:	4972      	ldr	r1, [pc, #456]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
 800278c:	e025      	b.n	80027da <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800278e:	4b70      	ldr	r3, [pc, #448]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a6f      	ldr	r2, [pc, #444]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002794:	f043 0308 	orr.w	r3, r3, #8
 8002798:	6013      	str	r3, [r2, #0]
 800279a:	4b6d      	ldr	r3, [pc, #436]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	496a      	ldr	r1, [pc, #424]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80027ac:	4b68      	ldr	r3, [pc, #416]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	021b      	lsls	r3, r3, #8
 80027ba:	4965      	ldr	r1, [pc, #404]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027c0:	69bb      	ldr	r3, [r7, #24]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d109      	bne.n	80027da <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a1b      	ldr	r3, [r3, #32]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 fd38 	bl	8003240 <RCC_SetFlashLatencyFromMSIRange>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e389      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80027da:	f000 fc6f 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 80027de:	4601      	mov	r1, r0
 80027e0:	4b5b      	ldr	r3, [pc, #364]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	091b      	lsrs	r3, r3, #4
 80027e6:	f003 030f 	and.w	r3, r3, #15
 80027ea:	4a5a      	ldr	r2, [pc, #360]	; (8002954 <HAL_RCC_OscConfig+0x29c>)
 80027ec:	5cd3      	ldrb	r3, [r2, r3]
 80027ee:	f003 031f 	and.w	r3, r3, #31
 80027f2:	fa21 f303 	lsr.w	r3, r1, r3
 80027f6:	4a58      	ldr	r2, [pc, #352]	; (8002958 <HAL_RCC_OscConfig+0x2a0>)
 80027f8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80027fa:	4b58      	ldr	r3, [pc, #352]	; (800295c <HAL_RCC_OscConfig+0x2a4>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4618      	mov	r0, r3
 8002800:	f7ff fc18 	bl	8002034 <HAL_InitTick>
 8002804:	4603      	mov	r3, r0
 8002806:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d052      	beq.n	80028b4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800280e:	7bfb      	ldrb	r3, [r7, #15]
 8002810:	e36d      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d032      	beq.n	8002880 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800281a:	4b4d      	ldr	r3, [pc, #308]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a4c      	ldr	r2, [pc, #304]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002826:	f7ff fc55 	bl	80020d4 <HAL_GetTick>
 800282a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800282c:	e008      	b.n	8002840 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800282e:	f7ff fc51 	bl	80020d4 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	693b      	ldr	r3, [r7, #16]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e356      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002840:	4b43      	ldr	r3, [pc, #268]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d0f0      	beq.n	800282e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800284c:	4b40      	ldr	r3, [pc, #256]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a3f      	ldr	r2, [pc, #252]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002852:	f043 0308 	orr.w	r3, r3, #8
 8002856:	6013      	str	r3, [r2, #0]
 8002858:	4b3d      	ldr	r3, [pc, #244]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a1b      	ldr	r3, [r3, #32]
 8002864:	493a      	ldr	r1, [pc, #232]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002866:	4313      	orrs	r3, r2
 8002868:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800286a:	4b39      	ldr	r3, [pc, #228]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800286c:	685b      	ldr	r3, [r3, #4]
 800286e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	69db      	ldr	r3, [r3, #28]
 8002876:	021b      	lsls	r3, r3, #8
 8002878:	4935      	ldr	r1, [pc, #212]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800287a:	4313      	orrs	r3, r2
 800287c:	604b      	str	r3, [r1, #4]
 800287e:	e01a      	b.n	80028b6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002880:	4b33      	ldr	r3, [pc, #204]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a32      	ldr	r2, [pc, #200]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002886:	f023 0301 	bic.w	r3, r3, #1
 800288a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800288c:	f7ff fc22 	bl	80020d4 <HAL_GetTick>
 8002890:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002892:	e008      	b.n	80028a6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002894:	f7ff fc1e 	bl	80020d4 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d901      	bls.n	80028a6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80028a2:	2303      	movs	r3, #3
 80028a4:	e323      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80028a6:	4b2a      	ldr	r3, [pc, #168]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d1f0      	bne.n	8002894 <HAL_RCC_OscConfig+0x1dc>
 80028b2:	e000      	b.n	80028b6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80028b4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d073      	beq.n	80029aa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d005      	beq.n	80028d4 <HAL_RCC_OscConfig+0x21c>
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	2b0c      	cmp	r3, #12
 80028cc:	d10e      	bne.n	80028ec <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d10b      	bne.n	80028ec <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028d4:	4b1e      	ldr	r3, [pc, #120]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d063      	beq.n	80029a8 <HAL_RCC_OscConfig+0x2f0>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d15f      	bne.n	80029a8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e300      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028f4:	d106      	bne.n	8002904 <HAL_RCC_OscConfig+0x24c>
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a15      	ldr	r2, [pc, #84]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 80028fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002900:	6013      	str	r3, [r2, #0]
 8002902:	e01d      	b.n	8002940 <HAL_RCC_OscConfig+0x288>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800290c:	d10c      	bne.n	8002928 <HAL_RCC_OscConfig+0x270>
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002918:	6013      	str	r3, [r2, #0]
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a0c      	ldr	r2, [pc, #48]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002924:	6013      	str	r3, [r2, #0]
 8002926:	e00b      	b.n	8002940 <HAL_RCC_OscConfig+0x288>
 8002928:	4b09      	ldr	r3, [pc, #36]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a08      	ldr	r2, [pc, #32]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800292e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	4b06      	ldr	r3, [pc, #24]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a05      	ldr	r2, [pc, #20]	; (8002950 <HAL_RCC_OscConfig+0x298>)
 800293a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d01b      	beq.n	8002980 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7ff fbc4 	bl	80020d4 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800294e:	e010      	b.n	8002972 <HAL_RCC_OscConfig+0x2ba>
 8002950:	40021000 	.word	0x40021000
 8002954:	08011cd4 	.word	0x08011cd4
 8002958:	20000b54 	.word	0x20000b54
 800295c:	20000b58 	.word	0x20000b58
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002960:	f7ff fbb8 	bl	80020d4 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b64      	cmp	r3, #100	; 0x64
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e2bd      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002972:	4baf      	ldr	r3, [pc, #700]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d0f0      	beq.n	8002960 <HAL_RCC_OscConfig+0x2a8>
 800297e:	e014      	b.n	80029aa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002980:	f7ff fba8 	bl	80020d4 <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002988:	f7ff fba4 	bl	80020d4 <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b64      	cmp	r3, #100	; 0x64
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e2a9      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800299a:	4ba5      	ldr	r3, [pc, #660]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x2d0>
 80029a6:	e000      	b.n	80029aa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d060      	beq.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	2b04      	cmp	r3, #4
 80029ba:	d005      	beq.n	80029c8 <HAL_RCC_OscConfig+0x310>
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	2b0c      	cmp	r3, #12
 80029c0:	d119      	bne.n	80029f6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80029c2:	697b      	ldr	r3, [r7, #20]
 80029c4:	2b02      	cmp	r3, #2
 80029c6:	d116      	bne.n	80029f6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029c8:	4b99      	ldr	r3, [pc, #612]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d005      	beq.n	80029e0 <HAL_RCC_OscConfig+0x328>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e286      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029e0:	4b93      	ldr	r3, [pc, #588]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691b      	ldr	r3, [r3, #16]
 80029ec:	061b      	lsls	r3, r3, #24
 80029ee:	4990      	ldr	r1, [pc, #576]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80029f4:	e040      	b.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d023      	beq.n	8002a46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029fe:	4b8c      	ldr	r3, [pc, #560]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a8b      	ldr	r2, [pc, #556]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002a04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0a:	f7ff fb63 	bl	80020d4 <HAL_GetTick>
 8002a0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a10:	e008      	b.n	8002a24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a12:	f7ff fb5f 	bl	80020d4 <HAL_GetTick>
 8002a16:	4602      	mov	r2, r0
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	1ad3      	subs	r3, r2, r3
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d901      	bls.n	8002a24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002a20:	2303      	movs	r3, #3
 8002a22:	e264      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a24:	4b82      	ldr	r3, [pc, #520]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0f0      	beq.n	8002a12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a30:	4b7f      	ldr	r3, [pc, #508]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	691b      	ldr	r3, [r3, #16]
 8002a3c:	061b      	lsls	r3, r3, #24
 8002a3e:	497c      	ldr	r1, [pc, #496]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002a40:	4313      	orrs	r3, r2
 8002a42:	604b      	str	r3, [r1, #4]
 8002a44:	e018      	b.n	8002a78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a46:	4b7a      	ldr	r3, [pc, #488]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a79      	ldr	r2, [pc, #484]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002a4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a52:	f7ff fb3f 	bl	80020d4 <HAL_GetTick>
 8002a56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a5a:	f7ff fb3b 	bl	80020d4 <HAL_GetTick>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e240      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002a6c:	4b70      	ldr	r3, [pc, #448]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d03c      	beq.n	8002afe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	695b      	ldr	r3, [r3, #20]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d01c      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a8c:	4b68      	ldr	r3, [pc, #416]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a92:	4a67      	ldr	r2, [pc, #412]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7ff fb1a 	bl	80020d4 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002aa2:	e008      	b.n	8002ab6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aa4:	f7ff fb16 	bl	80020d4 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	2b02      	cmp	r3, #2
 8002ab0:	d901      	bls.n	8002ab6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002ab2:	2303      	movs	r3, #3
 8002ab4:	e21b      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ab6:	4b5e      	ldr	r3, [pc, #376]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002abc:	f003 0302 	and.w	r3, r3, #2
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d0ef      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x3ec>
 8002ac4:	e01b      	b.n	8002afe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ac6:	4b5a      	ldr	r3, [pc, #360]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002acc:	4a58      	ldr	r2, [pc, #352]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002ace:	f023 0301 	bic.w	r3, r3, #1
 8002ad2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7ff fafd 	bl	80020d4 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ade:	f7ff faf9 	bl	80020d4 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e1fe      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002af0:	4b4f      	ldr	r3, [pc, #316]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002af2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d1ef      	bne.n	8002ade <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0304 	and.w	r3, r3, #4
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	f000 80a6 	beq.w	8002c58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002b10:	4b47      	ldr	r3, [pc, #284]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002b12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d10d      	bne.n	8002b38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b1c:	4b44      	ldr	r3, [pc, #272]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b20:	4a43      	ldr	r2, [pc, #268]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b26:	6593      	str	r3, [r2, #88]	; 0x58
 8002b28:	4b41      	ldr	r3, [pc, #260]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b34:	2301      	movs	r3, #1
 8002b36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b38:	4b3e      	ldr	r3, [pc, #248]	; (8002c34 <HAL_RCC_OscConfig+0x57c>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d118      	bne.n	8002b76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b44:	4b3b      	ldr	r3, [pc, #236]	; (8002c34 <HAL_RCC_OscConfig+0x57c>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a3a      	ldr	r2, [pc, #232]	; (8002c34 <HAL_RCC_OscConfig+0x57c>)
 8002b4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b50:	f7ff fac0 	bl	80020d4 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b58:	f7ff fabc 	bl	80020d4 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1c1      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6a:	4b32      	ldr	r3, [pc, #200]	; (8002c34 <HAL_RCC_OscConfig+0x57c>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0f0      	beq.n	8002b58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	2b01      	cmp	r3, #1
 8002b7c:	d108      	bne.n	8002b90 <HAL_RCC_OscConfig+0x4d8>
 8002b7e:	4b2c      	ldr	r3, [pc, #176]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002b80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b84:	4a2a      	ldr	r2, [pc, #168]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002b86:	f043 0301 	orr.w	r3, r3, #1
 8002b8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002b8e:	e024      	b.n	8002bda <HAL_RCC_OscConfig+0x522>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2b05      	cmp	r3, #5
 8002b96:	d110      	bne.n	8002bba <HAL_RCC_OscConfig+0x502>
 8002b98:	4b25      	ldr	r3, [pc, #148]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	4a24      	ldr	r2, [pc, #144]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002ba0:	f043 0304 	orr.w	r3, r3, #4
 8002ba4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002ba8:	4b21      	ldr	r3, [pc, #132]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bae:	4a20      	ldr	r2, [pc, #128]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bb8:	e00f      	b.n	8002bda <HAL_RCC_OscConfig+0x522>
 8002bba:	4b1d      	ldr	r3, [pc, #116]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc0:	4a1b      	ldr	r2, [pc, #108]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002bc2:	f023 0301 	bic.w	r3, r3, #1
 8002bc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002bca:	4b19      	ldr	r3, [pc, #100]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002bcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd0:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002bd2:	f023 0304 	bic.w	r3, r3, #4
 8002bd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d016      	beq.n	8002c10 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002be2:	f7ff fa77 	bl	80020d4 <HAL_GetTick>
 8002be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002be8:	e00a      	b.n	8002c00 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bea:	f7ff fa73 	bl	80020d4 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e176      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c00:	4b0b      	ldr	r3, [pc, #44]	; (8002c30 <HAL_RCC_OscConfig+0x578>)
 8002c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0ed      	beq.n	8002bea <HAL_RCC_OscConfig+0x532>
 8002c0e:	e01a      	b.n	8002c46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7ff fa60 	bl	80020d4 <HAL_GetTick>
 8002c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c16:	e00f      	b.n	8002c38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c18:	f7ff fa5c 	bl	80020d4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d906      	bls.n	8002c38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e15f      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
 8002c2e:	bf00      	nop
 8002c30:	40021000 	.word	0x40021000
 8002c34:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002c38:	4baa      	ldr	r3, [pc, #680]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d1e8      	bne.n	8002c18 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c46:	7ffb      	ldrb	r3, [r7, #31]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4c:	4ba5      	ldr	r3, [pc, #660]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	4aa4      	ldr	r2, [pc, #656]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002c52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c56:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0320 	and.w	r3, r3, #32
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d03c      	beq.n	8002cde <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d01c      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002c6c:	4b9d      	ldr	r3, [pc, #628]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c72:	4a9c      	ldr	r2, [pc, #624]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002c74:	f043 0301 	orr.w	r3, r3, #1
 8002c78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c7c:	f7ff fa2a 	bl	80020d4 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002c84:	f7ff fa26 	bl	80020d4 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e12b      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002c96:	4b93      	ldr	r3, [pc, #588]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002c98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002c9c:	f003 0302 	and.w	r3, r3, #2
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d0ef      	beq.n	8002c84 <HAL_RCC_OscConfig+0x5cc>
 8002ca4:	e01b      	b.n	8002cde <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002ca6:	4b8f      	ldr	r3, [pc, #572]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002ca8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cac:	4a8d      	ldr	r2, [pc, #564]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002cae:	f023 0301 	bic.w	r3, r3, #1
 8002cb2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb6:	f7ff fa0d 	bl	80020d4 <HAL_GetTick>
 8002cba:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cbc:	e008      	b.n	8002cd0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002cbe:	f7ff fa09 	bl	80020d4 <HAL_GetTick>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	693b      	ldr	r3, [r7, #16]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	2b02      	cmp	r3, #2
 8002cca:	d901      	bls.n	8002cd0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e10e      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002cd0:	4b84      	ldr	r3, [pc, #528]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002cd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ef      	bne.n	8002cbe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 8102 	beq.w	8002eec <HAL_RCC_OscConfig+0x834>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	f040 80c5 	bne.w	8002e7c <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002cf2:	4b7c      	ldr	r3, [pc, #496]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 0203 	and.w	r2, r3, #3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d12c      	bne.n	8002d60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d06:	697b      	ldr	r3, [r7, #20]
 8002d08:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d10:	3b01      	subs	r3, #1
 8002d12:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d123      	bne.n	8002d60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d22:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d11b      	bne.n	8002d60 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d32:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d113      	bne.n	8002d60 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d42:	085b      	lsrs	r3, r3, #1
 8002d44:	3b01      	subs	r3, #1
 8002d46:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d109      	bne.n	8002d60 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	085b      	lsrs	r3, r3, #1
 8002d58:	3b01      	subs	r3, #1
 8002d5a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d067      	beq.n	8002e30 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	2b0c      	cmp	r3, #12
 8002d64:	d062      	beq.n	8002e2c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d66:	4b5f      	ldr	r3, [pc, #380]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e0bb      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002d76:	4b5b      	ldr	r3, [pc, #364]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a5a      	ldr	r2, [pc, #360]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002d7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d80:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002d82:	f7ff f9a7 	bl	80020d4 <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d8a:	f7ff f9a3 	bl	80020d4 <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e0a8      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d9c:	4b51      	ldr	r3, [pc, #324]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d1f0      	bne.n	8002d8a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002da8:	4b4e      	ldr	r3, [pc, #312]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002daa:	68da      	ldr	r2, [r3, #12]
 8002dac:	4b4e      	ldr	r3, [pc, #312]	; (8002ee8 <HAL_RCC_OscConfig+0x830>)
 8002dae:	4013      	ands	r3, r2
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002db8:	3a01      	subs	r2, #1
 8002dba:	0112      	lsls	r2, r2, #4
 8002dbc:	4311      	orrs	r1, r2
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002dc2:	0212      	lsls	r2, r2, #8
 8002dc4:	4311      	orrs	r1, r2
 8002dc6:	687a      	ldr	r2, [r7, #4]
 8002dc8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002dca:	0852      	lsrs	r2, r2, #1
 8002dcc:	3a01      	subs	r2, #1
 8002dce:	0552      	lsls	r2, r2, #21
 8002dd0:	4311      	orrs	r1, r2
 8002dd2:	687a      	ldr	r2, [r7, #4]
 8002dd4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dd6:	0852      	lsrs	r2, r2, #1
 8002dd8:	3a01      	subs	r2, #1
 8002dda:	0652      	lsls	r2, r2, #25
 8002ddc:	4311      	orrs	r1, r2
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002de2:	06d2      	lsls	r2, r2, #27
 8002de4:	430a      	orrs	r2, r1
 8002de6:	493f      	ldr	r1, [pc, #252]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002dec:	4b3d      	ldr	r3, [pc, #244]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a3c      	ldr	r2, [pc, #240]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002df6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002df8:	4b3a      	ldr	r3, [pc, #232]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	4a39      	ldr	r2, [pc, #228]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002dfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e02:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e04:	f7ff f966 	bl	80020d4 <HAL_GetTick>
 8002e08:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e0a:	e008      	b.n	8002e1e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e0c:	f7ff f962 	bl	80020d4 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e067      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e1e:	4b31      	ldr	r3, [pc, #196]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0f0      	beq.n	8002e0c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e2a:	e05f      	b.n	8002eec <HAL_RCC_OscConfig+0x834>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e05e      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e30:	4b2c      	ldr	r3, [pc, #176]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d157      	bne.n	8002eec <HAL_RCC_OscConfig+0x834>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e3c:	4b29      	ldr	r3, [pc, #164]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a28      	ldr	r2, [pc, #160]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e48:	4b26      	ldr	r3, [pc, #152]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	4a25      	ldr	r2, [pc, #148]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e54:	f7ff f93e 	bl	80020d4 <HAL_GetTick>
 8002e58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e5a:	e008      	b.n	8002e6e <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e5c:	f7ff f93a 	bl	80020d4 <HAL_GetTick>
 8002e60:	4602      	mov	r2, r0
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	1ad3      	subs	r3, r2, r3
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d901      	bls.n	8002e6e <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8002e6a:	2303      	movs	r3, #3
 8002e6c:	e03f      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0f0      	beq.n	8002e5c <HAL_RCC_OscConfig+0x7a4>
 8002e7a:	e037      	b.n	8002eec <HAL_RCC_OscConfig+0x834>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d02d      	beq.n	8002ede <HAL_RCC_OscConfig+0x826>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e82:	4b18      	ldr	r3, [pc, #96]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e8c:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#elif defined(RCC_PLLSAI1_SUPPORT)
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002e8e:	4b15      	ldr	r3, [pc, #84]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <HAL_RCC_OscConfig+0x7ee>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002e9a:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002ea0:	f023 0303 	bic.w	r3, r3, #3
 8002ea4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002ea6:	4b0f      	ldr	r3, [pc, #60]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	4a0e      	ldr	r2, [pc, #56]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002eac:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002eb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002eb4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb6:	f7ff f90d 	bl	80020d4 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x818>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebe:	f7ff f909 	bl	80020d4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x818>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e00e      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed0:	4b04      	ldr	r3, [pc, #16]	; (8002ee4 <HAL_RCC_OscConfig+0x82c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d1f0      	bne.n	8002ebe <HAL_RCC_OscConfig+0x806>
 8002edc:	e006      	b.n	8002eec <HAL_RCC_OscConfig+0x834>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e005      	b.n	8002eee <HAL_RCC_OscConfig+0x836>
 8002ee2:	bf00      	nop
 8002ee4:	40021000 	.word	0x40021000
 8002ee8:	019d808c 	.word	0x019d808c
      }
    }
  }
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop

08002ef8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d101      	bne.n	8002f0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f08:	2301      	movs	r3, #1
 8002f0a:	e0c8      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f0c:	4b66      	ldr	r3, [pc, #408]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0307 	and.w	r3, r3, #7
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d910      	bls.n	8002f3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1a:	4b63      	ldr	r3, [pc, #396]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f023 0207 	bic.w	r2, r3, #7
 8002f22:	4961      	ldr	r1, [pc, #388]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2a:	4b5f      	ldr	r3, [pc, #380]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0307 	and.w	r3, r3, #7
 8002f32:	683a      	ldr	r2, [r7, #0]
 8002f34:	429a      	cmp	r2, r3
 8002f36:	d001      	beq.n	8002f3c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0b0      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d04c      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	2b03      	cmp	r3, #3
 8002f4e:	d107      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002f50:	4b56      	ldr	r3, [pc, #344]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d121      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	e09e      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d107      	bne.n	8002f78 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002f68:	4b50      	ldr	r3, [pc, #320]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d115      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e092      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002f80:	4b4a      	ldr	r3, [pc, #296]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0302 	and.w	r3, r3, #2
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d109      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e086      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f90:	4b46      	ldr	r3, [pc, #280]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d101      	bne.n	8002fa0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	e07e      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002fa0:	4b42      	ldr	r3, [pc, #264]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f023 0203 	bic.w	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	493f      	ldr	r1, [pc, #252]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002fb2:	f7ff f88f 	bl	80020d4 <HAL_GetTick>
 8002fb6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fb8:	e00a      	b.n	8002fd0 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fba:	f7ff f88b 	bl	80020d4 <HAL_GetTick>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d901      	bls.n	8002fd0 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e066      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fd0:	4b36      	ldr	r3, [pc, #216]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002fd2:	689b      	ldr	r3, [r3, #8]
 8002fd4:	f003 020c 	and.w	r2, r3, #12
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d1eb      	bne.n	8002fba <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d008      	beq.n	8003000 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fee:	4b2f      	ldr	r3, [pc, #188]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	492c      	ldr	r1, [pc, #176]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003000:	4b29      	ldr	r3, [pc, #164]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0307 	and.w	r3, r3, #7
 8003008:	683a      	ldr	r2, [r7, #0]
 800300a:	429a      	cmp	r2, r3
 800300c:	d210      	bcs.n	8003030 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300e:	4b26      	ldr	r3, [pc, #152]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 0207 	bic.w	r2, r3, #7
 8003016:	4924      	ldr	r1, [pc, #144]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	4313      	orrs	r3, r2
 800301c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800301e:	4b22      	ldr	r3, [pc, #136]	; (80030a8 <HAL_RCC_ClockConfig+0x1b0>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0307 	and.w	r3, r3, #7
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	429a      	cmp	r2, r3
 800302a:	d001      	beq.n	8003030 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	e036      	b.n	800309e <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f003 0304 	and.w	r3, r3, #4
 8003038:	2b00      	cmp	r3, #0
 800303a:	d008      	beq.n	800304e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800303c:	4b1b      	ldr	r3, [pc, #108]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	4918      	ldr	r1, [pc, #96]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0308 	and.w	r3, r3, #8
 8003056:	2b00      	cmp	r3, #0
 8003058:	d009      	beq.n	800306e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800305a:	4b14      	ldr	r3, [pc, #80]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	691b      	ldr	r3, [r3, #16]
 8003066:	00db      	lsls	r3, r3, #3
 8003068:	4910      	ldr	r1, [pc, #64]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 800306a:	4313      	orrs	r3, r2
 800306c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800306e:	f000 f825 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8003072:	4601      	mov	r1, r0
 8003074:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <HAL_RCC_ClockConfig+0x1b4>)
 8003076:	689b      	ldr	r3, [r3, #8]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 030f 	and.w	r3, r3, #15
 800307e:	4a0c      	ldr	r2, [pc, #48]	; (80030b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003080:	5cd3      	ldrb	r3, [r2, r3]
 8003082:	f003 031f 	and.w	r3, r3, #31
 8003086:	fa21 f303 	lsr.w	r3, r1, r3
 800308a:	4a0a      	ldr	r2, [pc, #40]	; (80030b4 <HAL_RCC_ClockConfig+0x1bc>)
 800308c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800308e:	4b0a      	ldr	r3, [pc, #40]	; (80030b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe ffce 	bl	8002034 <HAL_InitTick>
 8003098:	4603      	mov	r3, r0
 800309a:	72fb      	strb	r3, [r7, #11]

  return status;
 800309c:	7afb      	ldrb	r3, [r7, #11]
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3710      	adds	r7, #16
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40022000 	.word	0x40022000
 80030ac:	40021000 	.word	0x40021000
 80030b0:	08011cd4 	.word	0x08011cd4
 80030b4:	20000b54 	.word	0x20000b54
 80030b8:	20000b58 	.word	0x20000b58

080030bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030bc:	b480      	push	{r7}
 80030be:	b089      	sub	sp, #36	; 0x24
 80030c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	61fb      	str	r3, [r7, #28]
 80030c6:	2300      	movs	r3, #0
 80030c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030ca:	4b3d      	ldr	r3, [pc, #244]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 030c 	and.w	r3, r3, #12
 80030d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030d4:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d005      	beq.n	80030f0 <HAL_RCC_GetSysClockFreq+0x34>
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	2b0c      	cmp	r3, #12
 80030e8:	d121      	bne.n	800312e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d11e      	bne.n	800312e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80030f0:	4b33      	ldr	r3, [pc, #204]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f003 0308 	and.w	r3, r3, #8
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d107      	bne.n	800310c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80030fc:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x104>)
 80030fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003102:	0a1b      	lsrs	r3, r3, #8
 8003104:	f003 030f 	and.w	r3, r3, #15
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	e005      	b.n	8003118 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800310c:	4b2c      	ldr	r3, [pc, #176]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	091b      	lsrs	r3, r3, #4
 8003112:	f003 030f 	and.w	r3, r3, #15
 8003116:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003118:	4a2a      	ldr	r2, [pc, #168]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003120:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10d      	bne.n	8003144 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800312c:	e00a      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	2b04      	cmp	r3, #4
 8003132:	d102      	bne.n	800313a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003134:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003136:	61bb      	str	r3, [r7, #24]
 8003138:	e004      	b.n	8003144 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	2b08      	cmp	r3, #8
 800313e:	d101      	bne.n	8003144 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003140:	4b22      	ldr	r3, [pc, #136]	; (80031cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003142:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	2b0c      	cmp	r3, #12
 8003148:	d133      	bne.n	80031b2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800314a:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	f003 0303 	and.w	r3, r3, #3
 8003152:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	2b02      	cmp	r3, #2
 8003158:	d002      	beq.n	8003160 <HAL_RCC_GetSysClockFreq+0xa4>
 800315a:	2b03      	cmp	r3, #3
 800315c:	d003      	beq.n	8003166 <HAL_RCC_GetSysClockFreq+0xaa>
 800315e:	e005      	b.n	800316c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003160:	4b19      	ldr	r3, [pc, #100]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003162:	617b      	str	r3, [r7, #20]
      break;
 8003164:	e005      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003166:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_RCC_GetSysClockFreq+0x110>)
 8003168:	617b      	str	r3, [r7, #20]
      break;
 800316a:	e002      	b.n	8003172 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	617b      	str	r3, [r7, #20]
      break;
 8003170:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003172:	4b13      	ldr	r3, [pc, #76]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	091b      	lsrs	r3, r3, #4
 8003178:	f003 0307 	and.w	r3, r3, #7
 800317c:	3301      	adds	r3, #1
 800317e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003180:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003182:	68db      	ldr	r3, [r3, #12]
 8003184:	0a1b      	lsrs	r3, r3, #8
 8003186:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800318a:	697a      	ldr	r2, [r7, #20]
 800318c:	fb02 f203 	mul.w	r2, r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	fbb2 f3f3 	udiv	r3, r2, r3
 8003196:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003198:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_RCC_GetSysClockFreq+0x104>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	0e5b      	lsrs	r3, r3, #25
 800319e:	f003 0303 	and.w	r3, r3, #3
 80031a2:	3301      	adds	r3, #1
 80031a4:	005b      	lsls	r3, r3, #1
 80031a6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80031a8:	697a      	ldr	r2, [r7, #20]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80031b2:	69bb      	ldr	r3, [r7, #24]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3724      	adds	r7, #36	; 0x24
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	40021000 	.word	0x40021000
 80031c4:	08011cec 	.word	0x08011cec
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200

080031d0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000b54 	.word	0x20000b54

080031e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80031ec:	f7ff fff0 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 80031f0:	4601      	mov	r1, r0
 80031f2:	4b06      	ldr	r3, [pc, #24]	; (800320c <HAL_RCC_GetPCLK1Freq+0x24>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4a04      	ldr	r2, [pc, #16]	; (8003210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031fe:	5cd3      	ldrb	r3, [r2, r3]
 8003200:	f003 031f 	and.w	r3, r3, #31
 8003204:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003208:	4618      	mov	r0, r3
 800320a:	bd80      	pop	{r7, pc}
 800320c:	40021000 	.word	0x40021000
 8003210:	08011ce4 	.word	0x08011ce4

08003214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003218:	f7ff ffda 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 800321c:	4601      	mov	r1, r0
 800321e:	4b06      	ldr	r3, [pc, #24]	; (8003238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	0adb      	lsrs	r3, r3, #11
 8003224:	f003 0307 	and.w	r3, r3, #7
 8003228:	4a04      	ldr	r2, [pc, #16]	; (800323c <HAL_RCC_GetPCLK2Freq+0x28>)
 800322a:	5cd3      	ldrb	r3, [r2, r3]
 800322c:	f003 031f 	and.w	r3, r3, #31
 8003230:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	40021000 	.word	0x40021000
 800323c:	08011ce4 	.word	0x08011ce4

08003240 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b086      	sub	sp, #24
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003248:	2300      	movs	r3, #0
 800324a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800324c:	4b2a      	ldr	r3, [pc, #168]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800324e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003258:	f7ff f9ca 	bl	80025f0 <HAL_PWREx_GetVoltageRange>
 800325c:	6178      	str	r0, [r7, #20]
 800325e:	e014      	b.n	800328a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003260:	4b25      	ldr	r3, [pc, #148]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003264:	4a24      	ldr	r2, [pc, #144]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	6593      	str	r3, [r2, #88]	; 0x58
 800326c:	4b22      	ldr	r3, [pc, #136]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800326e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003278:	f7ff f9ba 	bl	80025f0 <HAL_PWREx_GetVoltageRange>
 800327c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800327e:	4b1e      	ldr	r3, [pc, #120]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	4a1d      	ldr	r2, [pc, #116]	; (80032f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003284:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003288:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003290:	d10b      	bne.n	80032aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2b80      	cmp	r3, #128	; 0x80
 8003296:	d919      	bls.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2ba0      	cmp	r3, #160	; 0xa0
 800329c:	d902      	bls.n	80032a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800329e:	2302      	movs	r3, #2
 80032a0:	613b      	str	r3, [r7, #16]
 80032a2:	e013      	b.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032a4:	2301      	movs	r3, #1
 80032a6:	613b      	str	r3, [r7, #16]
 80032a8:	e010      	b.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2b80      	cmp	r3, #128	; 0x80
 80032ae:	d902      	bls.n	80032b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80032b0:	2303      	movs	r3, #3
 80032b2:	613b      	str	r3, [r7, #16]
 80032b4:	e00a      	b.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2b80      	cmp	r3, #128	; 0x80
 80032ba:	d102      	bne.n	80032c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80032bc:	2302      	movs	r3, #2
 80032be:	613b      	str	r3, [r7, #16]
 80032c0:	e004      	b.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2b70      	cmp	r3, #112	; 0x70
 80032c6:	d101      	bne.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80032c8:	2301      	movs	r3, #1
 80032ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80032cc:	4b0b      	ldr	r3, [pc, #44]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 0207 	bic.w	r2, r3, #7
 80032d4:	4909      	ldr	r1, [pc, #36]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4313      	orrs	r3, r2
 80032da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80032dc:	4b07      	ldr	r3, [pc, #28]	; (80032fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0307 	and.w	r3, r3, #7
 80032e4:	693a      	ldr	r2, [r7, #16]
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d001      	beq.n	80032ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e000      	b.n	80032f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80032ee:	2300      	movs	r3, #0
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3718      	adds	r7, #24
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	40021000 	.word	0x40021000
 80032fc:	40022000 	.word	0x40022000

08003300 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003308:	2300      	movs	r3, #0
 800330a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800330c:	2300      	movs	r3, #0
 800330e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003318:	2b00      	cmp	r3, #0
 800331a:	d02f      	beq.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x7c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003320:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003324:	d005      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8003326:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800332a:	d015      	beq.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0x58>
 800332c:	2b00      	cmp	r3, #0
 800332e:	d007      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8003330:	e00f      	b.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x52>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8003332:	4bac      	ldr	r3, [pc, #688]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	4aab      	ldr	r2, [pc, #684]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003338:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800333c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800333e:	e00c      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x5a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3304      	adds	r3, #4
 8003344:	2100      	movs	r1, #0
 8003346:	4618      	mov	r0, r3
 8003348:	f000 f9dc 	bl	8003704 <RCCEx_PLLSAI1_Config>
 800334c:	4603      	mov	r3, r0
 800334e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003350:	e003      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x5a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	74fb      	strb	r3, [r7, #19]
      break;
 8003356:	e000      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x5a>
      break;
 8003358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800335a:	7cfb      	ldrb	r3, [r7, #19]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10b      	bne.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003360:	4ba0      	ldr	r3, [pc, #640]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003366:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800336e:	499d      	ldr	r1, [pc, #628]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003370:	4313      	orrs	r3, r2
 8003372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8003376:	e001      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003378:	7cfb      	ldrb	r3, [r7, #19]
 800337a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 8099 	beq.w	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    FlagStatus       pwrclkchanged = RESET;
 800338a:	2300      	movs	r3, #0
 800338c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800338e:	4b95      	ldr	r3, [pc, #596]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003390:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003392:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800339a:	2301      	movs	r3, #1
 800339c:	e000      	b.n	80033a0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800339e:	2300      	movs	r3, #0
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d00d      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033a4:	4b8f      	ldr	r3, [pc, #572]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a8:	4a8e      	ldr	r2, [pc, #568]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033ae:	6593      	str	r3, [r2, #88]	; 0x58
 80033b0:	4b8c      	ldr	r3, [pc, #560]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	60bb      	str	r3, [r7, #8]
 80033ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033bc:	2301      	movs	r3, #1
 80033be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80033c0:	4b89      	ldr	r3, [pc, #548]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a88      	ldr	r2, [pc, #544]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80033cc:	f7fe fe82 	bl	80020d4 <HAL_GetTick>
 80033d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033d2:	e009      	b.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033d4:	f7fe fe7e 	bl	80020d4 <HAL_GetTick>
 80033d8:	4602      	mov	r2, r0
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1ad3      	subs	r3, r2, r3
 80033de:	2b02      	cmp	r3, #2
 80033e0:	d902      	bls.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        ret = HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	74fb      	strb	r3, [r7, #19]
        break;
 80033e6:	e005      	b.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80033e8:	4b7f      	ldr	r3, [pc, #508]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0ef      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      }
    }

    if(ret == HAL_OK)
 80033f4:	7cfb      	ldrb	r3, [r7, #19]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d155      	bne.n	80034a6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80033fa:	4b7a      	ldr	r3, [pc, #488]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80033fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003400:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003404:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d01e      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	429a      	cmp	r2, r3
 8003414:	d019      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x14a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003416:	4b73      	ldr	r3, [pc, #460]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800341c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003420:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003422:	4b70      	ldr	r3, [pc, #448]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003428:	4a6e      	ldr	r2, [pc, #440]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800342a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800342e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003432:	4b6c      	ldr	r3, [pc, #432]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003434:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003438:	4a6a      	ldr	r2, [pc, #424]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800343a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800343e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003442:	4a68      	ldr	r2, [pc, #416]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	f003 0301 	and.w	r3, r3, #1
 8003450:	2b00      	cmp	r3, #0
 8003452:	d016      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x182>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe fe3e 	bl	80020d4 <HAL_GetTick>
 8003458:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800345a:	e00b      	b.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x174>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800345c:	f7fe fe3a 	bl	80020d4 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	f241 3288 	movw	r2, #5000	; 0x1388
 800346a:	4293      	cmp	r3, r2
 800346c:	d902      	bls.n	8003474 <HAL_RCCEx_PeriphCLKConfig+0x174>
          {
            ret = HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	74fb      	strb	r3, [r7, #19]
            break;
 8003472:	e006      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x182>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003474:	4b5b      	ldr	r3, [pc, #364]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d0ec      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x15c>
          }
        }
      }

      if(ret == HAL_OK)
 8003482:	7cfb      	ldrb	r3, [r7, #19]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10b      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003488:	4b56      	ldr	r3, [pc, #344]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800348a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800348e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003496:	4953      	ldr	r1, [pc, #332]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003498:	4313      	orrs	r3, r2
 800349a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800349e:	e004      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80034a0:	7cfb      	ldrb	r3, [r7, #19]
 80034a2:	74bb      	strb	r3, [r7, #18]
 80034a4:	e001      	b.n	80034aa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034a6:	7cfb      	ldrb	r3, [r7, #19]
 80034a8:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80034aa:	7c7b      	ldrb	r3, [r7, #17]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d105      	bne.n	80034bc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b0:	4b4c      	ldr	r3, [pc, #304]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034b4:	4a4b      	ldr	r2, [pc, #300]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0301 	and.w	r3, r3, #1
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034c8:	4b46      	ldr	r3, [pc, #280]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ce:	f023 0203 	bic.w	r2, r3, #3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4943      	ldr	r1, [pc, #268]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00a      	beq.n	8003500 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034ea:	4b3e      	ldr	r3, [pc, #248]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f0:	f023 020c 	bic.w	r2, r3, #12
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	493a      	ldr	r1, [pc, #232]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0320 	and.w	r3, r3, #32
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800350c:	4b35      	ldr	r3, [pc, #212]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800350e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003512:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351a:	4932      	ldr	r1, [pc, #200]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800352e:	4b2d      	ldr	r3, [pc, #180]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003534:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800353c:	4929      	ldr	r1, [pc, #164]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 800353e:	4313      	orrs	r3, r2
 8003540:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x266>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003550:	4b24      	ldr	r3, [pc, #144]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003552:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003556:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800355e:	4921      	ldr	r1, [pc, #132]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003560:	4313      	orrs	r3, r2
 8003562:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003572:	4b1c      	ldr	r3, [pc, #112]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003574:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003578:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003580:	4918      	ldr	r1, [pc, #96]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003582:	4313      	orrs	r3, r2
 8003584:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x2aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003594:	4b13      	ldr	r3, [pc, #76]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 8003596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800359a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	4910      	ldr	r1, [pc, #64]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d02c      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035b6:	4b0b      	ldr	r3, [pc, #44]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035bc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	4907      	ldr	r1, [pc, #28]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035d4:	d10a      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d6:	4b03      	ldr	r3, [pc, #12]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	4a02      	ldr	r2, [pc, #8]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>)
 80035dc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035e0:	60d3      	str	r3, [r2, #12]
 80035e2:	e015      	b.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80035e4:	40021000 	.word	0x40021000
 80035e8:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035f4:	d10c      	bne.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x310>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	3304      	adds	r3, #4
 80035fa:	2101      	movs	r1, #1
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 f881 	bl	8003704 <RCCEx_PLLSAI1_Config>
 8003602:	4603      	mov	r3, r0
 8003604:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003606:	7cfb      	ldrb	r3, [r7, #19]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d001      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x310>
        {
          /* set overall return value */
          status = ret;
 800360c:	7cfb      	ldrb	r3, [r7, #19]
 800360e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003618:	2b00      	cmp	r3, #0
 800361a:	d028      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800361c:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800361e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003622:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362a:	492d      	ldr	r1, [pc, #180]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800362c:	4313      	orrs	r3, r2
 800362e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003636:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800363a:	d106      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800363c:	4b28      	ldr	r3, [pc, #160]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4a27      	ldr	r2, [pc, #156]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003646:	60d3      	str	r3, [r2, #12]
 8003648:	e011      	b.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003652:	d10c      	bne.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x36e>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	3304      	adds	r3, #4
 8003658:	2101      	movs	r1, #1
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f852 	bl	8003704 <RCCEx_PLLSAI1_Config>
 8003660:	4603      	mov	r3, r0
 8003662:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003664:	7cfb      	ldrb	r3, [r7, #19]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x36e>
      {
        /* set overall return value */
        status = ret;
 800366a:	7cfb      	ldrb	r3, [r7, #19]
 800366c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d01c      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800367a:	4b19      	ldr	r3, [pc, #100]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003680:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003688:	4915      	ldr	r1, [pc, #84]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800368a:	4313      	orrs	r3, r2
 800368c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003698:	d10c      	bne.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	3304      	adds	r3, #4
 800369e:	2102      	movs	r1, #2
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 f82f 	bl	8003704 <RCCEx_PLLSAI1_Config>
 80036a6:	4603      	mov	r3, r0
 80036a8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036aa:	7cfb      	ldrb	r3, [r7, #19]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      {
        /* set overall return value */
        status = ret;
 80036b0:	7cfb      	ldrb	r3, [r7, #19]
 80036b2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <HAL_RCCEx_PeriphCLKConfig+0x3d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ce:	4904      	ldr	r1, [pc, #16]	; (80036e0 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80036d0:	4313      	orrs	r3, r2
 80036d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80036d6:	7cbb      	ldrb	r3, [r7, #18]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	40021000 	.word	0x40021000

080036e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80036e8:	4b05      	ldr	r3, [pc, #20]	; (8003700 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a04      	ldr	r2, [pc, #16]	; (8003700 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80036ee:	f043 0304 	orr.w	r3, r3, #4
 80036f2:	6013      	str	r3, [r2, #0]
}
 80036f4:	bf00      	nop
 80036f6:	46bd      	mov	sp, r7
 80036f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fc:	4770      	bx	lr
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000

08003704 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800370e:	2300      	movs	r3, #0
 8003710:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003712:	4b73      	ldr	r3, [pc, #460]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0303 	and.w	r3, r3, #3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d018      	beq.n	8003750 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800371e:	4b70      	ldr	r3, [pc, #448]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f003 0203 	and.w	r2, r3, #3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	429a      	cmp	r2, r3
 800372c:	d10d      	bne.n	800374a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
       ||
 8003732:	2b00      	cmp	r3, #0
 8003734:	d009      	beq.n	800374a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003736:	4b6a      	ldr	r3, [pc, #424]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	091b      	lsrs	r3, r3, #4
 800373c:	f003 0307 	and.w	r3, r3, #7
 8003740:	1c5a      	adds	r2, r3, #1
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
       ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d044      	beq.n	80037d4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800374a:	2301      	movs	r3, #1
 800374c:	73fb      	strb	r3, [r7, #15]
 800374e:	e041      	b.n	80037d4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2b02      	cmp	r3, #2
 8003756:	d00c      	beq.n	8003772 <RCCEx_PLLSAI1_Config+0x6e>
 8003758:	2b03      	cmp	r3, #3
 800375a:	d013      	beq.n	8003784 <RCCEx_PLLSAI1_Config+0x80>
 800375c:	2b01      	cmp	r3, #1
 800375e:	d120      	bne.n	80037a2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003760:	4b5f      	ldr	r3, [pc, #380]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d11d      	bne.n	80037a8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800376c:	2301      	movs	r3, #1
 800376e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003770:	e01a      	b.n	80037a8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003772:	4b5b      	ldr	r3, [pc, #364]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800377a:	2b00      	cmp	r3, #0
 800377c:	d116      	bne.n	80037ac <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003782:	e013      	b.n	80037ac <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003784:	4b56      	ldr	r3, [pc, #344]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800378c:	2b00      	cmp	r3, #0
 800378e:	d10f      	bne.n	80037b0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003790:	4b53      	ldr	r3, [pc, #332]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003798:	2b00      	cmp	r3, #0
 800379a:	d109      	bne.n	80037b0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037a0:	e006      	b.n	80037b0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	73fb      	strb	r3, [r7, #15]
      break;
 80037a6:	e004      	b.n	80037b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037a8:	bf00      	nop
 80037aa:	e002      	b.n	80037b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037ac:	bf00      	nop
 80037ae:	e000      	b.n	80037b2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 80037b0:	bf00      	nop
    }

    if(status == HAL_OK)
 80037b2:	7bfb      	ldrb	r3, [r7, #15]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d10d      	bne.n	80037d4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80037b8:	4b49      	ldr	r3, [pc, #292]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037ba:	68db      	ldr	r3, [r3, #12]
 80037bc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6819      	ldr	r1, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	3b01      	subs	r3, #1
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	430b      	orrs	r3, r1
 80037ce:	4944      	ldr	r1, [pc, #272]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037d0:	4313      	orrs	r3, r2
 80037d2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d17c      	bne.n	80038d4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80037da:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a40      	ldr	r2, [pc, #256]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80037e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80037e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037e6:	f7fe fc75 	bl	80020d4 <HAL_GetTick>
 80037ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80037ec:	e009      	b.n	8003802 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037ee:	f7fe fc71 	bl	80020d4 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d902      	bls.n	8003802 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	73fb      	strb	r3, [r7, #15]
        break;
 8003800:	e005      	b.n	800380e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003802:	4b37      	ldr	r3, [pc, #220]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1ef      	bne.n	80037ee <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800380e:	7bfb      	ldrb	r3, [r7, #15]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d15f      	bne.n	80038d4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d110      	bne.n	800383c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800381a:	4b31      	ldr	r3, [pc, #196]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800381c:	691b      	ldr	r3, [r3, #16]
 800381e:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003822:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6892      	ldr	r2, [r2, #8]
 800382a:	0211      	lsls	r1, r2, #8
 800382c:	687a      	ldr	r2, [r7, #4]
 800382e:	68d2      	ldr	r2, [r2, #12]
 8003830:	06d2      	lsls	r2, r2, #27
 8003832:	430a      	orrs	r2, r1
 8003834:	492a      	ldr	r1, [pc, #168]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003836:	4313      	orrs	r3, r2
 8003838:	610b      	str	r3, [r1, #16]
 800383a:	e027      	b.n	800388c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d112      	bne.n	8003868 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003842:	4b27      	ldr	r3, [pc, #156]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800384a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	6892      	ldr	r2, [r2, #8]
 8003852:	0211      	lsls	r1, r2, #8
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6912      	ldr	r2, [r2, #16]
 8003858:	0852      	lsrs	r2, r2, #1
 800385a:	3a01      	subs	r2, #1
 800385c:	0552      	lsls	r2, r2, #21
 800385e:	430a      	orrs	r2, r1
 8003860:	491f      	ldr	r1, [pc, #124]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003862:	4313      	orrs	r3, r2
 8003864:	610b      	str	r3, [r1, #16]
 8003866:	e011      	b.n	800388c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003868:	4b1d      	ldr	r3, [pc, #116]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003870:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6892      	ldr	r2, [r2, #8]
 8003878:	0211      	lsls	r1, r2, #8
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	6952      	ldr	r2, [r2, #20]
 800387e:	0852      	lsrs	r2, r2, #1
 8003880:	3a01      	subs	r2, #1
 8003882:	0652      	lsls	r2, r2, #25
 8003884:	430a      	orrs	r2, r1
 8003886:	4916      	ldr	r1, [pc, #88]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003888:	4313      	orrs	r3, r2
 800388a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003892:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003896:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003898:	f7fe fc1c 	bl	80020d4 <HAL_GetTick>
 800389c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800389e:	e009      	b.n	80038b4 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038a0:	f7fe fc18 	bl	80020d4 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d902      	bls.n	80038b4 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 80038ae:	2303      	movs	r3, #3
 80038b0:	73fb      	strb	r3, [r7, #15]
          break;
 80038b2:	e005      	b.n	80038c0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038b4:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0ef      	beq.n	80038a0 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 80038c0:	7bfb      	ldrb	r3, [r7, #15]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80038c6:	4b06      	ldr	r3, [pc, #24]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038c8:	691a      	ldr	r2, [r3, #16]
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	4904      	ldr	r1, [pc, #16]	; (80038e0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80038d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	40021000 	.word	0x40021000

080038e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d101      	bne.n	80038f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	e049      	b.n	800398a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d106      	bne.n	8003910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7fe f9c8 	bl	8001ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2202      	movs	r2, #2
 8003914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3304      	adds	r3, #4
 8003920:	4619      	mov	r1, r3
 8003922:	4610      	mov	r0, r2
 8003924:	f000 f882 	bl	8003a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3708      	adds	r7, #8
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d001      	beq.n	80039ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e033      	b.n	8003a14 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2202      	movs	r2, #2
 80039b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a19      	ldr	r2, [pc, #100]	; (8003a20 <HAL_TIM_Base_Start+0x8c>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d009      	beq.n	80039d2 <HAL_TIM_Base_Start+0x3e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039c6:	d004      	beq.n	80039d2 <HAL_TIM_Base_Start+0x3e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a15      	ldr	r2, [pc, #84]	; (8003a24 <HAL_TIM_Base_Start+0x90>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d115      	bne.n	80039fe <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689a      	ldr	r2, [r3, #8]
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_TIM_Base_Start+0x94>)
 80039da:	4013      	ands	r3, r2
 80039dc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b06      	cmp	r3, #6
 80039e2:	d015      	beq.n	8003a10 <HAL_TIM_Base_Start+0x7c>
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039ea:	d011      	beq.n	8003a10 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039fc:	e008      	b.n	8003a10 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	681a      	ldr	r2, [r3, #0]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f042 0201 	orr.w	r2, r2, #1
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	e000      	b.n	8003a12 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a10:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3714      	adds	r7, #20
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr
 8003a20:	40012c00 	.word	0x40012c00
 8003a24:	40014000 	.word	0x40014000
 8003a28:	00010007 	.word	0x00010007

08003a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a2a      	ldr	r2, [pc, #168]	; (8003ae8 <TIM_Base_SetConfig+0xbc>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_Base_SetConfig+0x20>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a4a:	d108      	bne.n	8003a5e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a21      	ldr	r2, [pc, #132]	; (8003ae8 <TIM_Base_SetConfig+0xbc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00b      	beq.n	8003a7e <TIM_Base_SetConfig+0x52>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a6c:	d007      	beq.n	8003a7e <TIM_Base_SetConfig+0x52>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a1e      	ldr	r2, [pc, #120]	; (8003aec <TIM_Base_SetConfig+0xc0>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_Base_SetConfig+0x52>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a1d      	ldr	r2, [pc, #116]	; (8003af0 <TIM_Base_SetConfig+0xc4>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d108      	bne.n	8003a90 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	68fa      	ldr	r2, [r7, #12]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	695b      	ldr	r3, [r3, #20]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a0c      	ldr	r2, [pc, #48]	; (8003ae8 <TIM_Base_SetConfig+0xbc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d007      	beq.n	8003acc <TIM_Base_SetConfig+0xa0>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a0b      	ldr	r2, [pc, #44]	; (8003aec <TIM_Base_SetConfig+0xc0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_Base_SetConfig+0xa0>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a0a      	ldr	r2, [pc, #40]	; (8003af0 <TIM_Base_SetConfig+0xc4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d103      	bne.n	8003ad4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	691a      	ldr	r2, [r3, #16]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	615a      	str	r2, [r3, #20]
}
 8003ada:	bf00      	nop
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	40012c00 	.word	0x40012c00
 8003aec:	40014000 	.word	0x40014000
 8003af0:	40014400 	.word	0x40014400

08003af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d101      	bne.n	8003b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e040      	b.n	8003b88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d106      	bne.n	8003b1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	f7fe f8e2 	bl	8001ce0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2224      	movs	r2, #36	; 0x24
 8003b20:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f8c0 	bl	8003cb8 <UART_SetConfig>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d101      	bne.n	8003b42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e022      	b.n	8003b88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d002      	beq.n	8003b50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fac4 	bl	80040d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685a      	ldr	r2, [r3, #4]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f042 0201 	orr.w	r2, r2, #1
 8003b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fb4b 	bl	800421c <UART_CheckIdleState>
 8003b86:	4603      	mov	r3, r0
}
 8003b88:	4618      	mov	r0, r3
 8003b8a:	3708      	adds	r7, #8
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}

08003b90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b08a      	sub	sp, #40	; 0x28
 8003b94:	af02      	add	r7, sp, #8
 8003b96:	60f8      	str	r0, [r7, #12]
 8003b98:	60b9      	str	r1, [r7, #8]
 8003b9a:	603b      	str	r3, [r7, #0]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ba4:	2b20      	cmp	r3, #32
 8003ba6:	f040 8081 	bne.w	8003cac <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d002      	beq.n	8003bb6 <HAL_UART_Transmit+0x26>
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d101      	bne.n	8003bba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e079      	b.n	8003cae <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003bc0:	2b01      	cmp	r3, #1
 8003bc2:	d101      	bne.n	8003bc8 <HAL_UART_Transmit+0x38>
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	e072      	b.n	8003cae <HAL_UART_Transmit+0x11e>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2221      	movs	r2, #33	; 0x21
 8003bda:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003bdc:	f7fe fa7a 	bl	80020d4 <HAL_GetTick>
 8003be0:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	88fa      	ldrh	r2, [r7, #6]
 8003be6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	88fa      	ldrh	r2, [r7, #6]
 8003bee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bfa:	d108      	bne.n	8003c0e <HAL_UART_Transmit+0x7e>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d104      	bne.n	8003c0e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003c04:	2300      	movs	r3, #0
 8003c06:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	61bb      	str	r3, [r7, #24]
 8003c0c:	e003      	b.n	8003c16 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8003c1e:	e02d      	b.n	8003c7c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	9300      	str	r3, [sp, #0]
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	2200      	movs	r2, #0
 8003c28:	2180      	movs	r1, #128	; 0x80
 8003c2a:	68f8      	ldr	r0, [r7, #12]
 8003c2c:	f000 fb3b 	bl	80042a6 <UART_WaitOnFlagUntilTimeout>
 8003c30:	4603      	mov	r3, r0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e039      	b.n	8003cae <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d10b      	bne.n	8003c58 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	881a      	ldrh	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003c4c:	b292      	uxth	r2, r2
 8003c4e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	3302      	adds	r3, #2
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e008      	b.n	8003c6a <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	781a      	ldrb	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	b292      	uxth	r2, r2
 8003c62:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	3301      	adds	r3, #1
 8003c68:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003c82:	b29b      	uxth	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d1cb      	bne.n	8003c20 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	9300      	str	r3, [sp, #0]
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	2140      	movs	r1, #64	; 0x40
 8003c92:	68f8      	ldr	r0, [r7, #12]
 8003c94:	f000 fb07 	bl	80042a6 <UART_WaitOnFlagUntilTimeout>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e005      	b.n	8003cae <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	e000      	b.n	8003cae <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8003cac:	2302      	movs	r3, #2
  }
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3720      	adds	r7, #32
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
	...

08003cb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cb8:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003cbc:	b088      	sub	sp, #32
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	689a      	ldr	r2, [r3, #8]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	431a      	orrs	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	431a      	orrs	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	69db      	ldr	r3, [r3, #28]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4bb0      	ldr	r3, [pc, #704]	; (8003fa8 <UART_SetConfig+0x2f0>)
 8003ce6:	4013      	ands	r3, r2
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	6812      	ldr	r2, [r2, #0]
 8003cec:	69f9      	ldr	r1, [r7, #28]
 8003cee:	430b      	orrs	r3, r1
 8003cf0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	4aa6      	ldr	r2, [pc, #664]	; (8003fac <UART_SetConfig+0x2f4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d004      	beq.n	8003d22 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	69fa      	ldr	r2, [r7, #28]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69fa      	ldr	r2, [r7, #28]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a9d      	ldr	r2, [pc, #628]	; (8003fb0 <UART_SetConfig+0x2f8>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d121      	bne.n	8003d84 <UART_SetConfig+0xcc>
 8003d40:	4b9c      	ldr	r3, [pc, #624]	; (8003fb4 <UART_SetConfig+0x2fc>)
 8003d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d46:	f003 0303 	and.w	r3, r3, #3
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d816      	bhi.n	8003d7c <UART_SetConfig+0xc4>
 8003d4e:	a201      	add	r2, pc, #4	; (adr r2, 8003d54 <UART_SetConfig+0x9c>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003d65 	.word	0x08003d65
 8003d58:	08003d71 	.word	0x08003d71
 8003d5c:	08003d6b 	.word	0x08003d6b
 8003d60:	08003d77 	.word	0x08003d77
 8003d64:	2301      	movs	r3, #1
 8003d66:	76fb      	strb	r3, [r7, #27]
 8003d68:	e072      	b.n	8003e50 <UART_SetConfig+0x198>
 8003d6a:	2302      	movs	r3, #2
 8003d6c:	76fb      	strb	r3, [r7, #27]
 8003d6e:	e06f      	b.n	8003e50 <UART_SetConfig+0x198>
 8003d70:	2304      	movs	r3, #4
 8003d72:	76fb      	strb	r3, [r7, #27]
 8003d74:	e06c      	b.n	8003e50 <UART_SetConfig+0x198>
 8003d76:	2308      	movs	r3, #8
 8003d78:	76fb      	strb	r3, [r7, #27]
 8003d7a:	e069      	b.n	8003e50 <UART_SetConfig+0x198>
 8003d7c:	2310      	movs	r3, #16
 8003d7e:	76fb      	strb	r3, [r7, #27]
 8003d80:	bf00      	nop
 8003d82:	e065      	b.n	8003e50 <UART_SetConfig+0x198>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a8b      	ldr	r2, [pc, #556]	; (8003fb8 <UART_SetConfig+0x300>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d134      	bne.n	8003df8 <UART_SetConfig+0x140>
 8003d8e:	4b89      	ldr	r3, [pc, #548]	; (8003fb4 <UART_SetConfig+0x2fc>)
 8003d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d94:	f003 030c 	and.w	r3, r3, #12
 8003d98:	2b0c      	cmp	r3, #12
 8003d9a:	d829      	bhi.n	8003df0 <UART_SetConfig+0x138>
 8003d9c:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <UART_SetConfig+0xec>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003dd9 	.word	0x08003dd9
 8003da8:	08003df1 	.word	0x08003df1
 8003dac:	08003df1 	.word	0x08003df1
 8003db0:	08003df1 	.word	0x08003df1
 8003db4:	08003de5 	.word	0x08003de5
 8003db8:	08003df1 	.word	0x08003df1
 8003dbc:	08003df1 	.word	0x08003df1
 8003dc0:	08003df1 	.word	0x08003df1
 8003dc4:	08003ddf 	.word	0x08003ddf
 8003dc8:	08003df1 	.word	0x08003df1
 8003dcc:	08003df1 	.word	0x08003df1
 8003dd0:	08003df1 	.word	0x08003df1
 8003dd4:	08003deb 	.word	0x08003deb
 8003dd8:	2300      	movs	r3, #0
 8003dda:	76fb      	strb	r3, [r7, #27]
 8003ddc:	e038      	b.n	8003e50 <UART_SetConfig+0x198>
 8003dde:	2302      	movs	r3, #2
 8003de0:	76fb      	strb	r3, [r7, #27]
 8003de2:	e035      	b.n	8003e50 <UART_SetConfig+0x198>
 8003de4:	2304      	movs	r3, #4
 8003de6:	76fb      	strb	r3, [r7, #27]
 8003de8:	e032      	b.n	8003e50 <UART_SetConfig+0x198>
 8003dea:	2308      	movs	r3, #8
 8003dec:	76fb      	strb	r3, [r7, #27]
 8003dee:	e02f      	b.n	8003e50 <UART_SetConfig+0x198>
 8003df0:	2310      	movs	r3, #16
 8003df2:	76fb      	strb	r3, [r7, #27]
 8003df4:	bf00      	nop
 8003df6:	e02b      	b.n	8003e50 <UART_SetConfig+0x198>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a6b      	ldr	r2, [pc, #428]	; (8003fac <UART_SetConfig+0x2f4>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d124      	bne.n	8003e4c <UART_SetConfig+0x194>
 8003e02:	4b6c      	ldr	r3, [pc, #432]	; (8003fb4 <UART_SetConfig+0x2fc>)
 8003e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003e0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e10:	d012      	beq.n	8003e38 <UART_SetConfig+0x180>
 8003e12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e16:	d802      	bhi.n	8003e1e <UART_SetConfig+0x166>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d007      	beq.n	8003e2c <UART_SetConfig+0x174>
 8003e1c:	e012      	b.n	8003e44 <UART_SetConfig+0x18c>
 8003e1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e22:	d006      	beq.n	8003e32 <UART_SetConfig+0x17a>
 8003e24:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e28:	d009      	beq.n	8003e3e <UART_SetConfig+0x186>
 8003e2a:	e00b      	b.n	8003e44 <UART_SetConfig+0x18c>
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	76fb      	strb	r3, [r7, #27]
 8003e30:	e00e      	b.n	8003e50 <UART_SetConfig+0x198>
 8003e32:	2302      	movs	r3, #2
 8003e34:	76fb      	strb	r3, [r7, #27]
 8003e36:	e00b      	b.n	8003e50 <UART_SetConfig+0x198>
 8003e38:	2304      	movs	r3, #4
 8003e3a:	76fb      	strb	r3, [r7, #27]
 8003e3c:	e008      	b.n	8003e50 <UART_SetConfig+0x198>
 8003e3e:	2308      	movs	r3, #8
 8003e40:	76fb      	strb	r3, [r7, #27]
 8003e42:	e005      	b.n	8003e50 <UART_SetConfig+0x198>
 8003e44:	2310      	movs	r3, #16
 8003e46:	76fb      	strb	r3, [r7, #27]
 8003e48:	bf00      	nop
 8003e4a:	e001      	b.n	8003e50 <UART_SetConfig+0x198>
 8003e4c:	2310      	movs	r3, #16
 8003e4e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a55      	ldr	r2, [pc, #340]	; (8003fac <UART_SetConfig+0x2f4>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d174      	bne.n	8003f44 <UART_SetConfig+0x28c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003e5a:	7efb      	ldrb	r3, [r7, #27]
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d824      	bhi.n	8003eaa <UART_SetConfig+0x1f2>
 8003e60:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <UART_SetConfig+0x1b0>)
 8003e62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e66:	bf00      	nop
 8003e68:	08003e8d 	.word	0x08003e8d
 8003e6c:	08003eab 	.word	0x08003eab
 8003e70:	08003e95 	.word	0x08003e95
 8003e74:	08003eab 	.word	0x08003eab
 8003e78:	08003e9b 	.word	0x08003e9b
 8003e7c:	08003eab 	.word	0x08003eab
 8003e80:	08003eab 	.word	0x08003eab
 8003e84:	08003eab 	.word	0x08003eab
 8003e88:	08003ea3 	.word	0x08003ea3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e8c:	f7ff f9ac 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8003e90:	6178      	str	r0, [r7, #20]
        break;
 8003e92:	e00f      	b.n	8003eb4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e94:	4b49      	ldr	r3, [pc, #292]	; (8003fbc <UART_SetConfig+0x304>)
 8003e96:	617b      	str	r3, [r7, #20]
        break;
 8003e98:	e00c      	b.n	8003eb4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e9a:	f7ff f90f 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8003e9e:	6178      	str	r0, [r7, #20]
        break;
 8003ea0:	e008      	b.n	8003eb4 <UART_SetConfig+0x1fc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ea2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ea6:	617b      	str	r3, [r7, #20]
        break;
 8003ea8:	e004      	b.n	8003eb4 <UART_SetConfig+0x1fc>
      default:
        pclk = 0U;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	76bb      	strb	r3, [r7, #26]
        break;
 8003eb2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 8100 	beq.w	80040bc <UART_SetConfig+0x404>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685a      	ldr	r2, [r3, #4]
 8003ec0:	4613      	mov	r3, r2
 8003ec2:	005b      	lsls	r3, r3, #1
 8003ec4:	4413      	add	r3, r2
 8003ec6:	697a      	ldr	r2, [r7, #20]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d305      	bcc.n	8003ed8 <UART_SetConfig+0x220>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ed2:	697a      	ldr	r2, [r7, #20]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d902      	bls.n	8003ede <UART_SetConfig+0x226>
      {
        ret = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	76bb      	strb	r3, [r7, #26]
 8003edc:	e0ee      	b.n	80040bc <UART_SetConfig+0x404>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	f04f 0200 	mov.w	r2, #0
 8003ee6:	f04f 0300 	mov.w	r3, #0
 8003eea:	f04f 0400 	mov.w	r4, #0
 8003eee:	0214      	lsls	r4, r2, #8
 8003ef0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003ef4:	020b      	lsls	r3, r1, #8
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	6852      	ldr	r2, [r2, #4]
 8003efa:	0852      	lsrs	r2, r2, #1
 8003efc:	4611      	mov	r1, r2
 8003efe:	f04f 0200 	mov.w	r2, #0
 8003f02:	eb13 0b01 	adds.w	fp, r3, r1
 8003f06:	eb44 0c02 	adc.w	ip, r4, r2
 8003f0a:	4658      	mov	r0, fp
 8003f0c:	4661      	mov	r1, ip
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	f04f 0400 	mov.w	r4, #0
 8003f16:	461a      	mov	r2, r3
 8003f18:	4623      	mov	r3, r4
 8003f1a:	f7fc fea5 	bl	8000c68 <__aeabi_uldivmod>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	460c      	mov	r4, r1
 8003f22:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003f24:	693b      	ldr	r3, [r7, #16]
 8003f26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f2a:	d308      	bcc.n	8003f3e <UART_SetConfig+0x286>
 8003f2c:	693b      	ldr	r3, [r7, #16]
 8003f2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f32:	d204      	bcs.n	8003f3e <UART_SetConfig+0x286>
        {
          huart->Instance->BRR = usartdiv;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	60da      	str	r2, [r3, #12]
 8003f3c:	e0be      	b.n	80040bc <UART_SetConfig+0x404>
        }
        else
        {
          ret = HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	76bb      	strb	r3, [r7, #26]
 8003f42:	e0bb      	b.n	80040bc <UART_SetConfig+0x404>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69db      	ldr	r3, [r3, #28]
 8003f48:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f4c:	d169      	bne.n	8004022 <UART_SetConfig+0x36a>
  {
    switch (clocksource)
 8003f4e:	7efb      	ldrb	r3, [r7, #27]
 8003f50:	2b08      	cmp	r3, #8
 8003f52:	d835      	bhi.n	8003fc0 <UART_SetConfig+0x308>
 8003f54:	a201      	add	r2, pc, #4	; (adr r2, 8003f5c <UART_SetConfig+0x2a4>)
 8003f56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f5a:	bf00      	nop
 8003f5c:	08003f81 	.word	0x08003f81
 8003f60:	08003f89 	.word	0x08003f89
 8003f64:	08003f91 	.word	0x08003f91
 8003f68:	08003fc1 	.word	0x08003fc1
 8003f6c:	08003f97 	.word	0x08003f97
 8003f70:	08003fc1 	.word	0x08003fc1
 8003f74:	08003fc1 	.word	0x08003fc1
 8003f78:	08003fc1 	.word	0x08003fc1
 8003f7c:	08003f9f 	.word	0x08003f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f80:	f7ff f932 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8003f84:	6178      	str	r0, [r7, #20]
        break;
 8003f86:	e020      	b.n	8003fca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f88:	f7ff f944 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 8003f8c:	6178      	str	r0, [r7, #20]
        break;
 8003f8e:	e01c      	b.n	8003fca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f90:	4b0a      	ldr	r3, [pc, #40]	; (8003fbc <UART_SetConfig+0x304>)
 8003f92:	617b      	str	r3, [r7, #20]
        break;
 8003f94:	e019      	b.n	8003fca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f96:	f7ff f891 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 8003f9a:	6178      	str	r0, [r7, #20]
        break;
 8003f9c:	e015      	b.n	8003fca <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003fa2:	617b      	str	r3, [r7, #20]
        break;
 8003fa4:	e011      	b.n	8003fca <UART_SetConfig+0x312>
 8003fa6:	bf00      	nop
 8003fa8:	efff69f3 	.word	0xefff69f3
 8003fac:	40008000 	.word	0x40008000
 8003fb0:	40013800 	.word	0x40013800
 8003fb4:	40021000 	.word	0x40021000
 8003fb8:	40004400 	.word	0x40004400
 8003fbc:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	76bb      	strb	r3, [r7, #26]
        break;
 8003fc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d075      	beq.n	80040bc <UART_SetConfig+0x404>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	005a      	lsls	r2, r3, #1
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	085b      	lsrs	r3, r3, #1
 8003fda:	441a      	add	r2, r3
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	2b0f      	cmp	r3, #15
 8003fec:	d916      	bls.n	800401c <UART_SetConfig+0x364>
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ff4:	d212      	bcs.n	800401c <UART_SetConfig+0x364>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	b29b      	uxth	r3, r3
 8003ffa:	f023 030f 	bic.w	r3, r3, #15
 8003ffe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	085b      	lsrs	r3, r3, #1
 8004004:	b29b      	uxth	r3, r3
 8004006:	f003 0307 	and.w	r3, r3, #7
 800400a:	b29a      	uxth	r2, r3
 800400c:	89fb      	ldrh	r3, [r7, #14]
 800400e:	4313      	orrs	r3, r2
 8004010:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	89fa      	ldrh	r2, [r7, #14]
 8004018:	60da      	str	r2, [r3, #12]
 800401a:	e04f      	b.n	80040bc <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	76bb      	strb	r3, [r7, #26]
 8004020:	e04c      	b.n	80040bc <UART_SetConfig+0x404>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004022:	7efb      	ldrb	r3, [r7, #27]
 8004024:	2b08      	cmp	r3, #8
 8004026:	d828      	bhi.n	800407a <UART_SetConfig+0x3c2>
 8004028:	a201      	add	r2, pc, #4	; (adr r2, 8004030 <UART_SetConfig+0x378>)
 800402a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800402e:	bf00      	nop
 8004030:	08004055 	.word	0x08004055
 8004034:	0800405d 	.word	0x0800405d
 8004038:	08004065 	.word	0x08004065
 800403c:	0800407b 	.word	0x0800407b
 8004040:	0800406b 	.word	0x0800406b
 8004044:	0800407b 	.word	0x0800407b
 8004048:	0800407b 	.word	0x0800407b
 800404c:	0800407b 	.word	0x0800407b
 8004050:	08004073 	.word	0x08004073
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004054:	f7ff f8c8 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8004058:	6178      	str	r0, [r7, #20]
        break;
 800405a:	e013      	b.n	8004084 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800405c:	f7ff f8da 	bl	8003214 <HAL_RCC_GetPCLK2Freq>
 8004060:	6178      	str	r0, [r7, #20]
        break;
 8004062:	e00f      	b.n	8004084 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004064:	4b1b      	ldr	r3, [pc, #108]	; (80040d4 <UART_SetConfig+0x41c>)
 8004066:	617b      	str	r3, [r7, #20]
        break;
 8004068:	e00c      	b.n	8004084 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800406a:	f7ff f827 	bl	80030bc <HAL_RCC_GetSysClockFreq>
 800406e:	6178      	str	r0, [r7, #20]
        break;
 8004070:	e008      	b.n	8004084 <UART_SetConfig+0x3cc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004072:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004076:	617b      	str	r3, [r7, #20]
        break;
 8004078:	e004      	b.n	8004084 <UART_SetConfig+0x3cc>
      default:
        pclk = 0U;
 800407a:	2300      	movs	r3, #0
 800407c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	76bb      	strb	r3, [r7, #26]
        break;
 8004082:	bf00      	nop
    }

    if (pclk != 0U)
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d018      	beq.n	80040bc <UART_SetConfig+0x404>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	085a      	lsrs	r2, r3, #1
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	441a      	add	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	fbb2 f3f3 	udiv	r3, r2, r3
 800409c:	b29b      	uxth	r3, r3
 800409e:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	2b0f      	cmp	r3, #15
 80040a4:	d908      	bls.n	80040b8 <UART_SetConfig+0x400>
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040ac:	d204      	bcs.n	80040b8 <UART_SetConfig+0x400>
      {
        huart->Instance->BRR = usartdiv;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	e001      	b.n	80040bc <UART_SetConfig+0x404>
      }
      else
      {
        ret = HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80040c8:	7ebb      	ldrb	r3, [r7, #26]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80040d4:	00f42400 	.word	0x00f42400

080040d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e4:	f003 0301 	and.w	r3, r3, #1
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00a      	beq.n	8004102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	685b      	ldr	r3, [r3, #4]
 80040f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	430a      	orrs	r2, r1
 8004122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004128:	f003 0304 	and.w	r3, r3, #4
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	430a      	orrs	r2, r1
 8004144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	430a      	orrs	r2, r1
 8004166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800416c:	f003 0310 	and.w	r3, r3, #16
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418e:	f003 0320 	and.w	r3, r3, #32
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	689b      	ldr	r3, [r3, #8]
 800419c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d01a      	beq.n	80041ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041d6:	d10a      	bne.n	80041ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d00a      	beq.n	8004210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	605a      	str	r2, [r3, #4]
  }
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	b086      	sub	sp, #24
 8004220:	af02      	add	r7, sp, #8
 8004222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	2200      	movs	r2, #0
 8004228:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800422a:	f7fd ff53 	bl	80020d4 <HAL_GetTick>
 800422e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b08      	cmp	r3, #8
 800423c:	d10e      	bne.n	800425c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800423e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004242:	9300      	str	r3, [sp, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 f82a 	bl	80042a6 <UART_WaitOnFlagUntilTimeout>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	d001      	beq.n	800425c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e020      	b.n	800429e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b04      	cmp	r3, #4
 8004268:	d10e      	bne.n	8004288 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800426a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2200      	movs	r2, #0
 8004274:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f000 f814 	bl	80042a6 <UART_WaitOnFlagUntilTimeout>
 800427e:	4603      	mov	r3, r0
 8004280:	2b00      	cmp	r3, #0
 8004282:	d001      	beq.n	8004288 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e00a      	b.n	800429e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2220      	movs	r2, #32
 800428c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2220      	movs	r2, #32
 8004292:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}

080042a6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80042a6:	b580      	push	{r7, lr}
 80042a8:	b084      	sub	sp, #16
 80042aa:	af00      	add	r7, sp, #0
 80042ac:	60f8      	str	r0, [r7, #12]
 80042ae:	60b9      	str	r1, [r7, #8]
 80042b0:	603b      	str	r3, [r7, #0]
 80042b2:	4613      	mov	r3, r2
 80042b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042b6:	e05d      	b.n	8004374 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042be:	d059      	beq.n	8004374 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042c0:	f7fd ff08 	bl	80020d4 <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d302      	bcc.n	80042d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d11b      	bne.n	800430e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80042e4:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f022 0201 	bic.w	r2, r2, #1
 80042f4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2220      	movs	r2, #32
 80042fa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2220      	movs	r2, #32
 8004300:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e042      	b.n	8004394 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0304 	and.w	r3, r3, #4
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02b      	beq.n	8004374 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004326:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800432a:	d123      	bne.n	8004374 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004334:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004344:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	689a      	ldr	r2, [r3, #8]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	2220      	movs	r2, #32
 800435a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2220      	movs	r2, #32
 8004360:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	2220      	movs	r2, #32
 8004366:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8004370:	2303      	movs	r3, #3
 8004372:	e00f      	b.n	8004394 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69da      	ldr	r2, [r3, #28]
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4013      	ands	r3, r2
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	429a      	cmp	r2, r3
 8004382:	bf0c      	ite	eq
 8004384:	2301      	moveq	r3, #1
 8004386:	2300      	movne	r3, #0
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	79fb      	ldrb	r3, [r7, #7]
 800438e:	429a      	cmp	r2, r3
 8004390:	d092      	beq.n	80042b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004392:	2300      	movs	r3, #0
}
 8004394:	4618      	mov	r0, r3
 8004396:	3710      	adds	r7, #16
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <TfLiteIntArrayGetSizeInBytes>:
#ifndef TF_LITE_STATIC_MEMORY
#include <stdlib.h>
#include <string.h>
#endif  // TF_LITE_STATIC_MEMORY

int TfLiteIntArrayGetSizeInBytes(int size) {
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3301      	adds	r3, #1
 80043a8:	009b      	lsls	r3, r3, #2
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
	...

080043b8 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 80043b8:	b480      	push	{r7}
 80043ba:	b083      	sub	sp, #12
 80043bc:	af00      	add	r7, sp, #0
 80043be:	4603      	mov	r3, r0
 80043c0:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 80043c2:	79fb      	ldrb	r3, [r7, #7]
 80043c4:	2b0d      	cmp	r3, #13
 80043c6:	d83b      	bhi.n	8004440 <TfLiteTypeGetName+0x88>
 80043c8:	a201      	add	r2, pc, #4	; (adr r2, 80043d0 <TfLiteTypeGetName+0x18>)
 80043ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ce:	bf00      	nop
 80043d0:	08004409 	.word	0x08004409
 80043d4:	0800440d 	.word	0x0800440d
 80043d8:	08004415 	.word	0x08004415
 80043dc:	08004419 	.word	0x08004419
 80043e0:	08004421 	.word	0x08004421
 80043e4:	08004435 	.word	0x08004435
 80043e8:	08004429 	.word	0x08004429
 80043ec:	08004411 	.word	0x08004411
 80043f0:	0800442d 	.word	0x0800442d
 80043f4:	0800441d 	.word	0x0800441d
 80043f8:	08004439 	.word	0x08004439
 80043fc:	0800443d 	.word	0x0800443d
 8004400:	08004431 	.word	0x08004431
 8004404:	08004425 	.word	0x08004425
    case kTfLiteNoType:
      return "NOTYPE";
 8004408:	4b11      	ldr	r3, [pc, #68]	; (8004450 <TfLiteTypeGetName+0x98>)
 800440a:	e01a      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteFloat32:
      return "FLOAT32";
 800440c:	4b11      	ldr	r3, [pc, #68]	; (8004454 <TfLiteTypeGetName+0x9c>)
 800440e:	e018      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteInt16:
      return "INT16";
 8004410:	4b11      	ldr	r3, [pc, #68]	; (8004458 <TfLiteTypeGetName+0xa0>)
 8004412:	e016      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteInt32:
      return "INT32";
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <TfLiteTypeGetName+0xa4>)
 8004416:	e014      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteUInt8:
      return "UINT8";
 8004418:	4b11      	ldr	r3, [pc, #68]	; (8004460 <TfLiteTypeGetName+0xa8>)
 800441a:	e012      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteInt8:
      return "INT8";
 800441c:	4b11      	ldr	r3, [pc, #68]	; (8004464 <TfLiteTypeGetName+0xac>)
 800441e:	e010      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteInt64:
      return "INT64";
 8004420:	4b11      	ldr	r3, [pc, #68]	; (8004468 <TfLiteTypeGetName+0xb0>)
 8004422:	e00e      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteUInt64:
      return "UINT64";
 8004424:	4b11      	ldr	r3, [pc, #68]	; (800446c <TfLiteTypeGetName+0xb4>)
 8004426:	e00c      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteBool:
      return "BOOL";
 8004428:	4b11      	ldr	r3, [pc, #68]	; (8004470 <TfLiteTypeGetName+0xb8>)
 800442a:	e00a      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 800442c:	4b11      	ldr	r3, [pc, #68]	; (8004474 <TfLiteTypeGetName+0xbc>)
 800442e:	e008      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteComplex128:
      return "COMPLEX128";
 8004430:	4b11      	ldr	r3, [pc, #68]	; (8004478 <TfLiteTypeGetName+0xc0>)
 8004432:	e006      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteString:
      return "STRING";
 8004434:	4b11      	ldr	r3, [pc, #68]	; (800447c <TfLiteTypeGetName+0xc4>)
 8004436:	e004      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteFloat16:
      return "FLOAT16";
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <TfLiteTypeGetName+0xc8>)
 800443a:	e002      	b.n	8004442 <TfLiteTypeGetName+0x8a>
    case kTfLiteFloat64:
      return "FLOAT64";
 800443c:	4b11      	ldr	r3, [pc, #68]	; (8004484 <TfLiteTypeGetName+0xcc>)
 800443e:	e000      	b.n	8004442 <TfLiteTypeGetName+0x8a>
  }
  return "Unknown type";
 8004440:	4b11      	ldr	r3, [pc, #68]	; (8004488 <TfLiteTypeGetName+0xd0>)
}
 8004442:	4618      	mov	r0, r3
 8004444:	370c      	adds	r7, #12
 8004446:	46bd      	mov	sp, r7
 8004448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444c:	4770      	bx	lr
 800444e:	bf00      	nop
 8004450:	0800f3d8 	.word	0x0800f3d8
 8004454:	0800f3e0 	.word	0x0800f3e0
 8004458:	0800f3e8 	.word	0x0800f3e8
 800445c:	0800f3f0 	.word	0x0800f3f0
 8004460:	0800f3f8 	.word	0x0800f3f8
 8004464:	0800f400 	.word	0x0800f400
 8004468:	0800f408 	.word	0x0800f408
 800446c:	0800f410 	.word	0x0800f410
 8004470:	0800f418 	.word	0x0800f418
 8004474:	0800f420 	.word	0x0800f420
 8004478:	0800f42c 	.word	0x0800f42c
 800447c:	0800f438 	.word	0x0800f438
 8004480:	0800f440 	.word	0x0800f440
 8004484:	0800f448 	.word	0x0800f448
 8004488:	0800f450 	.word	0x0800f450

0800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>:
#include "tensorflow/lite/core/api/error_reporter.h"
#include <cstdarg>

namespace tflite {

int ErrorReporter::Report(const char* format, ...) {
 800448c:	b40e      	push	{r1, r2, r3}
 800448e:	b580      	push	{r7, lr}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  va_list args;
  va_start(args, format);
 8004496:	f107 0320 	add.w	r3, r7, #32
 800449a:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	3308      	adds	r3, #8
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	68ba      	ldr	r2, [r7, #8]
 80044a6:	69f9      	ldr	r1, [r7, #28]
 80044a8:	6878      	ldr	r0, [r7, #4]
 80044aa:	4798      	blx	r3
 80044ac:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 80044ae:	68fb      	ldr	r3, [r7, #12]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3714      	adds	r7, #20
 80044b4:	46bd      	mov	sp, r7
 80044b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ba:	b003      	add	sp, #12
 80044bc:	4770      	bx	lr

080044be <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>:

// TODO(aselle): Make the name of ReportError on context the same, so
// we can use the ensure functions w/o a context and w/ a reporter.
int ErrorReporter::ReportError(void*, const char* format, ...) {
 80044be:	b40c      	push	{r2, r3}
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  va_list args;
  va_start(args, format);
 80044ca:	f107 031c 	add.w	r3, r7, #28
 80044ce:	60bb      	str	r3, [r7, #8]
  int code = Report(format, args);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3308      	adds	r3, #8
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	69b9      	ldr	r1, [r7, #24]
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
 80044e0:	60f8      	str	r0, [r7, #12]
  va_end(args);
  return code;
 80044e2:	68fb      	ldr	r3, [r7, #12]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3710      	adds	r7, #16
 80044e8:	46bd      	mov	sp, r7
 80044ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80044ee:	b002      	add	sp, #8
 80044f0:	4770      	bx	lr

080044f2 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 80044f2:	b480      	push	{r7}
 80044f4:	b083      	sub	sp, #12
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	6078      	str	r0, [r7, #4]
 80044fa:	6039      	str	r1, [r7, #0]
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	4618      	mov	r0, r3
 8004500:	370c      	adds	r7, #12
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>:
  tflite::ActivationFunctionType fused_activation_function() const {
 800450a:	b580      	push	{r7, lr}
 800450c:	b082      	sub	sp, #8
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::ActivationFunctionType>(GetField<int8_t>(VT_FUSED_ACTIVATION_FUNCTION, 0));
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	2104      	movs	r1, #4
 8004518:	4618      	mov	r0, r3
 800451a:	f000 fa6e 	bl	80049fa <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800451e:	4603      	mov	r3, r0
 8004520:	b2db      	uxtb	r3, r3
  }
 8004522:	4618      	mov	r0, r3
 8004524:	3708      	adds	r7, #8
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}

0800452a <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>:
  tflite::FullyConnectedOptionsWeightsFormat weights_format() const {
 800452a:	b580      	push	{r7, lr}
 800452c:	b082      	sub	sp, #8
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::FullyConnectedOptionsWeightsFormat>(GetField<int8_t>(VT_WEIGHTS_FORMAT, 0));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	2106      	movs	r1, #6
 8004538:	4618      	mov	r0, r3
 800453a:	f000 fa5e 	bl	80049fa <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800453e:	4603      	mov	r3, r0
 8004540:	b2db      	uxtb	r3, r3
  }
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}

0800454a <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>:
  bool keep_num_dims() const {
 800454a:	b580      	push	{r7, lr}
 800454c:	b082      	sub	sp, #8
 800454e:	af00      	add	r7, sp, #0
 8004550:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_KEEP_NUM_DIMS, 0) != 0;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	2108      	movs	r1, #8
 8004558:	4618      	mov	r0, r3
 800455a:	f000 f9f1 	bl	8004940 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 800455e:	4603      	mov	r3, r0
 8004560:	2b00      	cmp	r3, #0
 8004562:	bf14      	ite	ne
 8004564:	2301      	movne	r3, #1
 8004566:	2300      	moveq	r3, #0
 8004568:	b2db      	uxtb	r3, r3
  }
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>:
  bool asymmetric_quantize_inputs() const {
 8004572:	b580      	push	{r7, lr}
 8004574:	b082      	sub	sp, #8
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_ASYMMETRIC_QUANTIZE_INPUTS, 0) != 0;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	210a      	movs	r1, #10
 8004580:	4618      	mov	r0, r3
 8004582:	f000 f9dd 	bl	8004940 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8004586:	4603      	mov	r3, r0
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf14      	ite	ne
 800458c:	2301      	movne	r3, #1
 800458e:	2300      	moveq	r3, #0
 8004590:	b2db      	uxtb	r3, r3
  }
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <_ZNK6tflite8Operator20builtin_options_typeEv>:
  tflite::BuiltinOptions builtin_options_type() const {
 800459a:	b580      	push	{r7, lr}
 800459c:	b082      	sub	sp, #8
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOptions>(GetField<uint8_t>(VT_BUILTIN_OPTIONS_TYPE, 0));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	210a      	movs	r1, #10
 80045a8:	4618      	mov	r0, r3
 80045aa:	f000 f9c9 	bl	8004940 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 80045ae:	4603      	mov	r3, r0
  }
 80045b0:	4618      	mov	r0, r3
 80045b2:	3708      	adds	r7, #8
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}

080045b8 <_ZNK6tflite8Operator15builtin_optionsEv>:
  const void *builtin_options() const {
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
    return GetPointer<const void *>(VT_BUILTIN_OPTIONS);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	210c      	movs	r1, #12
 80045c4:	4618      	mov	r0, r3
 80045c6:	f000 f9da 	bl	800497e <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>
 80045ca:	4603      	mov	r3, r0
  }
 80045cc:	4618      	mov	r0, r3
 80045ce:	3708      	adds	r7, #8
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>:
  const tflite::FullyConnectedOptions *builtin_options_as_FullyConnectedOptions() const {
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
    return builtin_options_type() == tflite::BuiltinOptions_FullyConnectedOptions ? static_cast<const tflite::FullyConnectedOptions *>(builtin_options()) : nullptr;
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7ff ffdc 	bl	800459a <_ZNK6tflite8Operator20builtin_options_typeEv>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b08      	cmp	r3, #8
 80045e6:	d104      	bne.n	80045f2 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x1e>
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff ffe5 	bl	80045b8 <_ZNK6tflite8Operator15builtin_optionsEv>
 80045ee:	4603      	mov	r3, r0
 80045f0:	e000      	b.n	80045f4 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv+0x20>
 80045f2:	2300      	movs	r3, #0
  }
 80045f4:	4618      	mov	r0, r3
 80045f6:	3708      	adds	r7, #8
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>:
// parsed op data (e.g., when model parameters are invalid).
class SafeBuiltinDataAllocator {
 public:
  class BuiltinDataDeleter {
   public:
    explicit BuiltinDataDeleter(BuiltinDataAllocator* allocator)
 80045fc:	b480      	push	{r7}
 80045fe:	b083      	sub	sp, #12
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
        : allocator_(allocator) {}
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	683a      	ldr	r2, [r7, #0]
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4618      	mov	r0, r3
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr

0800461a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>:

    void operator()(void* data) { allocator_->Deallocate(data); }
 800461a:	b580      	push	{r7, lr}
 800461c:	b082      	sub	sp, #8
 800461e:	af00      	add	r7, sp, #0
 8004620:	6078      	str	r0, [r7, #4]
 8004622:	6039      	str	r1, [r7, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	3304      	adds	r3, #4
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	6839      	ldr	r1, [r7, #0]
 8004634:	4610      	mov	r0, r2
 8004636:	4798      	blx	r3
 8004638:	bf00      	nop
 800463a:	3708      	adds	r7, #8
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}

08004640 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>:
  };

  template <typename T>
  using BuiltinDataPtr = std::unique_ptr<T, BuiltinDataDeleter>;

  explicit SafeBuiltinDataAllocator(BuiltinDataAllocator* allocator)
 8004640:	b480      	push	{r7}
 8004642:	b083      	sub	sp, #12
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	6039      	str	r1, [r7, #0]
      : allocator_(allocator) {}
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	683a      	ldr	r2, [r7, #0]
 800464e:	601a      	str	r2, [r3, #0]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4618      	mov	r0, r3
 8004654:	370c      	adds	r7, #12
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr

0800465e <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:

// All the Parse functions take some pointers as params and this function has
// the common DCHECKs to catch if any of those are nullptr.
void CheckParsePointerParams(const Operator* op, ErrorReporter* error_reporter,
                             BuiltinDataAllocator* allocator,
                             void** builtin_data) {
 800465e:	b580      	push	{r7, lr}
 8004660:	b084      	sub	sp, #16
 8004662:	af00      	add	r7, sp, #0
 8004664:	60f8      	str	r0, [r7, #12]
 8004666:	60b9      	str	r1, [r7, #8]
 8004668:	607a      	str	r2, [r7, #4]
 800466a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(op != nullptr);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x18>
 8004672:	f007 ff6f 	bl	800c554 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d101      	bne.n	8004680 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x22>
 800467c:	f007 ff6a 	bl	800c554 <abort>
  TFLITE_DCHECK(allocator != nullptr);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x2c>
 8004686:	f007 ff65 	bl	800c554 <abort>
  TFLITE_DCHECK(builtin_data != nullptr);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d101      	bne.n	8004694 <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x36>
 8004690:	f007 ff60 	bl	800c554 <abort>
}
 8004694:	bf00      	nop
 8004696:	3710      	adds	r7, #16
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>:
  }
  return kTfLiteOk;
}

// Converts the flatbuffer activation to what is used at runtime.
TfLiteFusedActivation ConvertActivation(ActivationFunctionType activation) {
 800469c:	b480      	push	{r7}
 800469e:	b083      	sub	sp, #12
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	71fb      	strb	r3, [r7, #7]
  switch (activation) {
 80046a6:	79fb      	ldrb	r3, [r7, #7]
 80046a8:	2b05      	cmp	r3, #5
 80046aa:	d81b      	bhi.n	80046e4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x48>
 80046ac:	a201      	add	r2, pc, #4	; (adr r2, 80046b4 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x18>)
 80046ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b2:	bf00      	nop
 80046b4:	080046cd 	.word	0x080046cd
 80046b8:	080046d1 	.word	0x080046d1
 80046bc:	080046d5 	.word	0x080046d5
 80046c0:	080046d9 	.word	0x080046d9
 80046c4:	080046dd 	.word	0x080046dd
 80046c8:	080046e1 	.word	0x080046e1
    case ActivationFunctionType_NONE:
      return kTfLiteActNone;
 80046cc:	2300      	movs	r3, #0
 80046ce:	e00a      	b.n	80046e6 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU:
      return kTfLiteActRelu;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e008      	b.n	80046e6 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU_N1_TO_1:
      return kTfLiteActReluN1To1;
 80046d4:	2302      	movs	r3, #2
 80046d6:	e006      	b.n	80046e6 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_RELU6:
      return kTfLiteActRelu6;
 80046d8:	2303      	movs	r3, #3
 80046da:	e004      	b.n	80046e6 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_TANH:
      return kTfLiteActTanh;
 80046dc:	2304      	movs	r3, #4
 80046de:	e002      	b.n	80046e6 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
    case ActivationFunctionType_SIGN_BIT:
      return kTfLiteActSignBit;
 80046e0:	2305      	movs	r3, #5
 80046e2:	e000      	b.n	80046e6 <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE+0x4a>
  }
  return kTfLiteActNone;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop

080046f4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>:
}  // NOLINT[readability/fn_size]
#endif  // !defined(TF_LITE_STATIC_MEMORY)
}  // namespace

TfLiteStatus ConvertTensorType(TensorType tensor_type, TfLiteType* type,
                               ErrorReporter* error_reporter) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	4603      	mov	r3, r0
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
 8004700:	73fb      	strb	r3, [r7, #15]
  switch (tensor_type) {
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	2b0c      	cmp	r3, #12
 8004706:	d85e      	bhi.n	80047c6 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xd2>
 8004708:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0x1c>)
 800470a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800470e:	bf00      	nop
 8004710:	0800474f 	.word	0x0800474f
 8004714:	08004745 	.word	0x08004745
 8004718:	0800476d 	.word	0x0800476d
 800471c:	08004777 	.word	0x08004777
 8004720:	0800478b 	.word	0x0800478b
 8004724:	0800479f 	.word	0x0800479f
 8004728:	080047a9 	.word	0x080047a9
 800472c:	08004763 	.word	0x08004763
 8004730:	080047b3 	.word	0x080047b3
 8004734:	08004781 	.word	0x08004781
 8004738:	08004759 	.word	0x08004759
 800473c:	080047bd 	.word	0x080047bd
 8004740:	08004795 	.word	0x08004795
    case TensorType_FLOAT16:
      *type = kTfLiteFloat16;
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	220a      	movs	r2, #10
 8004748:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800474a:	2300      	movs	r3, #0
 800474c:	e045      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_FLOAT32:
      *type = kTfLiteFloat32;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004754:	2300      	movs	r3, #0
 8004756:	e040      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_FLOAT64:
      *type = kTfLiteFloat64;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	220b      	movs	r2, #11
 800475c:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800475e:	2300      	movs	r3, #0
 8004760:	e03b      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT16:
      *type = kTfLiteInt16;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	2207      	movs	r2, #7
 8004766:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004768:	2300      	movs	r3, #0
 800476a:	e036      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT32:
      *type = kTfLiteInt32;
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	2202      	movs	r2, #2
 8004770:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004772:	2300      	movs	r3, #0
 8004774:	e031      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_UINT8:
      *type = kTfLiteUInt8;
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2203      	movs	r2, #3
 800477a:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800477c:	2300      	movs	r3, #0
 800477e:	e02c      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT8:
      *type = kTfLiteInt8;
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2209      	movs	r2, #9
 8004784:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004786:	2300      	movs	r3, #0
 8004788:	e027      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_INT64:
      *type = kTfLiteInt64;
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	2204      	movs	r2, #4
 800478e:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 8004790:	2300      	movs	r3, #0
 8004792:	e022      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_UINT64:
      *type = kTfLiteUInt64;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	220d      	movs	r2, #13
 8004798:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 800479a:	2300      	movs	r3, #0
 800479c:	e01d      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_STRING:
      *type = kTfLiteString;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2205      	movs	r2, #5
 80047a2:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80047a4:	2300      	movs	r3, #0
 80047a6:	e018      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_BOOL:
      *type = kTfLiteBool;
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	2206      	movs	r2, #6
 80047ac:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80047ae:	2300      	movs	r3, #0
 80047b0:	e013      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_COMPLEX64:
      *type = kTfLiteComplex64;
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	2208      	movs	r2, #8
 80047b6:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80047b8:	2300      	movs	r3, #0
 80047ba:	e00e      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    case TensorType_COMPLEX128:
      *type = kTfLiteComplex128;
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	220c      	movs	r2, #12
 80047c0:	701a      	strb	r2, [r3, #0]
      return kTfLiteOk;
 80047c2:	2300      	movs	r3, #0
 80047c4:	e009      	b.n	80047da <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xe6>
    default:
      *type = kTfLiteNoType;
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	2200      	movs	r2, #0
 80047ca:	701a      	strb	r2, [r3, #0]
      TF_LITE_REPORT_ERROR(error_reporter,
 80047cc:	7bfb      	ldrb	r3, [r7, #15]
 80047ce:	461a      	mov	r2, r3
 80047d0:	4904      	ldr	r1, [pc, #16]	; (80047e4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE+0xf0>)
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff fe5a 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unsupported data type %d in tensor\n", tensor_type);
      return kTfLiteError;
 80047d8:	2301      	movs	r3, #1
  }
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	0800f5d0 	.word	0x0800f5d0

080047e8 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>:
}

TfLiteStatus ParseFullyConnected(const Operator* op,
                                 ErrorReporter* error_reporter,
                                 BuiltinDataAllocator* allocator,
                                 void** builtin_data) {
 80047e8:	b5b0      	push	{r4, r5, r7, lr}
 80047ea:	b08a      	sub	sp, #40	; 0x28
 80047ec:	af02      	add	r7, sp, #8
 80047ee:	60f8      	str	r0, [r7, #12]
 80047f0:	60b9      	str	r1, [r7, #8]
 80047f2:	607a      	str	r2, [r7, #4]
 80047f4:	603b      	str	r3, [r7, #0]
  CheckParsePointerParams(op, error_reporter, allocator, builtin_data);
 80047f6:	68b9      	ldr	r1, [r7, #8]
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f7ff ff2e 	bl	800465e <_ZN6tflite12_GLOBAL__N_123CheckParsePointerParamsEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv>

  SafeBuiltinDataAllocator safe_allocator(allocator);
 8004802:	f107 0318 	add.w	r3, r7, #24
 8004806:	6879      	ldr	r1, [r7, #4]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff ff19 	bl	8004640 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocatorC1EPNS_20BuiltinDataAllocatorE>

  std::unique_ptr<TfLiteFullyConnectedParams,
                  SafeBuiltinDataAllocator::BuiltinDataDeleter>
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 800480e:	f107 0310 	add.w	r3, r7, #16
 8004812:	f107 0218 	add.w	r2, r7, #24
 8004816:	4611      	mov	r1, r2
 8004818:	4618      	mov	r0, r3
 800481a:	f000 f943 	bl	8004aa4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>
  TF_LITE_ENSURE(error_reporter, params != nullptr);
 800481e:	f107 0310 	add.w	r3, r7, #16
 8004822:	2100      	movs	r1, #0
 8004824:	4618      	mov	r0, r3
 8004826:	f000 f97a 	bl	8004b1e <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>
 800482a:	4603      	mov	r3, r0
 800482c:	f083 0301 	eor.w	r3, r3, #1
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b00      	cmp	r3, #0
 8004834:	d00c      	beq.n	8004850 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x68>
 8004836:	68b8      	ldr	r0, [r7, #8]
 8004838:	68b9      	ldr	r1, [r7, #8]
 800483a:	4b36      	ldr	r3, [pc, #216]	; (8004914 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x12c>)
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	f240 435b 	movw	r3, #1115	; 0x45b
 8004842:	9300      	str	r3, [sp, #0]
 8004844:	4b34      	ldr	r3, [pc, #208]	; (8004918 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x130>)
 8004846:	4a35      	ldr	r2, [pc, #212]	; (800491c <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x134>)
 8004848:	f7ff fe39 	bl	80044be <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 800484c:	2401      	movs	r4, #1
 800484e:	e057      	b.n	8004900 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>

  const FullyConnectedOptions* schema_params =
      op->builtin_options_as_FullyConnectedOptions();
 8004850:	68f8      	ldr	r0, [r7, #12]
 8004852:	f7ff febf 	bl	80045d4 <_ZNK6tflite8Operator40builtin_options_as_FullyConnectedOptionsEv>
 8004856:	61f8      	str	r0, [r7, #28]

  if (schema_params != nullptr) {
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d047      	beq.n	80048ee <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
    params->activation =
        ConvertActivation(schema_params->fused_activation_function());
 800485e:	69f8      	ldr	r0, [r7, #28]
 8004860:	f7ff fe53 	bl	800450a <_ZNK6tflite21FullyConnectedOptions25fused_activation_functionEv>
 8004864:	4603      	mov	r3, r0
 8004866:	461d      	mov	r5, r3
    params->activation =
 8004868:	f107 0310 	add.w	r3, r7, #16
 800486c:	4618      	mov	r0, r3
 800486e:	f000 f963 	bl	8004b38 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004872:	4604      	mov	r4, r0
        ConvertActivation(schema_params->fused_activation_function());
 8004874:	4628      	mov	r0, r5
 8004876:	f7ff ff11 	bl	800469c <_ZN6tflite12_GLOBAL__N_117ConvertActivationENS_22ActivationFunctionTypeE>
 800487a:	4603      	mov	r3, r0
    params->activation =
 800487c:	7023      	strb	r3, [r4, #0]
    params->keep_num_dims = schema_params->keep_num_dims();
 800487e:	f107 0310 	add.w	r3, r7, #16
 8004882:	4618      	mov	r0, r3
 8004884:	f000 f958 	bl	8004b38 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 8004888:	4604      	mov	r4, r0
 800488a:	69f8      	ldr	r0, [r7, #28]
 800488c:	f7ff fe5d 	bl	800454a <_ZNK6tflite21FullyConnectedOptions13keep_num_dimsEv>
 8004890:	4603      	mov	r3, r0
 8004892:	70a3      	strb	r3, [r4, #2]
    params->asymmetric_quantize_inputs =
 8004894:	f107 0310 	add.w	r3, r7, #16
 8004898:	4618      	mov	r0, r3
 800489a:	f000 f94d 	bl	8004b38 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 800489e:	4604      	mov	r4, r0
        schema_params->asymmetric_quantize_inputs();
 80048a0:	69f8      	ldr	r0, [r7, #28]
 80048a2:	f7ff fe66 	bl	8004572 <_ZNK6tflite21FullyConnectedOptions26asymmetric_quantize_inputsEv>
 80048a6:	4603      	mov	r3, r0
    params->asymmetric_quantize_inputs =
 80048a8:	70e3      	strb	r3, [r4, #3]

    switch (schema_params->weights_format()) {
 80048aa:	69f8      	ldr	r0, [r7, #28]
 80048ac:	f7ff fe3d 	bl	800452a <_ZNK6tflite21FullyConnectedOptions14weights_formatEv>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d002      	beq.n	80048bc <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xd4>
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d009      	beq.n	80048ce <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xe6>
 80048ba:	e011      	b.n	80048e0 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0xf8>
      case FullyConnectedOptionsWeightsFormat_DEFAULT:
        params->weights_format = kTfLiteFullyConnectedWeightsFormatDefault;
 80048bc:	f107 0310 	add.w	r3, r7, #16
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 f939 	bl	8004b38 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2200      	movs	r2, #0
 80048ca:	705a      	strb	r2, [r3, #1]
        break;
 80048cc:	e00f      	b.n	80048ee <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
      case FullyConnectedOptionsWeightsFormat_SHUFFLED4x16INT8:
        params->weights_format =
 80048ce:	f107 0310 	add.w	r3, r7, #16
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f930 	bl	8004b38 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>
 80048d8:	4603      	mov	r3, r0
 80048da:	2201      	movs	r2, #1
 80048dc:	705a      	strb	r2, [r3, #1]
            kTfLiteFullyConnectedWeightsFormatShuffled4x16Int8;
        break;
 80048de:	e006      	b.n	80048ee <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x106>
      default:
        TF_LITE_REPORT_ERROR(error_reporter,
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	490f      	ldr	r1, [pc, #60]	; (8004920 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x138>)
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff fdd1 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Unhandled fully-connected weights format.");
        return kTfLiteError;
 80048ea:	2401      	movs	r4, #1
 80048ec:	e008      	b.n	8004900 <_ZN6tflite19ParseFullyConnectedEPKNS_8OperatorEPNS_13ErrorReporterEPNS_20BuiltinDataAllocatorEPPv+0x118>
    // TODO(b/157480169): We should either return kTfLiteError or fill in some
    // reasonable defaults in the params struct. We are not doing so until we
    // better undertand the ramifications of changing the legacy behavior.
  }

  *builtin_data = params.release();
 80048ee:	f107 0310 	add.w	r3, r7, #16
 80048f2:	4618      	mov	r0, r3
 80048f4:	f000 f92c 	bl	8004b50 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>
 80048f8:	4602      	mov	r2, r0
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 80048fe:	2400      	movs	r4, #0
      params = safe_allocator.Allocate<TfLiteFullyConnectedParams>();
 8004900:	f107 0310 	add.w	r3, r7, #16
 8004904:	4618      	mov	r0, r3
 8004906:	f000 f8eb 	bl	8004ae0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>
 800490a:	4623      	mov	r3, r4
}
 800490c:	4618      	mov	r0, r3
 800490e:	3720      	adds	r7, #32
 8004910:	46bd      	mov	sp, r7
 8004912:	bdb0      	pop	{r4, r5, r7, pc}
 8004914:	0800f548 	.word	0x0800f548
 8004918:	0800f4e8 	.word	0x0800f4e8
 800491c:	0800f530 	.word	0x0800f530
 8004920:	0800f5f4 	.word	0x0800f5f4

08004924 <_ZN11flatbuffers10ReadScalarIhEET_PKv>:
T ReadScalar(const void *p) {
 8004924:	b580      	push	{r7, lr}
 8004926:	b082      	sub	sp, #8
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	4618      	mov	r0, r3
 8004932:	f000 f921 	bl	8004b78 <_ZN11flatbuffers12EndianScalarIhEET_S1_>
 8004936:	4603      	mov	r3, r0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3708      	adds	r7, #8
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	460b      	mov	r3, r1
 800494a:	807b      	strh	r3, [r7, #2]
 800494c:	4613      	mov	r3, r2
 800494e:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004950:	887b      	ldrh	r3, [r7, #2]
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f7fc fbcd 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800495a:	4603      	mov	r3, r0
 800495c:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 800495e:	89fb      	ldrh	r3, [r7, #14]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x34>
 8004964:	687a      	ldr	r2, [r7, #4]
 8004966:	89fb      	ldrh	r3, [r7, #14]
 8004968:	4413      	add	r3, r2
 800496a:	4618      	mov	r0, r3
 800496c:	f7ff ffda 	bl	8004924 <_ZN11flatbuffers10ReadScalarIhEET_PKv>
 8004970:	4603      	mov	r3, r0
 8004972:	e000      	b.n	8004976 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_+0x36>
 8004974:	787b      	ldrb	r3, [r7, #1]
  }
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}

0800497e <_ZNK11flatbuffers5Table10GetPointerIPKvEET_t>:
    auto field_offset = GetOptionalFieldOffset(field);
    auto p = data_ + field_offset;
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
                        : nullptr;
  }
  template<typename P> P GetPointer(voffset_t field) const {
 800497e:	b580      	push	{r7, lr}
 8004980:	b082      	sub	sp, #8
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	460b      	mov	r3, r1
 8004988:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800498a:	887b      	ldrh	r3, [r7, #2]
 800498c:	4619      	mov	r1, r3
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f8fe 	bl	8004b90 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>
 8004994:	4603      	mov	r3, r0
  }
 8004996:	4618      	mov	r0, r3
 8004998:	3708      	adds	r7, #8
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}

0800499e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 800499e:	b580      	push	{r7, lr}
 80049a0:	b086      	sub	sp, #24
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	60f8      	str	r0, [r7, #12]
 80049a6:	460b      	mov	r3, r1
 80049a8:	607a      	str	r2, [r7, #4]
 80049aa:	817b      	strh	r3, [r7, #10]
    auto field_offset = GetOptionalFieldOffset(field);
 80049ac:	897b      	ldrh	r3, [r7, #10]
 80049ae:	4619      	mov	r1, r3
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f7fc fb9f 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80049b6:	4603      	mov	r3, r0
 80049b8:	82fb      	strh	r3, [r7, #22]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 80049ba:	8afb      	ldrh	r3, [r7, #22]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d007      	beq.n	80049d0 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x32>
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	8afb      	ldrh	r3, [r7, #22]
 80049c4:	4413      	add	r3, r2
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7fc ff2d 	bl	8001826 <_ZN11flatbuffers10ReadScalarIlEET_PKv>
 80049cc:	4603      	mov	r3, r0
 80049ce:	e000      	b.n	80049d2 <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_+0x34>
 80049d0:	687b      	ldr	r3, [r7, #4]
  }
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}

080049da <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 80049da:	b580      	push	{r7, lr}
 80049dc:	b082      	sub	sp, #8
 80049de:	af00      	add	r7, sp, #0
 80049e0:	6078      	str	r0, [r7, #4]
 80049e2:	460b      	mov	r3, r1
 80049e4:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 80049e6:	887b      	ldrh	r3, [r7, #2]
 80049e8:	4619      	mov	r1, r3
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f8f0 	bl	8004bd0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 80049f0:	4603      	mov	r3, r0
  }
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}

080049fa <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>:
  template<typename T> T GetField(voffset_t field, T defaultval) const {
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b084      	sub	sp, #16
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
 8004a02:	460b      	mov	r3, r1
 8004a04:	807b      	strh	r3, [r7, #2]
 8004a06:	4613      	mov	r3, r2
 8004a08:	707b      	strb	r3, [r7, #1]
    auto field_offset = GetOptionalFieldOffset(field);
 8004a0a:	887b      	ldrh	r3, [r7, #2]
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc fb70 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004a14:	4603      	mov	r3, r0
 8004a16:	81fb      	strh	r3, [r7, #14]
    return field_offset ? ReadScalar<T>(data_ + field_offset) : defaultval;
 8004a18:	89fb      	ldrh	r3, [r7, #14]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d007      	beq.n	8004a2e <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x34>
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	89fb      	ldrh	r3, [r7, #14]
 8004a22:	4413      	add	r3, r2
 8004a24:	4618      	mov	r0, r3
 8004a26:	f000 f8f3 	bl	8004c10 <_ZN11flatbuffers10ReadScalarIaEET_PKv>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	e001      	b.n	8004a32 <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_+0x38>
 8004a2e:	f997 3001 	ldrsb.w	r3, [r7, #1]
  }
 8004a32:	4618      	mov	r0, r3
 8004a34:	3710      	adds	r7, #16
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}

08004a3a <_ZNK11flatbuffers6VectorIlE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8004a3a:	b580      	push	{r7, lr}
 8004a3c:	b082      	sub	sp, #8
 8004a3e:	af00      	add	r7, sp, #0
 8004a40:	6078      	str	r0, [r7, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7fc fec6 	bl	80017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}
	...

08004a58 <_ZNK11flatbuffers6VectorIlE3GetEm>:
  return_type Get(uoffset_t i) const {
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b082      	sub	sp, #8
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]
 8004a60:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff ffe9 	bl	8004a3a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d306      	bcc.n	8004a7e <_ZNK11flatbuffers6VectorIlE3GetEm+0x26>
 8004a70:	4b09      	ldr	r3, [pc, #36]	; (8004a98 <_ZNK11flatbuffers6VectorIlE3GetEm+0x40>)
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <_ZNK11flatbuffers6VectorIlE3GetEm+0x44>)
 8004a74:	f44f 7183 	mov.w	r1, #262	; 0x106
 8004a78:	4809      	ldr	r0, [pc, #36]	; (8004aa0 <_ZNK11flatbuffers6VectorIlE3GetEm+0x48>)
 8004a7a:	f007 fd73 	bl	800c564 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f000 f8e7 	bl	8004c52 <_ZNK11flatbuffers6VectorIlE4DataEv>
 8004a84:	4603      	mov	r3, r0
 8004a86:	6839      	ldr	r1, [r7, #0]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 f8d0 	bl	8004c2e <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>
 8004a8e:	4603      	mov	r3, r0
  }
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	0800f628 	.word	0x0800f628
 8004a9c:	08011d1c 	.word	0x08011d1c
 8004aa0:	0800f634 	.word	0x0800f634

08004aa4 <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator8AllocateI26TfLiteFullyConnectedParamsEESt10unique_ptrIT_NS1_18BuiltinDataDeleterEEv>:
  BuiltinDataPtr<T> Allocate() {
 8004aa4:	b590      	push	{r4, r7, lr}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
 8004aac:	6039      	str	r1, [r7, #0]
    return BuiltinDataPtr<T>(allocator_->AllocatePOD<T>(),
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
                             BuiltinDataDeleter(allocator_));
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	f000 f8ef 	bl	8004c96 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>
 8004ab8:	4604      	mov	r4, r0
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	f107 030c 	add.w	r3, r7, #12
 8004ac2:	4611      	mov	r1, r2
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f7ff fd99 	bl	80045fc <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterC1EPNS_20BuiltinDataAllocatorE>
 8004aca:	f107 030c 	add.w	r3, r7, #12
 8004ace:	461a      	mov	r2, r3
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	6878      	ldr	r0, [r7, #4]
 8004ad4:	f000 f905 	bl	8004ce2 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>
  }
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	3714      	adds	r7, #20
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd90      	pop	{r4, r7, pc}

08004ae0 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev>:
	       is_convertible<_Up*, _Tp*>, is_same<_Dp, default_delete<_Tp>>>>
	unique_ptr(auto_ptr<_Up>&& __u) noexcept;
#endif

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
      {
	auto& __ptr = _M_t._M_ptr();
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f000 f915 	bl	8004d1a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004af0:	60f8      	str	r0, [r7, #12]
	if (__ptr != nullptr)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEED1Ev+0x2e>
	  get_deleter()(__ptr);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 f91a 	bl	8004d34 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>
 8004b00:	4602      	mov	r2, r0
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4619      	mov	r1, r3
 8004b08:	4610      	mov	r0, r2
 8004b0a:	f7ff fd86 	bl	800461a <_ZN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterclEPv>
	__ptr = pointer();
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
      }
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}

08004b1e <_ZStneI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEbRKSt10unique_ptrIT_T0_EDn>:
	       const unique_ptr<_Up, _Ep>& __y)
    { return __x.get() != __y.get(); }

  template<typename _Tp, typename _Dp>
    inline bool
    operator!=(const unique_ptr<_Tp, _Dp>& __x, nullptr_t) noexcept
 8004b1e:	b580      	push	{r7, lr}
 8004b20:	b082      	sub	sp, #8
 8004b22:	af00      	add	r7, sp, #0
 8004b24:	6078      	str	r0, [r7, #4]
 8004b26:	6039      	str	r1, [r7, #0]
    { return (bool)__x; }
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f926 	bl	8004d7a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	4618      	mov	r0, r3
 8004b32:	3708      	adds	r7, #8
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEptEv>:
      operator->() const noexcept
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b082      	sub	sp, #8
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
	return get();
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 f92b 	bl	8004d9c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004b46:	4603      	mov	r3, r0
      }
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3708      	adds	r7, #8
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE7releaseEv>:
      release() noexcept
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
	pointer __p = get();
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 f91f 	bl	8004d9c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004b5e:	60f8      	str	r0, [r7, #12]
	_M_t._M_ptr() = pointer();
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4618      	mov	r0, r3
 8004b64:	f000 f8d9 	bl	8004d1a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	6013      	str	r3, [r2, #0]
	return __p;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
      }
 8004b70:	4618      	mov	r0, r3
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}

08004b78 <_ZN11flatbuffers12EndianScalarIhEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004b78:	b480      	push	{r7}
 8004b7a:	b083      	sub	sp, #12
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	71fb      	strb	r3, [r7, #7]
    return t;
 8004b82:	79fb      	ldrb	r3, [r7, #7]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	370c      	adds	r7, #12
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8e:	4770      	bx	lr

08004b90 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
 8004b98:	460b      	mov	r3, r1
 8004b9a:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004b9c:	887b      	ldrh	r3, [r7, #2]
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f7fc faa7 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004baa:	687a      	ldr	r2, [r7, #4]
 8004bac:	89fb      	ldrh	r3, [r7, #14]
 8004bae:	4413      	add	r3, r2
 8004bb0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004bb2:	89fb      	ldrh	r3, [r7, #14]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d006      	beq.n	8004bc6 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x36>
 8004bb8:	68b8      	ldr	r0, [r7, #8]
 8004bba:	f7fc fe26 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	4413      	add	r3, r2
                        : nullptr;
 8004bc4:	e000      	b.n	8004bc8 <_ZN11flatbuffers5Table10GetPointerIPKvEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004bc6:	2300      	movs	r3, #0
  }
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3710      	adds	r7, #16
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	bd80      	pop	{r7, pc}

08004bd0 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b084      	sub	sp, #16
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
 8004bd8:	460b      	mov	r3, r1
 8004bda:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8004bdc:	887b      	ldrh	r3, [r7, #2]
 8004bde:	4619      	mov	r1, r3
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f7fc fa87 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8004be6:	4603      	mov	r3, r0
 8004be8:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	89fb      	ldrh	r3, [r7, #14]
 8004bee:	4413      	add	r3, r2
 8004bf0:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004bf2:	89fb      	ldrh	r3, [r7, #14]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d006      	beq.n	8004c06 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x36>
 8004bf8:	68b8      	ldr	r0, [r7, #8]
 8004bfa:	f7fc fe06 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	4413      	add	r3, r2
                        : nullptr;
 8004c04:	e000      	b.n	8004c08 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8004c06:	2300      	movs	r3, #0
  }
 8004c08:	4618      	mov	r0, r3
 8004c0a:	3710      	adds	r7, #16
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <_ZN11flatbuffers10ReadScalarIaEET_PKv>:
T ReadScalar(const void *p) {
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  return EndianScalar(*reinterpret_cast<const T *>(p));
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	f993 3000 	ldrsb.w	r3, [r3]
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 f8c9 	bl	8004db6 <_ZN11flatbuffers12EndianScalarIaEET_S1_>
 8004c24:	4603      	mov	r3, r0
}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <_ZN11flatbuffers14IndirectHelperIlE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b082      	sub	sp, #8
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	4413      	add	r3, r2
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fc fe84 	bl	8001950 <_ZN11flatbuffers12EndianScalarIlEET_S1_>
 8004c48:	4603      	mov	r3, r0
  }
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <_ZNK11flatbuffers6VectorIlE4DataEv>:
  const uint8_t *Data() const {
 8004c52:	b480      	push	{r7}
 8004c54:	b083      	sub	sp, #12
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	3304      	adds	r3, #4
  }
 8004c5e:	4618      	mov	r0, r3
 8004c60:	370c      	adds	r7, #12
 8004c62:	46bd      	mov	sp, r7
 8004c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c68:	4770      	bx	lr

08004c6a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004c6a:	b480      	push	{r7}
 8004c6c:	b083      	sub	sp, #12
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4618      	mov	r0, r3
 8004c76:	370c      	adds	r7, #12
 8004c78:	46bd      	mov	sp, r7
 8004c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7e:	4770      	bx	lr

08004c80 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v>:
  // Allocate a structure, but make sure it is a POD structure that doesn't
  // require constructors to run. The reason we do this, is that Interpreter's C
  // extension part will take ownership so destructors  will not be run during
  // deallocation.
  template <typename T>
  T* AllocatePOD() {
 8004c96:	b580      	push	{r7, lr}
 8004c98:	b084      	sub	sp, #16
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
    // TODO(b/154346074): Change this to is_trivially_destructible when all
    // platform targets support that properly.
    static_assert(std::is_pod<T>::value, "Builtin data structure must be POD.");
    void* allocated_memory = this->Allocate(sizeof(T), alignof(T));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	2104      	movs	r1, #4
 8004ca8:	6878      	ldr	r0, [r7, #4]
 8004caa:	4798      	blx	r3
 8004cac:	60f8      	str	r0, [r7, #12]
    return new (allocated_memory) T();
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	2004      	movs	r0, #4
 8004cb4:	f7ff fc1d 	bl	80044f2 <_ZnwjPv>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d002      	beq.n	8004cc4 <_ZN6tflite20BuiltinDataAllocator11AllocatePODI26TfLiteFullyConnectedParamsEEPT_v+0x2e>
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	600a      	str	r2, [r1, #0]
  }
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3710      	adds	r7, #16
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	370c      	adds	r7, #12
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1EPS0_OS4_>:
      unique_ptr(pointer __p,
 8004ce2:	b5b0      	push	{r4, r5, r7, lr}
 8004ce4:	b084      	sub	sp, #16
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	60f8      	str	r0, [r7, #12]
 8004cea:	60b9      	str	r1, [r7, #8]
 8004cec:	607a      	str	r2, [r7, #4]
      : _M_t(std::move(__p), std::move(__d))
 8004cee:	68fc      	ldr	r4, [r7, #12]
 8004cf0:	f107 0308 	add.w	r3, r7, #8
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f7ff ffe9 	bl	8004ccc <_ZSt4moveIRP26TfLiteFullyConnectedParamsEONSt16remove_referenceIT_E4typeEOS4_>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	681d      	ldr	r5, [r3, #0]
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff ffb3 	bl	8004c6a <_ZSt4moveIRN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEONSt16remove_referenceIT_E4typeEOS6_>
 8004d04:	4603      	mov	r3, r0
 8004d06:	461a      	mov	r2, r3
 8004d08:	4629      	mov	r1, r5
 8004d0a:	4620      	mov	r0, r4
 8004d0c:	f000 f81f 	bl	8004d4e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>
		      "rvalue deleter bound to reference"); }
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4618      	mov	r0, r3
 8004d14:	3710      	adds	r7, #16
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bdb0      	pop	{r4, r5, r7, pc}

08004d1a <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer&   _M_ptr() { return std::get<0>(_M_t); }
 8004d1a:	b580      	push	{r7, lr}
 8004d1c:	b082      	sub	sp, #8
 8004d1e:	af00      	add	r7, sp, #0
 8004d20:	6078      	str	r0, [r7, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4618      	mov	r0, r3
 8004d26:	f000 f862 	bl	8004dee <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3708      	adds	r7, #8
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <_ZNSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE11get_deleterEv>:
      get_deleter() noexcept
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
      { return _M_t._M_deleter(); }
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	4618      	mov	r0, r3
 8004d40:	f000 f862 	bl	8004e08 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4618      	mov	r0, r3
 8004d48:	3708      	adds	r7, #8
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}

08004d4e <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEC1IS4_EEPS0_OT_>:
      __uniq_ptr_impl(pointer __p, _Del&& __d)
 8004d4e:	b590      	push	{r4, r7, lr}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	60f8      	str	r0, [r7, #12]
 8004d56:	60b9      	str	r1, [r7, #8]
 8004d58:	607a      	str	r2, [r7, #4]
	: _M_t(__p, std::forward<_Del>(__d)) { }
 8004d5a:	68fc      	ldr	r4, [r7, #12]
 8004d5c:	6878      	ldr	r0, [r7, #4]
 8004d5e:	f7ff ff8f 	bl	8004c80 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004d62:	4602      	mov	r2, r0
 8004d64:	f107 0308 	add.w	r3, r7, #8
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4620      	mov	r0, r4
 8004d6c:	f000 f864 	bl	8004e38 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd90      	pop	{r4, r7, pc}

08004d7a <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEcvbEv>:
      explicit operator bool() const noexcept
 8004d7a:	b580      	push	{r7, lr}
 8004d7c:	b082      	sub	sp, #8
 8004d7e:	af00      	add	r7, sp, #0
 8004d80:	6078      	str	r0, [r7, #4]
      { return get() == pointer() ? false : true; }
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 f80a 	bl	8004d9c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	bf14      	ite	ne
 8004d8e:	2301      	movne	r3, #1
 8004d90:	2300      	moveq	r3, #0
 8004d92:	b2db      	uxtb	r3, r3
 8004d94:	4618      	mov	r0, r3
 8004d96:	3708      	adds	r7, #8
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <_ZNKSt10unique_ptrI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE3getEv>:
      get() const noexcept
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
      { return _M_t._M_ptr(); }
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 f85f 	bl	8004e6a <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4618      	mov	r0, r3
 8004db0:	3708      	adds	r7, #8
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <_ZN11flatbuffers12EndianScalarIaEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004db6:	b480      	push	{r7}
 8004db8:	b083      	sub	sp, #12
 8004dba:	af00      	add	r7, sp, #0
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	71fb      	strb	r3, [r7, #7]
    return t;
 8004dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr

08004dd0 <_ZN11flatbuffers12EndianScalarIfEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	ed87 0a01 	vstr	s0, [r7, #4]
    return t;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	ee07 3a90 	vmov	s15, r3
}
 8004de0:	eeb0 0a67 	vmov.f32	s0, s15
 8004de4:	370c      	adds	r7, #12
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }

  /// Return a reference to the ith element of a tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr __tuple_element_t<__i, tuple<_Elements...>>&
    get(tuple<_Elements...>& __t) noexcept
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f844 	bl	8004e86 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004dfe:	4603      	mov	r3, r0
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <_ZNSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE10_M_deleterEv>:
      _Dp&       _M_deleter() { return std::get<1>(_M_t); }
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b082      	sub	sp, #8
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	4618      	mov	r0, r3
 8004e14:	f000 f843 	bl	8004e9e <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	370c      	adds	r7, #12
 8004e30:	46bd      	mov	sp, r7
 8004e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e36:	4770      	bx	lr

08004e38 <_ZNSt5tupleIJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC1IRS1_S5_Lb1EEEOT_OT0_>:
        constexpr tuple(_U1&& __a1, _U2&& __a2)
 8004e38:	b5b0      	push	{r4, r5, r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	60f8      	str	r0, [r7, #12]
 8004e40:	60b9      	str	r1, [r7, #8]
 8004e42:	607a      	str	r2, [r7, #4]
	: _Inherited(std::forward<_U1>(__a1), std::forward<_U2>(__a2)) { }
 8004e44:	68fc      	ldr	r4, [r7, #12]
 8004e46:	68b8      	ldr	r0, [r7, #8]
 8004e48:	f7ff ffeb 	bl	8004e22 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004e4c:	4605      	mov	r5, r0
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff ff16 	bl	8004c80 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004e54:	4603      	mov	r3, r0
 8004e56:	461a      	mov	r2, r3
 8004e58:	4629      	mov	r1, r5
 8004e5a:	4620      	mov	r0, r4
 8004e5c:	f000 f82c 	bl	8004eb8 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4618      	mov	r0, r3
 8004e64:	3710      	adds	r7, #16
 8004e66:	46bd      	mov	sp, r7
 8004e68:	bdb0      	pop	{r4, r5, r7, pc}

08004e6a <_ZNKSt15__uniq_ptr_implI26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEE6_M_ptrEv>:
      pointer    _M_ptr() const { return std::get<0>(_M_t); }
 8004e6a:	b580      	push	{r7, lr}
 8004e6c:	b082      	sub	sp, #8
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	4618      	mov	r0, r3
 8004e76:	f000 f83d 	bl	8004ef4 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERT0_RSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 f85c 	bl	8004f4c <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>
 8004e94:	4603      	mov	r3, r0
 8004e96:	4618      	mov	r0, r3
 8004e98:	3708      	adds	r7, #8
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}

08004e9e <_ZSt3getILj1EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERSA_>:
    get(tuple<_Elements...>& __t) noexcept
 8004e9e:	b580      	push	{r7, lr}
 8004ea0:	b082      	sub	sp, #8
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f000 f830 	bl	8004f0e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	3708      	adds	r7, #8
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	bd80      	pop	{r7, pc}

08004eb8 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IRS1_JS5_EvEEOT_DpOT0_>:
        constexpr _Tuple_impl(_UHead&& __head, _UTail&&... __tail)
 8004eb8:	b590      	push	{r4, r7, lr}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	60f8      	str	r0, [r7, #12]
 8004ec0:	60b9      	str	r1, [r7, #8]
 8004ec2:	607a      	str	r2, [r7, #4]
	  _Base(std::forward<_UHead>(__head)) { }
 8004ec4:	68fc      	ldr	r4, [r7, #12]
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f7ff feda 	bl	8004c80 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4619      	mov	r1, r3
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f000 f828 	bl	8004f26 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	1d1c      	adds	r4, r3, #4
 8004eda:	68b8      	ldr	r0, [r7, #8]
 8004edc:	f7ff ffa1 	bl	8004e22 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	4619      	mov	r1, r3
 8004ee4:	4620      	mov	r0, r4
 8004ee6:	f000 f83f 	bl	8004f68 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd90      	pop	{r4, r7, pc}

08004ef4 <_ZSt3getILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKNSt13tuple_elementIXT_ESt5tupleIJDpT0_EEE4typeERKSA_>:

  /// Return a const reference to the ith element of a const tuple.
  template<std::size_t __i, typename... _Elements>
    constexpr const __tuple_element_t<__i, tuple<_Elements...>>&
    get(const tuple<_Elements...>& __t) noexcept
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b082      	sub	sp, #8
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
    { return std::__get_helper<__i>(__t); }
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f000 f843 	bl	8004f8a <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4618      	mov	r0, r3
 8004f08:	3708      	adds	r7, #8
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}

08004f0e <_ZSt12__get_helperILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEJEERT0_RSt11_Tuple_implIXT_EJS4_DpT1_EE>:
    __get_helper(_Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004f0e:	b580      	push	{r7, lr}
 8004f10:	b082      	sub	sp, #8
 8004f12:	af00      	add	r7, sp, #0
 8004f14:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f843 	bl	8004fa2 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEEC2IS3_EEOT_>:
        constexpr _Tuple_impl(_UHead&& __head)
 8004f26:	b590      	push	{r4, r7, lr}
 8004f28:	b083      	sub	sp, #12
 8004f2a:	af00      	add	r7, sp, #0
 8004f2c:	6078      	str	r0, [r7, #4]
 8004f2e:	6039      	str	r1, [r7, #0]
	: _Base(std::forward<_UHead>(__head)) { }
 8004f30:	687c      	ldr	r4, [r7, #4]
 8004f32:	6838      	ldr	r0, [r7, #0]
 8004f34:	f7ff fea4 	bl	8004c80 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4619      	mov	r1, r3
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f000 f83d 	bl	8004fbc <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4618      	mov	r0, r3
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	bd90      	pop	{r4, r7, pc}

08004f4c <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS6_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b082      	sub	sp, #8
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	3304      	adds	r3, #4
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 f840 	bl	8004fde <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>
 8004f5e:	4603      	mov	r3, r0
 8004f60:	4618      	mov	r0, r3
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EEC1IRS1_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
 8004f70:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004f72:	6838      	ldr	r0, [r7, #0]
 8004f74:	f7ff ff55 	bl	8004e22 <_ZSt7forwardIRP26TfLiteFullyConnectedParamsEOT_RNSt16remove_referenceIS3_E4typeE>
 8004f78:	4603      	mov	r3, r0
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <_ZSt12__get_helperILj0EP26TfLiteFullyConnectedParamsJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEERKT0_RKSt11_Tuple_implIXT_EJS6_DpT1_EE>:
    __get_helper(const _Tuple_impl<__i, _Head, _Tail...>& __t) noexcept
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b082      	sub	sp, #8
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
    { return _Tuple_impl<__i, _Head, _Tail...>::_M_head(__t); }
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f82e 	bl	8004ff4 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3708      	adds	r7, #8
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <_ZNSt11_Tuple_implILj1EJN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERS4_>:
      _M_head(_Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004fa2:	b580      	push	{r7, lr}
 8004fa4:	b082      	sub	sp, #8
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 f82f 	bl	8005010 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3708      	adds	r7, #8
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}

08004fbc <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EEC2IS3_EEOT_>:
        constexpr _Head_base(_UHead&& __h)
 8004fbc:	b580      	push	{r7, lr}
 8004fbe:	b082      	sub	sp, #8
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8004fc6:	6838      	ldr	r0, [r7, #0]
 8004fc8:	f7ff fe5a 	bl	8004c80 <_ZSt7forwardIN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEOT_RNSt16remove_referenceIS4_E4typeE>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6812      	ldr	r2, [r2, #0]
 8004fd2:	601a      	str	r2, [r3, #0]
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3708      	adds	r7, #8
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERS2_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8004fde:	b480      	push	{r7}
 8004fe0:	b083      	sub	sp, #12
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <_ZNSt11_Tuple_implILj0EJP26TfLiteFullyConnectedParamsN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterEEE7_M_headERKS6_>:
      _M_head(const _Tuple_impl& __t) noexcept { return _Base::_M_head(__t); }
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b082      	sub	sp, #8
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3304      	adds	r3, #4
 8005000:	4618      	mov	r0, r3
 8005002:	f000 f810 	bl	8005026 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>
 8005006:	4603      	mov	r3, r0
 8005008:	4618      	mov	r0, r3
 800500a:	3708      	adds	r7, #8
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}

08005010 <_ZNSt10_Head_baseILj1EN6tflite12_GLOBAL__N_124SafeBuiltinDataAllocator18BuiltinDataDeleterELb0EE7_M_headERS4_>:
      _M_head(_Head_base& __b) noexcept { return __b._M_head_impl; }
 8005010:	b480      	push	{r7}
 8005012:	b083      	sub	sp, #12
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	4618      	mov	r0, r3
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <_ZNSt10_Head_baseILj0EP26TfLiteFullyConnectedParamsLb0EE7_M_headERKS2_>:
      _M_head(const _Head_base& __b) noexcept { return __b._M_head_impl; }
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4618      	mov	r0, r3
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <_ZNK11flatbuffers6String5c_strEv>:
  const char *c_str() const { return reinterpret_cast<const char *>(Data()); }
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4618      	mov	r0, r3
 8005048:	f000 f8ca 	bl	80051e0 <_ZNK11flatbuffers6VectorIcE4DataEv>
 800504c:	4603      	mov	r3, r0
 800504e:	4618      	mov	r0, r3
 8005050:	3708      	adds	r7, #8
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
	...

08005058 <_ZN6tflite24EnumNamesBuiltinOperatorEv>:
inline const char * const *EnumNamesBuiltinOperator() {
 8005058:	b480      	push	{r7}
 800505a:	af00      	add	r7, sp, #0
  return names;
 800505c:	4b02      	ldr	r3, [pc, #8]	; (8005068 <_ZN6tflite24EnumNamesBuiltinOperatorEv+0x10>)
}
 800505e:	4618      	mov	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr
 8005068:	08011dec 	.word	0x08011dec

0800506c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>:
inline const char *EnumNameBuiltinOperator(BuiltinOperator e) {
 800506c:	b580      	push	{r7, lr}
 800506e:	b084      	sub	sp, #16
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	71fb      	strb	r3, [r7, #7]
  if (flatbuffers::IsOutRange(e, BuiltinOperator_ADD, BuiltinOperator_BROADCAST_TO)) return "";
 8005076:	2300      	movs	r3, #0
 8005078:	72bb      	strb	r3, [r7, #10]
 800507a:	2382      	movs	r3, #130	; 0x82
 800507c:	72fb      	strb	r3, [r7, #11]
 800507e:	f107 020b 	add.w	r2, r7, #11
 8005082:	f107 010a 	add.w	r1, r7, #10
 8005086:	1dfb      	adds	r3, r7, #7
 8005088:	4618      	mov	r0, r3
 800508a:	f000 f8b5 	bl	80051f8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x2c>
 8005094:	4b07      	ldr	r3, [pc, #28]	; (80050b4 <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x48>)
 8005096:	e008      	b.n	80050aa <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE+0x3e>
  const size_t index = static_cast<size_t>(e);
 8005098:	79fb      	ldrb	r3, [r7, #7]
 800509a:	60fb      	str	r3, [r7, #12]
  return EnumNamesBuiltinOperator()[index];
 800509c:	f7ff ffdc 	bl	8005058 <_ZN6tflite24EnumNamesBuiltinOperatorEv>
 80050a0:	4602      	mov	r2, r0
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	681b      	ldr	r3, [r3, #0]
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3710      	adds	r7, #16
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	0800fcc4 	.word	0x0800fcc4

080050b8 <_ZNK6tflite12OperatorCode11custom_codeEv>:
  const flatbuffers::String *custom_code() const {
 80050b8:	b580      	push	{r7, lr}
 80050ba:	b082      	sub	sp, #8
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_CUSTOM_CODE);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2106      	movs	r1, #6
 80050c4:	4618      	mov	r0, r3
 80050c6:	f000 f8b2 	bl	800522e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 80050ca:	4603      	mov	r3, r0
  }
 80050cc:	4618      	mov	r0, r3
 80050ce:	3708      	adds	r7, #8
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <_ZNK6tflite12OperatorCode7versionEv>:
  int32_t version() const {
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b082      	sub	sp, #8
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_VERSION, 1);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	2108      	movs	r1, #8
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff fc5b 	bl	800499e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 80050e8:	4603      	mov	r3, r0
  }
 80050ea:	4618      	mov	r0, r3
 80050ec:	3708      	adds	r7, #8
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
	...

080050f4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>:

namespace tflite {

TfLiteStatus GetRegistrationFromOpCode(
    const OperatorCode* opcode, const OpResolver& op_resolver,
    ErrorReporter* error_reporter, const TfLiteRegistration** registration) {
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b088      	sub	sp, #32
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	60f8      	str	r0, [r7, #12]
 80050fc:	60b9      	str	r1, [r7, #8]
 80050fe:	607a      	str	r2, [r7, #4]
 8005100:	603b      	str	r3, [r7, #0]
  TfLiteStatus status = kTfLiteOk;
 8005102:	2300      	movs	r3, #0
 8005104:	77fb      	strb	r3, [r7, #31]
  *registration = nullptr;
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2200      	movs	r2, #0
 800510a:	601a      	str	r2, [r3, #0]
  auto builtin_code = GetBuiltinCode(opcode);
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f007 f900 	bl	800c312 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 8005112:	4603      	mov	r3, r0
 8005114:	77bb      	strb	r3, [r7, #30]
  int version = opcode->version();
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f7ff ffdc 	bl	80050d4 <_ZNK6tflite12OperatorCode7versionEv>
 800511c:	61b8      	str	r0, [r7, #24]

  if (builtin_code > BuiltinOperator_MAX ||
 800511e:	7fbb      	ldrb	r3, [r7, #30]
 8005120:	2b82      	cmp	r3, #130	; 0x82
 8005122:	d908      	bls.n	8005136 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x42>
      builtin_code < BuiltinOperator_MIN) {
    TF_LITE_REPORT_ERROR(
 8005124:	7fbb      	ldrb	r3, [r7, #30]
 8005126:	461a      	mov	r2, r3
 8005128:	492a      	ldr	r1, [pc, #168]	; (80051d4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe0>)
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff f9ae 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Op builtin_code out of range: %d. Are you using old TFLite binary "
        "with newer model?",
        builtin_code);
    status = kTfLiteError;
 8005130:	2301      	movs	r3, #1
 8005132:	77fb      	strb	r3, [r7, #31]
 8005134:	e048      	b.n	80051c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else if (builtin_code != BuiltinOperator_CUSTOM) {
 8005136:	7fbb      	ldrb	r3, [r7, #30]
 8005138:	2b20      	cmp	r3, #32
 800513a:	d01a      	beq.n	8005172 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0x7e>
    *registration = op_resolver.FindOp(builtin_code, version);
 800513c:	68bb      	ldr	r3, [r7, #8]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	7fb9      	ldrb	r1, [r7, #30]
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	68b8      	ldr	r0, [r7, #8]
 8005148:	4798      	blx	r3
 800514a:	4602      	mov	r2, r0
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d137      	bne.n	80051c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      TF_LITE_REPORT_ERROR(
 8005158:	7fbb      	ldrb	r3, [r7, #30]
 800515a:	4618      	mov	r0, r3
 800515c:	f7ff ff86 	bl	800506c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8005160:	4602      	mov	r2, r0
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	491c      	ldr	r1, [pc, #112]	; (80051d8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe4>)
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f7ff f990 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          error_reporter,
          "Didn't find op for builtin opcode '%s' version '%d'\n",
          EnumNameBuiltinOperator(builtin_code), version);
      status = kTfLiteError;
 800516c:	2301      	movs	r3, #1
 800516e:	77fb      	strb	r3, [r7, #31]
 8005170:	e02a      	b.n	80051c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
    }
  } else if (!opcode->custom_code()) {
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7ff ffa0 	bl	80050b8 <_ZNK6tflite12OperatorCode11custom_codeEv>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	bf0c      	ite	eq
 800517e:	2301      	moveq	r3, #1
 8005180:	2300      	movne	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d006      	beq.n	8005196 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xa2>
    TF_LITE_REPORT_ERROR(
 8005188:	4914      	ldr	r1, [pc, #80]	; (80051dc <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xe8>)
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7ff f97e 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter,
        "Operator with CUSTOM builtin_code has no custom_code.\n");
    status = kTfLiteError;
 8005190:	2301      	movs	r3, #1
 8005192:	77fb      	strb	r3, [r7, #31]
 8005194:	e018      	b.n	80051c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
  } else {
    const char* name = opcode->custom_code()->c_str();
 8005196:	68f8      	ldr	r0, [r7, #12]
 8005198:	f7ff ff8e 	bl	80050b8 <_ZNK6tflite12OperatorCode11custom_codeEv>
 800519c:	4603      	mov	r3, r0
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff ff4c 	bl	800503c <_ZNK11flatbuffers6String5c_strEv>
 80051a4:	6178      	str	r0, [r7, #20]
    *registration = op_resolver.FindOp(name, version);
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	3304      	adds	r3, #4
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	6979      	ldr	r1, [r7, #20]
 80051b2:	68b8      	ldr	r0, [r7, #8]
 80051b4:	4798      	blx	r3
 80051b6:	4602      	mov	r2, r0
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	601a      	str	r2, [r3, #0]
    if (*registration == nullptr) {
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d101      	bne.n	80051c8 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration+0xd4>
      // Do not report error for unresolved custom op, we do the final check
      // while preparing ops.
      status = kTfLiteError;
 80051c4:	2301      	movs	r3, #1
 80051c6:	77fb      	strb	r3, [r7, #31]
    }
  }
  return status;
 80051c8:	7ffb      	ldrb	r3, [r7, #31]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3720      	adds	r7, #32
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
 80051d2:	bf00      	nop
 80051d4:	0800fcc8 	.word	0x0800fcc8
 80051d8:	0800fd1c 	.word	0x0800fd1c
 80051dc:	0800fd54 	.word	0x0800fd54

080051e0 <_ZNK11flatbuffers6VectorIcE4DataEv>:
  const uint8_t *Data() const {
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	3304      	adds	r3, #4
  }
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_>:
inline bool IsOutRange(const T &v, const T &low, const T &high) {
 80051f8:	b480      	push	{r7}
 80051fa:	b085      	sub	sp, #20
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
  return (v < low) || (high < v);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	781a      	ldrb	r2, [r3, #0]
 8005208:	68bb      	ldr	r3, [r7, #8]
 800520a:	781b      	ldrb	r3, [r3, #0]
 800520c:	429a      	cmp	r2, r3
 800520e:	d305      	bcc.n	800521c <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x24>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	781a      	ldrb	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	781b      	ldrb	r3, [r3, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d201      	bcs.n	8005220 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x28>
 800521c:	2301      	movs	r3, #1
 800521e:	e000      	b.n	8005222 <_ZN11flatbuffers10IsOutRangeIN6tflite15BuiltinOperatorEEEbRKT_S5_S5_+0x2a>
 8005220:	2300      	movs	r3, #0
}
 8005222:	4618      	mov	r0, r3
 8005224:	3714      	adds	r7, #20
 8005226:	46bd      	mov	sp, r7
 8005228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522c:	4770      	bx	lr

0800522e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 800522e:	b580      	push	{r7, lr}
 8005230:	b082      	sub	sp, #8
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
 8005236:	460b      	mov	r3, r1
 8005238:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 800523a:	887b      	ldrh	r3, [r7, #2]
 800523c:	4619      	mov	r1, r3
 800523e:	6878      	ldr	r0, [r7, #4]
 8005240:	f000 f805 	bl	800524e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8005244:	4603      	mov	r3, r0
  }
 8005246:	4618      	mov	r0, r3
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}

0800524e <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 800524e:	b580      	push	{r7, lr}
 8005250:	b084      	sub	sp, #16
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	460b      	mov	r3, r1
 8005258:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 800525a:	887b      	ldrh	r3, [r7, #2]
 800525c:	4619      	mov	r1, r3
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fb ff48 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 8005264:	4603      	mov	r3, r0
 8005266:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	89fb      	ldrh	r3, [r7, #14]
 800526c:	4413      	add	r3, r2
 800526e:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005270:	89fb      	ldrh	r3, [r7, #14]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d006      	beq.n	8005284 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x36>
 8005276:	68b8      	ldr	r0, [r7, #8]
 8005278:	f7fc fac7 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800527c:	4602      	mov	r2, r0
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	4413      	add	r3, r2
                        : nullptr;
 8005282:	e000      	b.n	8005286 <_ZN11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8005284:	2300      	movs	r3, #0
  }
 8005286:	4618      	mov	r0, r3
 8005288:	3710      	adds	r7, #16
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}

0800528e <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 800528e:	b580      	push	{r7, lr}
 8005290:	b082      	sub	sp, #8
 8005292:	af00      	add	r7, sp, #0
 8005294:	ed87 0a01 	vstr	s0, [r7, #4]
 8005298:	ed97 0a01 	vldr	s0, [r7, #4]
 800529c:	f007 f934 	bl	800c508 <roundf>
 80052a0:	eef0 7a40 	vmov.f32	s15, s0
 80052a4:	eeb0 0a67 	vmov.f32	s0, s15
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 80052ae:	b480      	push	{r7}
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80052b6:	4618      	mov	r0, r3
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 80052c0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 80052c4:	b088      	sub	sp, #32
 80052c6:	af00      	add	r7, sp, #0
 80052c8:	ed87 0b02 	vstr	d0, [r7, #8]
 80052cc:	6078      	str	r0, [r7, #4]
 80052ce:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 80052d0:	f04f 0200 	mov.w	r2, #0
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80052dc:	f7fb fc04 	bl	8000ae8 <__aeabi_dcmpeq>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d006      	beq.n	80052f4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x34>
    *quantized_multiplier = 0;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	601a      	str	r2, [r3, #0]
    *shift = 0;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	2200      	movs	r2, #0
 80052f0:	601a      	str	r2, [r3, #0]
 80052f2:	e06a      	b.n	80053ca <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 80052f4:	6838      	ldr	r0, [r7, #0]
 80052f6:	ed97 0b02 	vldr	d0, [r7, #8]
 80052fa:	f007 f885 	bl	800c408 <frexp>
 80052fe:	ed87 0b06 	vstr	d0, [r7, #24]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 8005302:	f04f 0200 	mov.w	r2, #0
 8005306:	4b33      	ldr	r3, [pc, #204]	; (80053d4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x114>)
 8005308:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800530c:	f7fb f984 	bl	8000618 <__aeabi_dmul>
 8005310:	4603      	mov	r3, r0
 8005312:	460c      	mov	r4, r1
 8005314:	ec44 3b17 	vmov	d7, r3, r4
 8005318:	eeb0 0a47 	vmov.f32	s0, s14
 800531c:	eef0 0a67 	vmov.f32	s1, s15
 8005320:	f000 f88c 	bl	800543c <_ZN6tflite11TfLiteRoundIdEET_S1_>
 8005324:	ec54 3b10 	vmov	r3, r4, d0
 8005328:	4618      	mov	r0, r3
 800532a:	4621      	mov	r1, r4
 800532c:	f7fb fcb4 	bl	8000c98 <__aeabi_d2lz>
 8005330:	4603      	mov	r3, r0
 8005332:	460c      	mov	r4, r1
 8005334:	e9c7 3404 	strd	r3, r4, [r7, #16]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 8005338:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800533c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8005340:	f04f 0200 	mov.w	r2, #0
 8005344:	4299      	cmp	r1, r3
 8005346:	eb72 0304 	sbcs.w	r3, r2, r4
 800534a:	da01      	bge.n	8005350 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x90>
 800534c:	f007 f902 	bl	800c554 <abort>
  if (q_fixed == (1ll << 31)) {
 8005350:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005354:	2c00      	cmp	r4, #0
 8005356:	bf08      	it	eq
 8005358:	f1b3 4f00 	cmpeq.w	r3, #2147483648	; 0x80000000
 800535c:	d114      	bne.n	8005388 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xc8>
    q_fixed /= 2;
 800535e:	e9d7 bc04 	ldrd	fp, ip, [r7, #16]
 8005362:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 8005366:	4611      	mov	r1, r2
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	eb1b 0301 	adds.w	r3, fp, r1
 8005370:	eb4c 0402 	adc.w	r4, ip, r2
 8005374:	1064      	asrs	r4, r4, #1
 8005376:	ea4f 0333 	mov.w	r3, r3, rrx
 800537a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    ++*shift;
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	1c5a      	adds	r2, r3, #1
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 8005388:	f7ff ff91 	bl	80052ae <_ZNSt14numeric_limitsIlE3maxEv>
 800538c:	4603      	mov	r3, r0
 800538e:	4619      	mov	r1, r3
 8005390:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8005394:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005398:	4299      	cmp	r1, r3
 800539a:	eb72 0304 	sbcs.w	r3, r2, r4
 800539e:	da01      	bge.n	80053a4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe4>
 80053a0:	f007 f8d8 	bl	800c554 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f113 0f1f 	cmn.w	r3, #31
 80053ac:	da08      	bge.n	80053c0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x100>
    *shift = 0;
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	2200      	movs	r2, #0
 80053b2:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 80053b4:	f04f 0300 	mov.w	r3, #0
 80053b8:	f04f 0400 	mov.w	r4, #0
 80053bc:	e9c7 3404 	strd	r3, r4, [r7, #16]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 80053c0:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 80053c4:	461a      	mov	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	601a      	str	r2, [r3, #0]
}
 80053ca:	3720      	adds	r7, #32
 80053cc:	46bd      	mov	sp, r7
 80053ce:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80053d2:	bf00      	nop
 80053d4:	41e00000 	.word	0x41e00000

080053d8 <_ZSt3maxIfERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	ed93 7a00 	vldr	s14, [r3]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	edd3 7a00 	vldr	s15, [r3]
 80053ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80053f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053f6:	d501      	bpl.n	80053fc <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	e000      	b.n	80053fe <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 80053fc:	687b      	ldr	r3, [r7, #4]
    }
 80053fe:	4618      	mov	r0, r3
 8005400:	370c      	adds	r7, #12
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	ed93 7a00 	vldr	s14, [r3]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	edd3 7a00 	vldr	s15, [r3]
 8005420:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005424:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005428:	d501      	bpl.n	800542e <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	e000      	b.n	8005430 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800542e:	687b      	ldr	r3, [r7, #4]
    }
 8005430:	4618      	mov	r0, r3
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	ed87 0b00 	vstr	d0, [r7]
 8005446:	ed97 0b00 	vldr	d0, [r7]
 800544a:	f007 f813 	bl	800c474 <round>
 800544e:	eeb0 7a40 	vmov.f32	s14, s0
 8005452:	eef0 7a60 	vmov.f32	s15, s1
 8005456:	eeb0 0a47 	vmov.f32	s0, s14
 800545a:	eef0 0a67 	vmov.f32	s1, s15
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	bd80      	pop	{r7, pc}

08005464 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 8005464:	b580      	push	{r7, lr}
 8005466:	b082      	sub	sp, #8
 8005468:	af00      	add	r7, sp, #0
 800546a:	ed87 0a01 	vstr	s0, [r7, #4]
 800546e:	ed97 0a01 	vldr	s0, [r7, #4]
 8005472:	f7ff ff0c 	bl	800528e <_ZSt5roundf>
 8005476:	eef0 7a40 	vmov.f32	s15, s0
 800547a:	eeb0 0a67 	vmov.f32	s0, s15
 800547e:	3708      	adds	r7, #8
 8005480:	46bd      	mov	sp, r7
 8005482:	bd80      	pop	{r7, pc}

08005484 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
 8005488:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 8005496:	b480      	push	{r7}
 8005498:	af00      	add	r7, sp, #0
 800549a:	237f      	movs	r3, #127	; 0x7f
 800549c:	4618      	mov	r0, r3
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr

080054a6 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 80054a6:	b480      	push	{r7}
 80054a8:	af00      	add	r7, sp, #0
 80054aa:	2300      	movs	r3, #0
 80054ac:	4618      	mov	r0, r3
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr

080054b6 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 80054b6:	b480      	push	{r7}
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	23ff      	movs	r3, #255	; 0xff
 80054bc:	4618      	mov	r0, r3
 80054be:	46bd      	mov	sp, r7
 80054c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c4:	4770      	bx	lr
	...

080054c8 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 80054c8:	b480      	push	{r7}
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	4b02      	ldr	r3, [pc, #8]	; (80054d8 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 80054ce:	4618      	mov	r0, r3
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	ffff8000 	.word	0xffff8000

080054dc <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 80054dc:	b480      	push	{r7}
 80054de:	af00      	add	r7, sp, #0
 80054e0:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80054e4:	4618      	mov	r0, r3
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr

080054ee <_ZSt3absd>:
// 2294. <cstdlib> should declare abs(double)

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 80054ee:	b490      	push	{r4, r7}
 80054f0:	b082      	sub	sp, #8
 80054f2:	af00      	add	r7, sp, #0
 80054f4:	ed87 0b00 	vstr	d0, [r7]
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	f022 4400 	bic.w	r4, r2, #2147483648	; 0x80000000
 8005500:	ec44 3b17 	vmov	d7, r3, r4
 8005504:	eeb0 0a47 	vmov.f32	s0, s14
 8005508:	eef0 0a67 	vmov.f32	s1, s15
 800550c:	3708      	adds	r7, #8
 800550e:	46bd      	mov	sp, r7
 8005510:	bc90      	pop	{r4, r7}
 8005512:	4770      	bx	lr

08005514 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>:

namespace {

// Assumes tensor_index is a valid index (in bounds)
inline TfLiteTensor* GetTensorAtIndex(const TfLiteContext* context,
                                      int tensor_index) {
 8005514:	b580      	push	{r7, lr}
 8005516:	b082      	sub	sp, #8
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  if (context->tensors != nullptr) {
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	689b      	ldr	r3, [r3, #8]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d005      	beq.n	8005532 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x1e>
    return &context->tensors[tensor_index];
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	019b      	lsls	r3, r3, #6
 800552e:	4413      	add	r3, r2
 8005530:	e005      	b.n	800553e <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti+0x2a>
  } else {
    return context->GetTensor(context, tensor_index);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005536:	6839      	ldr	r1, [r7, #0]
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	4798      	blx	r3
 800553c:	4603      	mov	r3, r0
  }
}
 800553e:	4618      	mov	r0, r3
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}

08005546 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>:
}

// Same as above but returns -1 for invalid inputs instead of status + logging
// error.
inline int ValidateTensorIndexing(const TfLiteContext* context, int index,
                                  int max_size, const int* tensor_indices) {
 8005546:	b480      	push	{r7}
 8005548:	b087      	sub	sp, #28
 800554a:	af00      	add	r7, sp, #0
 800554c:	60f8      	str	r0, [r7, #12]
 800554e:	60b9      	str	r1, [r7, #8]
 8005550:	607a      	str	r2, [r7, #4]
 8005552:	603b      	str	r3, [r7, #0]
  if (index >= 0 && index < max_size) {
 8005554:	68bb      	ldr	r3, [r7, #8]
 8005556:	2b00      	cmp	r3, #0
 8005558:	db0f      	blt.n	800557a <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	429a      	cmp	r2, r3
 8005560:	da0b      	bge.n	800557a <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
    const int tensor_index = tensor_indices[index];
 8005562:	68bb      	ldr	r3, [r7, #8]
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	4413      	add	r3, r2
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	617b      	str	r3, [r7, #20]
    if (tensor_index != kTfLiteOptionalTensor) {
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005574:	d001      	beq.n	800557a <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x34>
      return tensor_index;
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	e001      	b.n	800557e <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi+0x38>
    }
  }
  return -1;
 800557a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800557e:	4618      	mov	r0, r3
 8005580:	371c      	adds	r7, #28
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr

0800558a <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>:

inline TfLiteTensor* GetMutableInput(const TfLiteContext* context,
                                     const TfLiteNode* node, int index) {
 800558a:	b580      	push	{r7, lr}
 800558c:	b086      	sub	sp, #24
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->inputs->size, node->inputs->data);
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 800559a:	681a      	ldr	r2, [r3, #0]
      context, index, node->inputs->size, node->inputs->data);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	681b      	ldr	r3, [r3, #0]
  const int tensor_index = ValidateTensorIndexing(
 80055a0:	3304      	adds	r3, #4
      context, index, node->inputs->size, node->inputs->data);
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	68f8      	ldr	r0, [r7, #12]
 80055a6:	f7ff ffce 	bl	8005546 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 80055aa:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	da01      	bge.n	80055b6 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 80055b2:	2300      	movs	r3, #0
 80055b4:	e004      	b.n	80055c0 <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei+0x36>
  }
  return GetTensorAtIndex(context, tensor_index);
 80055b6:	6979      	ldr	r1, [r7, #20]
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	f7ff ffab 	bl	8005514 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 80055be:	4603      	mov	r3, r0
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3718      	adds	r7, #24
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
}

}  // anonymous namespace.

const TfLiteTensor* GetInput(const TfLiteContext* context,
                             const TfLiteNode* node, int index) {
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b084      	sub	sp, #16
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	60f8      	str	r0, [r7, #12]
 80055d0:	60b9      	str	r1, [r7, #8]
 80055d2:	607a      	str	r2, [r7, #4]
  return GetMutableInput(context, node, index);
 80055d4:	687a      	ldr	r2, [r7, #4]
 80055d6:	68b9      	ldr	r1, [r7, #8]
 80055d8:	68f8      	ldr	r0, [r7, #12]
 80055da:	f7ff ffd6 	bl	800558a <_ZN6tflite12_GLOBAL__N_115GetMutableInputEPK13TfLiteContextPK10TfLiteNodei>
 80055de:	4603      	mov	r3, r0
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
  TfLiteTensor* tensor = GetMutableInput(context, node, index);
  return tensor->is_variable ? tensor : nullptr;
}

TfLiteTensor* GetOutput(TfLiteContext* context, const TfLiteNode* node,
                        int index) {
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b086      	sub	sp, #24
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  const int tensor_index = ValidateTensorIndexing(
      context, index, node->outputs->size, node->outputs->data);
 80055f4:	68bb      	ldr	r3, [r7, #8]
 80055f6:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 80055f8:	681a      	ldr	r2, [r3, #0]
      context, index, node->outputs->size, node->outputs->data);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	685b      	ldr	r3, [r3, #4]
  const int tensor_index = ValidateTensorIndexing(
 80055fe:	3304      	adds	r3, #4
      context, index, node->outputs->size, node->outputs->data);
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f7ff ff9f 	bl	8005546 <_ZN6tflite12_GLOBAL__N_122ValidateTensorIndexingEPK13TfLiteContextiiPKi>
 8005608:	6178      	str	r0, [r7, #20]
  if (tensor_index < 0) {
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	2b00      	cmp	r3, #0
 800560e:	da01      	bge.n	8005614 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x2c>
    return nullptr;
 8005610:	2300      	movs	r3, #0
 8005612:	e004      	b.n	800561e <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei+0x36>
  }
  return GetTensorAtIndex(context, tensor_index);
 8005614:	6979      	ldr	r1, [r7, #20]
 8005616:	68f8      	ldr	r0, [r7, #12]
 8005618:	f7ff ff7c 	bl	8005514 <_ZN6tflite12_GLOBAL__N_116GetTensorAtIndexEPK13TfLiteContexti>
 800561c:	4603      	mov	r3, r0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}

08005626 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>:
  *tensor = GetTensorAtIndex(context, tensor_index);
  return kTfLiteOk;
}

const TfLiteTensor* GetOptionalInputTensor(const TfLiteContext* context,
                                           const TfLiteNode* node, int index) {
 8005626:	b580      	push	{r7, lr}
 8005628:	b084      	sub	sp, #16
 800562a:	af00      	add	r7, sp, #0
 800562c:	60f8      	str	r0, [r7, #12]
 800562e:	60b9      	str	r1, [r7, #8]
 8005630:	607a      	str	r2, [r7, #4]
  return GetInput(context, node, index);
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	68b9      	ldr	r1, [r7, #8]
 8005636:	68f8      	ldr	r0, [r7, #12]
 8005638:	f7ff ffc6 	bl	80055c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800563c:	4603      	mov	r3, r0
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
	...

08005648 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8005648:	b5b0      	push	{r4, r5, r7, lr}
 800564a:	b08e      	sub	sp, #56	; 0x38
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
 8005654:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8005656:	68bb      	ldr	r3, [r7, #8]
 8005658:	68db      	ldr	r3, [r3, #12]
 800565a:	4618      	mov	r0, r3
 800565c:	f7fa ff84 	bl	8000568 <__aeabi_f2d>
 8005660:	4604      	mov	r4, r0
 8005662:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4618      	mov	r0, r3
 800566a:	f7fa ff7d 	bl	8000568 <__aeabi_f2d>
 800566e:	4602      	mov	r2, r0
 8005670:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 8005672:	4620      	mov	r0, r4
 8005674:	4629      	mov	r1, r5
 8005676:	f7fa ffcf 	bl	8000618 <__aeabi_dmul>
 800567a:	4603      	mov	r3, r0
 800567c:	460c      	mov	r4, r1
 800567e:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  // The following conditions must be guaranteed by the training pipeline.
  if (bias) {
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d04b      	beq.n	8005720 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
    const double bias_scale = static_cast<double>(bias->params.scale);
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4618      	mov	r0, r3
 800568e:	f7fa ff6b 	bl	8000568 <__aeabi_f2d>
 8005692:	4603      	mov	r3, r0
 8005694:	460c      	mov	r4, r1
 8005696:	e9c7 3408 	strd	r3, r4, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800569a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800569e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80056a2:	f7fa fe01 	bl	80002a8 <__aeabi_dsub>
 80056a6:	4603      	mov	r3, r0
 80056a8:	460c      	mov	r4, r1
 80056aa:	ec44 3b17 	vmov	d7, r3, r4
 80056ae:	eeb0 0a47 	vmov.f32	s0, s14
 80056b2:	eef0 0a67 	vmov.f32	s1, s15
 80056b6:	f7ff ff1a 	bl	80054ee <_ZSt3absd>
 80056ba:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 80056be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	4618      	mov	r0, r3
 80056c4:	f7fa ff50 	bl	8000568 <__aeabi_f2d>
 80056c8:	4603      	mov	r3, r0
 80056ca:	460c      	mov	r4, r1
 80056cc:	e9c7 3404 	strd	r3, r4, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 80056d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80056d4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80056d8:	f7fb f8c8 	bl	800086c <__aeabi_ddiv>
 80056dc:	4603      	mov	r3, r0
 80056de:	460c      	mov	r4, r1
 80056e0:	4618      	mov	r0, r3
 80056e2:	4621      	mov	r1, r4
 80056e4:	2301      	movs	r3, #1
 80056e6:	461c      	mov	r4, r3
 80056e8:	a318      	add	r3, pc, #96	; (adr r3, 800574c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 80056ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ee:	f7fb fa0f 	bl	8000b10 <__aeabi_dcmple>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 80056f8:	2300      	movs	r3, #0
 80056fa:	461c      	mov	r4, r3
 80056fc:	b2e3      	uxtb	r3, r4
 80056fe:	f083 0301 	eor.w	r3, r3, #1
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b00      	cmp	r3, #0
 8005706:	d00b      	beq.n	8005720 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd8>
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	695c      	ldr	r4, [r3, #20]
 800570c:	68f8      	ldr	r0, [r7, #12]
 800570e:	4b0c      	ldr	r3, [pc, #48]	; (8005740 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	f240 1335 	movw	r3, #309	; 0x135
 8005716:	4a0b      	ldr	r2, [pc, #44]	; (8005744 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 8005718:	490b      	ldr	r1, [pc, #44]	; (8005748 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 800571a:	47a0      	blx	r4
 800571c:	2301      	movs	r3, #1
 800571e:	e008      	b.n	8005732 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 8005720:	68f8      	ldr	r0, [r7, #12]
                                          multiplier);
 8005722:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005724:	9300      	str	r3, [sp, #0]
 8005726:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	f000 f812 	bl	8005754 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 8005730:	4603      	mov	r3, r0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3730      	adds	r7, #48	; 0x30
 8005736:	46bd      	mov	sp, r7
 8005738:	bdb0      	pop	{r4, r5, r7, pc}
 800573a:	bf00      	nop
 800573c:	f3af 8000 	nop.w
 8005740:	0800ffac 	.word	0x0800ffac
 8005744:	0800fdec 	.word	0x0800fdec
 8005748:	0800fe98 	.word	0x0800fe98
 800574c:	47ae147b 	.word	0x47ae147b
 8005750:	3f947ae1 	.word	0x3f947ae1

08005754 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 8005754:	b590      	push	{r4, r7, lr}
 8005756:	b089      	sub	sp, #36	; 0x24
 8005758:	af02      	add	r7, sp, #8
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	607a      	str	r2, [r7, #4]
 8005760:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	ed93 7a03 	vldr	s14, [r3, #12]
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	edd3 7a03 	vldr	s15, [r3, #12]
 800576e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 8005772:	ee17 0a90 	vmov	r0, s15
 8005776:	f7fa fef7 	bl	8000568 <__aeabi_f2d>
 800577a:	4603      	mov	r3, r0
 800577c:	460c      	mov	r4, r1
 800577e:	e9c7 3404 	strd	r3, r4, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 8005782:	2301      	movs	r3, #1
 8005784:	461c      	mov	r4, r3
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8005792:	f7fb f9c7 	bl	8000b24 <__aeabi_dcmpge>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800579c:	2300      	movs	r3, #0
 800579e:	461c      	mov	r4, r3
 80057a0:	b2e3      	uxtb	r3, r4
 80057a2:	f083 0301 	eor.w	r3, r3, #1
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x70>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	695c      	ldr	r4, [r3, #20]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	4b10      	ldr	r3, [pc, #64]	; (80057f4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	f44f 73a1 	mov.w	r3, #322	; 0x142
 80057ba:	4a0f      	ldr	r2, [pc, #60]	; (80057f8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa4>)
 80057bc:	490f      	ldr	r1, [pc, #60]	; (80057fc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa8>)
 80057be:	47a0      	blx	r4
 80057c0:	2301      	movs	r3, #1
 80057c2:	e012      	b.n	80057ea <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x96>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	68db      	ldr	r3, [r3, #12]
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7fa fecd 	bl	8000568 <__aeabi_f2d>
 80057ce:	4603      	mov	r3, r0
 80057d0:	460c      	mov	r4, r1
 80057d2:	461a      	mov	r2, r3
 80057d4:	4623      	mov	r3, r4
 80057d6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80057da:	f7fb f847 	bl	800086c <__aeabi_ddiv>
 80057de:	4603      	mov	r3, r0
 80057e0:	460c      	mov	r4, r1
 80057e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80057e4:	e9c2 3400 	strd	r3, r4, [r2]

  return kTfLiteOk;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	371c      	adds	r7, #28
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd90      	pop	{r4, r7, pc}
 80057f2:	bf00      	nop
 80057f4:	0800ffd0 	.word	0x0800ffd0
 80057f8:	0800fdec 	.word	0x0800fdec
 80057fc:	0800fe98 	.word	0x0800fe98

08005800 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 8005800:	b580      	push	{r7, lr}
 8005802:	b082      	sub	sp, #8
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	ed87 0a00 	vstr	s0, [r7]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 8005812:	ed97 7a00 	vldr	s14, [r7]
 8005816:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800581a:	eeb0 0a66 	vmov.f32	s0, s13
 800581e:	f7ff fe21 	bl	8005464 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 8005822:	eef0 7a40 	vmov.f32	s15, s0
 8005826:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800582a:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	685b      	ldr	r3, [r3, #4]
  };
 8005832:	4413      	add	r3, r2
 8005834:	4618      	mov	r0, r3
 8005836:	3708      	adds	r7, #8
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 800583c:	b580      	push	{r7, lr}
 800583e:	b08e      	sub	sp, #56	; 0x38
 8005840:	af00      	add	r7, sp, #0
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	607a      	str	r2, [r7, #4]
 8005846:	603b      	str	r3, [r7, #0]
 8005848:	4603      	mov	r3, r0
 800584a:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	633b      	str	r3, [r7, #48]	; 0x30
  };
 8005858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585e:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b01      	cmp	r3, #1
 8005864:	d118      	bne.n	8005898 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 8005866:	f107 0314 	add.w	r3, r7, #20
 800586a:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 8005960 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800586e:	4618      	mov	r0, r3
 8005870:	f7ff ffc6 	bl	8005800 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005874:	4603      	mov	r3, r0
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	f107 021c 	add.w	r2, r7, #28
 800587c:	f107 0308 	add.w	r3, r7, #8
 8005880:	4611      	mov	r1, r2
 8005882:	4618      	mov	r0, r3
 8005884:	f000 f8d6 	bl	8005a34 <_ZSt3maxIlERKT_S2_S2_>
 8005888:	4603      	mov	r3, r0
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800588e:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005894:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 8005896:	e05f      	b.n	8005958 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	2b03      	cmp	r3, #3
 800589c:	d129      	bne.n	80058f2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 800589e:	f107 0314 	add.w	r3, r7, #20
 80058a2:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8005960 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff ffaa 	bl	8005800 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80058ac:	4603      	mov	r3, r0
 80058ae:	623b      	str	r3, [r7, #32]
 80058b0:	f107 0220 	add.w	r2, r7, #32
 80058b4:	f107 0308 	add.w	r3, r7, #8
 80058b8:	4611      	mov	r1, r2
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 f8ba 	bl	8005a34 <_ZSt3maxIlERKT_S2_S2_>
 80058c0:	4603      	mov	r3, r0
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058c6:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 80058c8:	f107 0314 	add.w	r3, r7, #20
 80058cc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff ff95 	bl	8005800 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 80058d6:	4603      	mov	r3, r0
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
 80058da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80058de:	1d3b      	adds	r3, r7, #4
 80058e0:	4611      	mov	r1, r2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 f892 	bl	8005a0c <_ZSt3minIlERKT_S2_S2_>
 80058e8:	4603      	mov	r3, r0
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058ee:	601a      	str	r2, [r3, #0]
}
 80058f0:	e032      	b.n	8005958 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	2b02      	cmp	r3, #2
 80058f6:	d129      	bne.n	800594c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 80058f8:	f107 0314 	add.w	r3, r7, #20
 80058fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8005900:	4618      	mov	r0, r3
 8005902:	f7ff ff7d 	bl	8005800 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005906:	4603      	mov	r3, r0
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28
 800590a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800590e:	f107 0308 	add.w	r3, r7, #8
 8005912:	4611      	mov	r1, r2
 8005914:	4618      	mov	r0, r3
 8005916:	f000 f88d 	bl	8005a34 <_ZSt3maxIlERKT_S2_S2_>
 800591a:	4603      	mov	r3, r0
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005920:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 8005922:	f107 0314 	add.w	r3, r7, #20
 8005926:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800592a:	4618      	mov	r0, r3
 800592c:	f7ff ff68 	bl	8005800 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 8005930:	4603      	mov	r3, r0
 8005932:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005934:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 8005938:	1d3b      	adds	r3, r7, #4
 800593a:	4611      	mov	r1, r2
 800593c:	4618      	mov	r0, r3
 800593e:	f000 f865 	bl	8005a0c <_ZSt3minIlERKT_S2_S2_>
 8005942:	4603      	mov	r3, r0
 8005944:	681a      	ldr	r2, [r3, #0]
 8005946:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005948:	601a      	str	r2, [r3, #0]
}
 800594a:	e005      	b.n	8005958 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 800594c:	68ba      	ldr	r2, [r7, #8]
 800594e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005950:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 8005952:	687a      	ldr	r2, [r7, #4]
 8005954:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005956:	601a      	str	r2, [r3, #0]
}
 8005958:	bf00      	nop
 800595a:	3738      	adds	r7, #56	; 0x38
 800595c:	46bd      	mov	sp, r7
 800595e:	bd80      	pop	{r7, pc}
 8005960:	00000000 	.word	0x00000000

08005964 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 8005964:	b590      	push	{r4, r7, lr}
 8005966:	b089      	sub	sp, #36	; 0x24
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	607a      	str	r2, [r7, #4]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	460b      	mov	r3, r1
 8005972:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	781b      	ldrb	r3, [r3, #0]
 8005980:	2b03      	cmp	r3, #3
 8005982:	d108      	bne.n	8005996 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 8005984:	f7ff fd8f 	bl	80054a6 <_ZNSt14numeric_limitsIhE3minEv>
 8005988:	4603      	mov	r3, r0
 800598a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800598c:	f7ff fd93 	bl	80054b6 <_ZNSt14numeric_limitsIhE3maxEv>
 8005990:	4603      	mov	r3, r0
 8005992:	613b      	str	r3, [r7, #16]
 8005994:	e025      	b.n	80059e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt8) {
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	781b      	ldrb	r3, [r3, #0]
 800599a:	2b09      	cmp	r3, #9
 800599c:	d108      	bne.n	80059b0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800599e:	f7ff fd71 	bl	8005484 <_ZNSt14numeric_limitsIaE3minEv>
 80059a2:	4603      	mov	r3, r0
 80059a4:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 80059a6:	f7ff fd76 	bl	8005496 <_ZNSt14numeric_limitsIaE3maxEv>
 80059aa:	4603      	mov	r3, r0
 80059ac:	613b      	str	r3, [r7, #16]
 80059ae:	e018      	b.n	80059e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else if (output->type == kTfLiteInt16) {
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	781b      	ldrb	r3, [r3, #0]
 80059b4:	2b07      	cmp	r3, #7
 80059b6:	d108      	bne.n	80059ca <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 80059b8:	f7ff fd86 	bl	80054c8 <_ZNSt14numeric_limitsIsE3minEv>
 80059bc:	4603      	mov	r3, r0
 80059be:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 80059c0:	f7ff fd8c 	bl	80054dc <_ZNSt14numeric_limitsIsE3maxEv>
 80059c4:	4603      	mov	r3, r0
 80059c6:	613b      	str	r3, [r7, #16]
 80059c8:	e00b      	b.n	80059e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7e>
  } else {
    TF_LITE_ENSURE(context, false);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	695c      	ldr	r4, [r3, #20]
 80059ce:	68f8      	ldr	r0, [r7, #12]
 80059d0:	4b0b      	ldr	r3, [pc, #44]	; (8005a00 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	f240 1375 	movw	r3, #373	; 0x175
 80059d8:	4a0a      	ldr	r2, [pc, #40]	; (8005a04 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 80059da:	490b      	ldr	r1, [pc, #44]	; (8005a08 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 80059dc:	47a0      	blx	r4
 80059de:	2301      	movs	r3, #1
 80059e0:	e00a      	b.n	80059f8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x94>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 80059e2:	7af8      	ldrb	r0, [r7, #11]
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	9301      	str	r3, [sp, #4]
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	9300      	str	r3, [sp, #0]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	693a      	ldr	r2, [r7, #16]
 80059f0:	6979      	ldr	r1, [r7, #20]
 80059f2:	f7ff ff23 	bl	800583c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	371c      	adds	r7, #28
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd90      	pop	{r4, r7, pc}
 8005a00:	0800ffec 	.word	0x0800ffec
 8005a04:	0800fdec 	.word	0x0800fdec
 8005a08:	0800fe98 	.word	0x0800fe98

08005a0c <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	da01      	bge.n	8005a26 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 8005a22:	683b      	ldr	r3, [r7, #0]
 8005a24:	e000      	b.n	8005a28 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 8005a26:	687b      	ldr	r3, [r7, #4]
    }
 8005a28:	4618      	mov	r0, r3
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
 8005a3c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	429a      	cmp	r2, r3
 8005a48:	da01      	bge.n	8005a4e <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	e000      	b.n	8005a50 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 8005a4e:	687b      	ldr	r3, [r7, #4]
    }
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <_ZNK6tflite6Tensor5shapeEv>:
  const flatbuffers::Vector<int32_t> *shape() const {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b082      	sub	sp, #8
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_SHAPE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2104      	movs	r1, #4
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fe ffb6 	bl	80049da <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005a6e:	4603      	mov	r3, r0
  }
 8005a70:	4618      	mov	r0, r3
 8005a72:	3708      	adds	r7, #8
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <_ZNK6tflite6Tensor4typeEv>:
  tflite::TensorType type() const {
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::TensorType>(GetField<int8_t>(VT_TYPE, 0));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2200      	movs	r2, #0
 8005a84:	2106      	movs	r1, #6
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fe ffb7 	bl	80049fa <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	b2db      	uxtb	r3, r3
  }
 8005a90:	4618      	mov	r0, r3
 8005a92:	3708      	adds	r7, #8
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32_t* dims_data) : size_(0) {
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 8005ac6:	687a      	ldr	r2, [r7, #4]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	68f8      	ldr	r0, [r7, #12]
 8005acc:	f000 f868 	bl	8005ba0 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <_ZN6tflite12RuntimeShapeD1Ev>:
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32_t)) ==
               0;
  }

  ~RuntimeShape() {
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b082      	sub	sp, #8
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2b05      	cmp	r3, #5
 8005ae8:	dd08      	ble.n	8005afc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d004      	beq.n	8005afc <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	685b      	ldr	r3, [r3, #4]
 8005af6:	4618      	mov	r0, r3
 8005af8:	f006 fc41 	bl	800c37e <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	4618      	mov	r0, r3
 8005b00:	3708      	adds	r7, #8
 8005b02:	46bd      	mov	sp, r7
 8005b04:	bd80      	pop	{r7, pc}

08005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32_t DimensionsCount() const { return size_; }
 8005b06:	b480      	push	{r7}
 8005b08:	b083      	sub	sp, #12
 8005b0a:	af00      	add	r7, sp, #0
 8005b0c:	6078      	str	r0, [r7, #4]
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4618      	mov	r0, r3
 8005b14:	370c      	adds	r7, #12
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr

08005b1e <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32_t* DimsData() {
 8005b1e:	b480      	push	{r7}
 8005b20:	b083      	sub	sp, #12
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	2b05      	cmp	r3, #5
 8005b2c:	dd02      	ble.n	8005b34 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	e001      	b.n	8005b38 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	3304      	adds	r3, #4
  }
 8005b38:	4618      	mov	r0, r3
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <_ZN6tflite12RuntimeShape6ResizeEi>:
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
  }
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32_t* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	2b05      	cmp	r3, #5
 8005b54:	dd08      	ble.n	8005b68 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	685b      	ldr	r3, [r3, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	685b      	ldr	r3, [r3, #4]
 8005b62:	4618      	mov	r0, r3
 8005b64:	f006 fc0b 	bl	800c37e <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	2b05      	cmp	r3, #5
 8005b72:	dd0e      	ble.n	8005b92 <_ZN6tflite12RuntimeShape6ResizeEi+0x4e>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else  // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32_t[dimensions_count];
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <_ZN6tflite12RuntimeShape6ResizeEi+0x58>)
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d801      	bhi.n	8005b80 <_ZN6tflite12RuntimeShape6ResizeEi+0x3c>
 8005b7c:	009b      	lsls	r3, r3, #2
 8005b7e:	e001      	b.n	8005b84 <_ZN6tflite12RuntimeShape6ResizeEi+0x40>
 8005b80:	f04f 33ff 	mov.w	r3, #4294967295
 8005b84:	4618      	mov	r0, r3
 8005b86:	f006 fbff 	bl	800c388 <_Znaj>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 8005b92:	bf00      	nop
 8005b94:	3708      	adds	r7, #8
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}
 8005b9a:	bf00      	nop
 8005b9c:	1ffffffe 	.word	0x1ffffffe

08005ba0 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32_t* dims_data) {
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 8005bac:	68b9      	ldr	r1, [r7, #8]
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f7ff ffc8 	bl	8005b44 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32_t* dst_dims = DimsData();
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f7ff ffb2 	bl	8005b1e <_ZN6tflite12RuntimeShape8DimsDataEv>
 8005bba:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32_t));
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	009b      	lsls	r3, r3, #2
 8005bc0:	461a      	mov	r2, r3
 8005bc2:	6879      	ldr	r1, [r7, #4]
 8005bc4:	6978      	ldr	r0, [r7, #20]
 8005bc6:	f006 fd3d 	bl	800c644 <memcpy>
  }
 8005bca:	bf00      	nop
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
                           : nullptr;
}

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b086      	sub	sp, #24
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d103      	bne.n	8005bea <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	f7ff ff58 	bl	8005a98 <_ZN6tflite12RuntimeShapeC1Ev>
 8005be8:	e00d      	b.n	8005c06 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 8005bf0:	697b      	ldr	r3, [r7, #20]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	3304      	adds	r3, #4
 8005bfa:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	6939      	ldr	r1, [r7, #16]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f7ff ff57 	bl	8005ab4 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <_ZN6tflite14AlignPointerUpEPhj>:
#include "tensorflow/lite/kernels/internal/tensor_ctypes.h"
#include "tensorflow/lite/schema/schema_generated.h"

namespace tflite {

uint8_t* AlignPointerUp(uint8_t* data, size_t alignment) {
 8005c0e:	b480      	push	{r7}
 8005c10:	b085      	sub	sp, #20
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	6078      	str	r0, [r7, #4]
 8005c16:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
      ((data_as_uintptr_t + (alignment - 1)) / alignment) * alignment);
 8005c1c:	683a      	ldr	r2, [r7, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	4413      	add	r3, r2
 8005c22:	1e5a      	subs	r2, r3, #1
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c2a:	683a      	ldr	r2, [r7, #0]
 8005c2c:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result = reinterpret_cast<uint8_t*>(
 8005c30:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8005c32:	68bb      	ldr	r3, [r7, #8]
}
 8005c34:	4618      	mov	r0, r3
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <_ZN6tflite16AlignPointerDownEPhj>:

uint8_t* AlignPointerDown(uint8_t* data, size_t alignment) {
 8005c40:	b480      	push	{r7}
 8005c42:	b085      	sub	sp, #20
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  std::uintptr_t data_as_uintptr_t = reinterpret_cast<std::uintptr_t>(data);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	60fb      	str	r3, [r7, #12]
  uint8_t* aligned_result =
      reinterpret_cast<uint8_t*>((data_as_uintptr_t / alignment) * alignment);
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c56:	683a      	ldr	r2, [r7, #0]
 8005c58:	fb02 f303 	mul.w	r3, r2, r3
  uint8_t* aligned_result =
 8005c5c:	60bb      	str	r3, [r7, #8]
  return aligned_result;
 8005c5e:	68bb      	ldr	r3, [r7, #8]
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <_ZN6tflite11AlignSizeUpEjj>:

size_t AlignSizeUp(size_t size, size_t alignment) {
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  size_t aligned_size = (((size + (alignment - 1)) / alignment) * alignment);
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	1e5a      	subs	r2, r3, #1
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	fb02 f303 	mul.w	r3, r2, r3
 8005c8a:	60fb      	str	r3, [r7, #12]
  return aligned_size;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr
	...

08005c9c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>:

TfLiteStatus TfLiteTypeSizeOf(TfLiteType type, size_t* size) {
 8005c9c:	b480      	push	{r7}
 8005c9e:	b083      	sub	sp, #12
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	6039      	str	r1, [r7, #0]
 8005ca6:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 8005ca8:	79fb      	ldrb	r3, [r7, #7]
 8005caa:	3b01      	subs	r3, #1
 8005cac:	2b0c      	cmp	r3, #12
 8005cae:	d845      	bhi.n	8005d3c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa0>
 8005cb0:	a201      	add	r2, pc, #4	; (adr r2, 8005cb8 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0x1c>)
 8005cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb6:	bf00      	nop
 8005cb8:	08005ced 	.word	0x08005ced
 8005cbc:	08005cfd 	.word	0x08005cfd
 8005cc0:	08005d05 	.word	0x08005d05
 8005cc4:	08005d15 	.word	0x08005d15
 8005cc8:	08005d3d 	.word	0x08005d3d
 8005ccc:	08005d25 	.word	0x08005d25
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005d2d 	.word	0x08005d2d
 8005cd8:	08005d0d 	.word	0x08005d0d
 8005cdc:	08005d3d 	.word	0x08005d3d
 8005ce0:	08005d3d 	.word	0x08005d3d
 8005ce4:	08005d35 	.word	0x08005d35
 8005ce8:	08005d1d 	.word	0x08005d1d
    case kTfLiteFloat32:
      *size = sizeof(float);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	2204      	movs	r2, #4
 8005cf0:	601a      	str	r2, [r3, #0]
      break;
 8005cf2:	e025      	b.n	8005d40 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt16:
      *size = sizeof(int16_t);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	601a      	str	r2, [r3, #0]
      break;
 8005cfa:	e021      	b.n	8005d40 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt32:
      *size = sizeof(int32_t);
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	2204      	movs	r2, #4
 8005d00:	601a      	str	r2, [r3, #0]
      break;
 8005d02:	e01d      	b.n	8005d40 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteUInt8:
      *size = sizeof(uint8_t);
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	2201      	movs	r2, #1
 8005d08:	601a      	str	r2, [r3, #0]
      break;
 8005d0a:	e019      	b.n	8005d40 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt8:
      *size = sizeof(int8_t);
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	601a      	str	r2, [r3, #0]
      break;
 8005d12:	e015      	b.n	8005d40 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteInt64:
      *size = sizeof(int64_t);
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	2208      	movs	r2, #8
 8005d18:	601a      	str	r2, [r3, #0]
      break;
 8005d1a:	e011      	b.n	8005d40 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteUInt64:
      *size = sizeof(uint64_t);
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	2208      	movs	r2, #8
 8005d20:	601a      	str	r2, [r3, #0]
      break;
 8005d22:	e00d      	b.n	8005d40 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteBool:
      *size = sizeof(bool);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	2201      	movs	r2, #1
 8005d28:	601a      	str	r2, [r3, #0]
      break;
 8005d2a:	e009      	b.n	8005d40 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteComplex64:
      *size = sizeof(float) * 2;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	2208      	movs	r2, #8
 8005d30:	601a      	str	r2, [r3, #0]
      break;
 8005d32:	e005      	b.n	8005d40 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    case kTfLiteComplex128:
      *size = sizeof(double) * 2;
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	2210      	movs	r2, #16
 8005d38:	601a      	str	r2, [r3, #0]
      break;
 8005d3a:	e001      	b.n	8005d40 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa4>
    default:
      return kTfLiteError;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	e000      	b.n	8005d42 <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj+0xa6>
  }
  return kTfLiteOk;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	370c      	adds	r7, #12
 8005d46:	46bd      	mov	sp, r7
 8005d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4c:	4770      	bx	lr
 8005d4e:	bf00      	nop

08005d50 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>:

TfLiteStatus BytesRequiredForTensor(const tflite::Tensor& flatbuffer_tensor,
                                    size_t* bytes, size_t* type_size,
                                    ErrorReporter* error_reporter) {
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
 8005d5c:	603b      	str	r3, [r7, #0]
  int element_count = 1;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	61fb      	str	r3, [r7, #28]
  // If flatbuffer_tensor.shape == nullptr, then flatbuffer_tensor is a scalar
  // so has 1 element.
  if (flatbuffer_tensor.shape() != nullptr) {
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f7ff fe7a 	bl	8005a5c <_ZNK6tflite6Tensor5shapeEv>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	bf14      	ite	ne
 8005d6e:	2301      	movne	r3, #1
 8005d70:	2300      	moveq	r3, #0
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d022      	beq.n	8005dbe <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8005d78:	2300      	movs	r3, #0
 8005d7a:	61bb      	str	r3, [r7, #24]
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f7ff fe6d 	bl	8005a5c <_ZNK6tflite6Tensor5shapeEv>
 8005d82:	4603      	mov	r3, r0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f000 f884 	bl	8005e92 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8005d8a:	4602      	mov	r2, r0
 8005d8c:	69bb      	ldr	r3, [r7, #24]
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	bf34      	ite	cc
 8005d92:	2301      	movcc	r3, #1
 8005d94:	2300      	movcs	r3, #0
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d010      	beq.n	8005dbe <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x6e>
      element_count *= flatbuffer_tensor.shape()->Get(n);
 8005d9c:	68f8      	ldr	r0, [r7, #12]
 8005d9e:	f7ff fe5d 	bl	8005a5c <_ZNK6tflite6Tensor5shapeEv>
 8005da2:	4603      	mov	r3, r0
 8005da4:	69b9      	ldr	r1, [r7, #24]
 8005da6:	4618      	mov	r0, r3
 8005da8:	f7fe fe56 	bl	8004a58 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8005dac:	4602      	mov	r2, r0
 8005dae:	69fb      	ldr	r3, [r7, #28]
 8005db0:	fb02 f303 	mul.w	r3, r2, r3
 8005db4:	61fb      	str	r3, [r7, #28]
    for (size_t n = 0; n < flatbuffer_tensor.shape()->Length(); ++n) {
 8005db6:	69bb      	ldr	r3, [r7, #24]
 8005db8:	3301      	adds	r3, #1
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	e7de      	b.n	8005d7c <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x2c>
    }
  }

  TfLiteType tf_lite_type;
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8005dbe:	68f8      	ldr	r0, [r7, #12]
 8005dc0:	f7ff fe5a 	bl	8005a78 <_ZNK6tflite6Tensor4typeEv>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f107 0315 	add.w	r3, r7, #21
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	f7fe fc90 	bl	80046f4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	75fb      	strb	r3, [r7, #23]
 8005dd8:	7dfb      	ldrb	r3, [r7, #23]
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d001      	beq.n	8005de2 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0x92>
 8005dde:	7dfb      	ldrb	r3, [r7, #23]
 8005de0:	e013      	b.n	8005e0a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
                                          &tf_lite_type, error_reporter));
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(tf_lite_type, type_size));
 8005de2:	7d7b      	ldrb	r3, [r7, #21]
 8005de4:	6879      	ldr	r1, [r7, #4]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff ff58 	bl	8005c9c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8005dec:	4603      	mov	r3, r0
 8005dee:	75bb      	strb	r3, [r7, #22]
 8005df0:	7dbb      	ldrb	r3, [r7, #22]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d001      	beq.n	8005dfa <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xaa>
 8005df6:	7dbb      	ldrb	r3, [r7, #22]
 8005df8:	e007      	b.n	8005e0a <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE+0xba>
  *bytes = element_count * (*type_size);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	69fa      	ldr	r2, [r7, #28]
 8005e00:	fb02 f203 	mul.w	r2, r2, r3
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005e08:	2300      	movs	r3, #0
}
 8005e0a:	4618      	mov	r0, r3
 8005e0c:	3720      	adds	r7, #32
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}

08005e12 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>:

TfLiteStatus TfLiteEvalTensorByteLength(const TfLiteEvalTensor* eval_tensor,
                                        size_t* out_bytes) {
 8005e12:	b580      	push	{r7, lr}
 8005e14:	b086      	sub	sp, #24
 8005e16:	af00      	add	r7, sp, #0
 8005e18:	6078      	str	r0, [r7, #4]
 8005e1a:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(out_bytes != nullptr);
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d101      	bne.n	8005e26 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x14>
 8005e22:	f006 fb97 	bl	800c554 <abort>

  int element_count = 1;
 8005e26:	2301      	movs	r3, #1
 8005e28:	617b      	str	r3, [r7, #20]
  // If eval_tensor->dims == nullptr, then tensor is a scalar so has 1 element.
  if (eval_tensor->dims != nullptr) {
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d015      	beq.n	8005e5e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8005e32:	2300      	movs	r3, #0
 8005e34:	613b      	str	r3, [r7, #16]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	da0d      	bge.n	8005e5e <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x4c>
      element_count *= eval_tensor->dims->data[n];
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685a      	ldr	r2, [r3, #4]
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	4413      	add	r3, r2
 8005e4c:	685a      	ldr	r2, [r3, #4]
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	fb02 f303 	mul.w	r3, r2, r3
 8005e54:	617b      	str	r3, [r7, #20]
    for (int n = 0; n < eval_tensor->dims->size; ++n) {
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	613b      	str	r3, [r7, #16]
 8005e5c:	e7eb      	b.n	8005e36 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x24>
    }
  }
  size_t type_size;
  TF_LITE_ENSURE_STATUS(TfLiteTypeSizeOf(eval_tensor->type, &type_size));
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	7a1b      	ldrb	r3, [r3, #8]
 8005e62:	f107 0208 	add.w	r2, r7, #8
 8005e66:	4611      	mov	r1, r2
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f7ff ff17 	bl	8005c9c <_ZN6tflite16TfLiteTypeSizeOfE10TfLiteTypePj>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	73fb      	strb	r3, [r7, #15]
 8005e72:	7bfb      	ldrb	r3, [r7, #15]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d001      	beq.n	8005e7c <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x6a>
 8005e78:	7bfb      	ldrb	r3, [r7, #15]
 8005e7a:	e006      	b.n	8005e8a <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj+0x78>
  *out_bytes = element_count * type_size;
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	fb02 f203 	mul.w	r2, r2, r3
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3718      	adds	r7, #24
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}

08005e92 <_ZNK11flatbuffers6VectorIlE6LengthEv>:
  uoffset_t Length() const { return size(); }
 8005e92:	b580      	push	{r7, lr}
 8005e94:	b082      	sub	sp, #8
 8005e96:	af00      	add	r7, sp, #0
 8005e98:	6078      	str	r0, [r7, #4]
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7fe fdcd 	bl	8004a3a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3708      	adds	r7, #8
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <_ZNK6tflite22QuantizationParameters5scaleEv>:
  const flatbuffers::Vector<float> *scale() const {
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b082      	sub	sp, #8
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<float> *>(VT_SCALE);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2108      	movs	r1, #8
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f001 fdf2 	bl	8007aa0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8005ebc:	4603      	mov	r3, r0
  }
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>:
  const flatbuffers::Vector<int64_t> *zero_point() const {
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int64_t> *>(VT_ZERO_POINT);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	210a      	movs	r1, #10
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f001 fdf4 	bl	8007ac0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8005ed8:	4603      	mov	r3, r0
  }
 8005eda:	4618      	mov	r0, r3
 8005edc:	3708      	adds	r7, #8
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	bd80      	pop	{r7, pc}

08005ee2 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>:
  int32_t quantized_dimension() const {
 8005ee2:	b580      	push	{r7, lr}
 8005ee4:	b082      	sub	sp, #8
 8005ee6:	af00      	add	r7, sp, #0
 8005ee8:	6078      	str	r0, [r7, #4]
    return GetField<int32_t>(VT_QUANTIZED_DIMENSION, 0);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2200      	movs	r2, #0
 8005eee:	2110      	movs	r1, #16
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f7fe fd54 	bl	800499e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 8005ef6:	4603      	mov	r3, r0
  }
 8005ef8:	4618      	mov	r0, r3
 8005efa:	3708      	adds	r7, #8
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}

08005f00 <_ZNK6tflite6Tensor6bufferEv>:
  uint32_t buffer() const {
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b082      	sub	sp, #8
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	2108      	movs	r1, #8
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f7fb fc97 	bl	8001842 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8005f14:	4603      	mov	r3, r0
  }
 8005f16:	4618      	mov	r0, r3
 8005f18:	3708      	adds	r7, #8
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}

08005f1e <_ZNK6tflite6Tensor12quantizationEv>:
  const tflite::QuantizationParameters *quantization() const {
 8005f1e:	b580      	push	{r7, lr}
 8005f20:	b082      	sub	sp, #8
 8005f22:	af00      	add	r7, sp, #0
 8005f24:	6078      	str	r0, [r7, #4]
    return GetPointer<const tflite::QuantizationParameters *>(VT_QUANTIZATION);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	210c      	movs	r1, #12
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f001 fdd8 	bl	8007ae0 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8005f30:	4603      	mov	r3, r0
  }
 8005f32:	4618      	mov	r0, r3
 8005f34:	3708      	adds	r7, #8
 8005f36:	46bd      	mov	sp, r7
 8005f38:	bd80      	pop	{r7, pc}

08005f3a <_ZNK6tflite6Tensor11is_variableEv>:
  bool is_variable() const {
 8005f3a:	b580      	push	{r7, lr}
 8005f3c:	b082      	sub	sp, #8
 8005f3e:	af00      	add	r7, sp, #0
 8005f40:	6078      	str	r0, [r7, #4]
    return GetField<uint8_t>(VT_IS_VARIABLE, 0) != 0;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	210e      	movs	r1, #14
 8005f48:	4618      	mov	r0, r3
 8005f4a:	f7fe fcf9 	bl	8004940 <_ZNK11flatbuffers5Table8GetFieldIhEET_tS2_>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	bf14      	ite	ne
 8005f54:	2301      	movne	r3, #1
 8005f56:	2300      	moveq	r3, #0
 8005f58:	b2db      	uxtb	r3, r3
  }
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}

08005f62 <_ZNK6tflite8Operator12opcode_indexEv>:
  uint32_t opcode_index() const {
 8005f62:	b580      	push	{r7, lr}
 8005f64:	b082      	sub	sp, #8
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_OPCODE_INDEX, 0);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	2104      	movs	r1, #4
 8005f70:	4618      	mov	r0, r3
 8005f72:	f7fb fc66 	bl	8001842 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8005f76:	4603      	mov	r3, r0
  }
 8005f78:	4618      	mov	r0, r3
 8005f7a:	3708      	adds	r7, #8
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}

08005f80 <_ZNK6tflite8Operator6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	b082      	sub	sp, #8
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2106      	movs	r1, #6
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f7fe fd24 	bl	80049da <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005f92:	4603      	mov	r3, r0
  }
 8005f94:	4618      	mov	r0, r3
 8005f96:	3708      	adds	r7, #8
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <_ZNK6tflite8Operator7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2108      	movs	r1, #8
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f7fe fd16 	bl	80049da <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8005fae:	4603      	mov	r3, r0
  }
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3708      	adds	r7, #8
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <_ZNK6tflite8Operator14custom_optionsEv>:
  const flatbuffers::Vector<uint8_t> *custom_options() const {
 8005fb8:	b580      	push	{r7, lr}
 8005fba:	b082      	sub	sp, #8
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CUSTOM_OPTIONS);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	210e      	movs	r1, #14
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f001 fd5b 	bl	8007a80 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8005fca:	4603      	mov	r3, r0
  }
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <_ZNK6tflite8SubGraph7tensorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *tensors() const {
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Tensor>> *>(VT_TENSORS);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2104      	movs	r1, #4
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	f001 fd8d 	bl	8007b00 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8005fe6:	4603      	mov	r3, r0
  }
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <_ZNK6tflite8SubGraph6inputsEv>:
  const flatbuffers::Vector<int32_t> *inputs() const {
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_INPUTS);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2106      	movs	r1, #6
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	f7fe fcec 	bl	80049da <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 8006002:	4603      	mov	r3, r0
  }
 8006004:	4618      	mov	r0, r3
 8006006:	3708      	adds	r7, #8
 8006008:	46bd      	mov	sp, r7
 800600a:	bd80      	pop	{r7, pc}

0800600c <_ZNK6tflite8SubGraph7outputsEv>:
  const flatbuffers::Vector<int32_t> *outputs() const {
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<int32_t> *>(VT_OUTPUTS);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2108      	movs	r1, #8
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fcde 	bl	80049da <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIlEEEET_t>
 800601e:	4603      	mov	r3, r0
  }
 8006020:	4618      	mov	r0, r3
 8006022:	3708      	adds	r7, #8
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}

08006028 <_ZNK6tflite8SubGraph9operatorsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *operators() const {
 8006028:	b580      	push	{r7, lr}
 800602a:	b082      	sub	sp, #8
 800602c:	af00      	add	r7, sp, #0
 800602e:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Operator>> *>(VT_OPERATORS);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	210a      	movs	r1, #10
 8006034:	4618      	mov	r0, r3
 8006036:	f001 fd73 	bl	8007b20 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 800603a:	4603      	mov	r3, r0
  }
 800603c:	4618      	mov	r0, r3
 800603e:	3708      	adds	r7, #8
 8006040:	46bd      	mov	sp, r7
 8006042:	bd80      	pop	{r7, pc}

08006044 <_ZNK6tflite6Buffer4dataEv>:
  const flatbuffers::Vector<uint8_t> *data() const {
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_DATA);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2104      	movs	r1, #4
 8006050:	4618      	mov	r0, r3
 8006052:	f001 fd15 	bl	8007a80 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8006056:	4603      	mov	r3, r0
  }
 8006058:	4618      	mov	r0, r3
 800605a:	3708      	adds	r7, #8
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}

08006060 <_ZNK6tflite8Metadata4nameEv>:
  const flatbuffers::String *name() const {
 8006060:	b580      	push	{r7, lr}
 8006062:	b082      	sub	sp, #8
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::String *>(VT_NAME);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2104      	movs	r1, #4
 800606c:	4618      	mov	r0, r3
 800606e:	f7ff f8de 	bl	800522e <_ZNK11flatbuffers5Table10GetPointerIPKNS_6StringEEET_t>
 8006072:	4603      	mov	r3, r0
  }
 8006074:	4618      	mov	r0, r3
 8006076:	3708      	adds	r7, #8
 8006078:	46bd      	mov	sp, r7
 800607a:	bd80      	pop	{r7, pc}

0800607c <_ZNK6tflite8Metadata6bufferEv>:
  uint32_t buffer() const {
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
    return GetField<uint32_t>(VT_BUFFER, 0);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	2106      	movs	r1, #6
 800608a:	4618      	mov	r0, r3
 800608c:	f7fb fbd9 	bl	8001842 <_ZNK11flatbuffers5Table8GetFieldImEET_tS2_>
 8006090:	4603      	mov	r3, r0
  }
 8006092:	4618      	mov	r0, r3
 8006094:	3708      	adds	r7, #8
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <_ZNK6tflite5Model14operator_codesEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *operator_codes() const {
 800609a:	b580      	push	{r7, lr}
 800609c:	b082      	sub	sp, #8
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::OperatorCode>> *>(VT_OPERATOR_CODES);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2106      	movs	r1, #6
 80060a6:	4618      	mov	r0, r3
 80060a8:	f001 fd4a 	bl	8007b40 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 80060ac:	4603      	mov	r3, r0
  }
 80060ae:	4618      	mov	r0, r3
 80060b0:	3708      	adds	r7, #8
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <_ZNK6tflite5Model9subgraphsEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *subgraphs() const {
 80060b6:	b580      	push	{r7, lr}
 80060b8:	b082      	sub	sp, #8
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::SubGraph>> *>(VT_SUBGRAPHS);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2108      	movs	r1, #8
 80060c2:	4618      	mov	r0, r3
 80060c4:	f001 fd4c 	bl	8007b60 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 80060c8:	4603      	mov	r3, r0
  }
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <_ZNK6tflite5Model7buffersEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *buffers() const {
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b082      	sub	sp, #8
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Buffer>> *>(VT_BUFFERS);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	210c      	movs	r1, #12
 80060de:	4618      	mov	r0, r3
 80060e0:	f001 fd4e 	bl	8007b80 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 80060e4:	4603      	mov	r3, r0
  }
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <_ZNK6tflite5Model8metadataEv>:
  const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *metadata() const {
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b082      	sub	sp, #8
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<tflite::Metadata>> *>(VT_METADATA);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2110      	movs	r1, #16
 80060fa:	4618      	mov	r0, r3
 80060fc:	f001 fd50 	bl	8007ba0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8006100:	4603      	mov	r3, r0
  }
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <_ZN6tflite20BuiltinDataAllocatorD1Ev>:

  virtual ~BuiltinDataAllocator() {}
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	4a04      	ldr	r2, [pc, #16]	; (8006128 <_ZN6tflite20BuiltinDataAllocatorD1Ev+0x1c>)
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	601a      	str	r2, [r3, #0]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4618      	mov	r0, r3
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	08012078 	.word	0x08012078

0800612c <_ZN6tflite20BuiltinDataAllocatorD0Ev>:
 800612c:	b580      	push	{r7, lr}
 800612e:	b082      	sub	sp, #8
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ffe9 	bl	800610c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 800613a:	2104      	movs	r1, #4
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f006 f925 	bl	800c38c <_ZdlPvj>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4618      	mov	r0, r3
 8006146:	3708      	adds	r7, #8
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <_ZN6tflite20BuiltinDataAllocatorC1Ev>:
class BuiltinDataAllocator {
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
 8006154:	4a04      	ldr	r2, [pc, #16]	; (8006168 <_ZN6tflite20BuiltinDataAllocatorC1Ev+0x1c>)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	601a      	str	r2, [r3, #0]
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4618      	mov	r0, r3
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr
 8006168:	08012078 	.word	0x08012078

0800616c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>:
constexpr char kOfflineMemAllocMetadata[] = "OfflineMemoryAllocation";
const TfLiteIntArray kZeroLengthIntArray = {};

class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 public:
  explicit MicroBuiltinDataAllocator(SimpleMemoryAllocator* memory_allocator)
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
      : memory_allocator_(memory_allocator) {}
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	4618      	mov	r0, r3
 800617a:	f7ff ffe7 	bl	800614c <_ZN6tflite20BuiltinDataAllocatorC1Ev>
 800617e:	4a05      	ldr	r2, [pc, #20]	; (8006194 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE+0x28>)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	601a      	str	r2, [r3, #0]
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	683a      	ldr	r2, [r7, #0]
 8006188:	605a      	str	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	4618      	mov	r0, r3
 800618e:	3708      	adds	r7, #8
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	08012020 	.word	0x08012020

08006198 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator8AllocateEjj>:

  void* Allocate(size_t size, size_t alignment_hint) override {
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
    return memory_allocator_->AllocateFromTail(size, alignment_hint);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6858      	ldr	r0, [r3, #4]
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	685b      	ldr	r3, [r3, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	330c      	adds	r3, #12
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	68b9      	ldr	r1, [r7, #8]
 80061b6:	4798      	blx	r3
 80061b8:	4603      	mov	r3, r0
  }
 80061ba:	4618      	mov	r0, r3
 80061bc:	3710      	adds	r7, #16
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}

080061c2 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocator10DeallocateEPv>:
  void Deallocate(void* data) override {
 80061c2:	b480      	push	{r7}
 80061c4:	b083      	sub	sp, #12
 80061c6:	af00      	add	r7, sp, #0
 80061c8:	6078      	str	r0, [r7, #4]
 80061ca:	6039      	str	r1, [r7, #0]
    // Do not deallocate, builtin data needs to be available for the life time
    // of the model.
  }
 80061cc:	bf00      	nop
 80061ce:	370c      	adds	r7, #12
 80061d0:	46bd      	mov	sp, r7
 80061d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d6:	4770      	bx	lr

080061d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>:
// A helper class to construct AllocationInfo array. This array contains the
// lifetime of tensors / scratch_buffer and will be used to calculate the memory
// plan. Methods need to be called in order from `Init`, `Add*`, to `Finish`.
class AllocationInfoBuilder {
 public:
  AllocationInfoBuilder(AllocationInfo* info, size_t tensor_count,
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
                        size_t scratch_buffer_count, ErrorReporter* reporter)
      : info_(info),
        tensor_count_(tensor_count),
        buffer_count_(scratch_buffer_count),
        reporter_(reporter) {}
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	687a      	ldr	r2, [r7, #4]
 80061f0:	605a      	str	r2, [r3, #4]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	683a      	ldr	r2, [r7, #0]
 80061f6:	609a      	str	r2, [r3, #8]
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	60da      	str	r2, [r3, #12]
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>:
  ErrorReporter* reporter_ = nullptr;
};

TfLiteStatus AllocationInfoBuilder::AddTensors(const SubGraph* subgraph,
                                               const int32_t* offline_offsets,
                                               TfLiteEvalTensor* eval_tensors) {
 800620c:	b580      	push	{r7, lr}
 800620e:	b09a      	sub	sp, #104	; 0x68
 8006210:	af02      	add	r7, sp, #8
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(eval_tensors != nullptr);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d101      	bne.n	8006224 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x18>
 8006220:	f006 f998 	bl	800c554 <abort>

  // Set up allocation info for all tensors.
  for (size_t i = 0; i < tensor_count_; ++i) {
 8006224:	2300      	movs	r3, #0
 8006226:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800622e:	429a      	cmp	r2, r3
 8006230:	d267      	bcs.n	8006302 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xf6>
    AllocationInfo* current = &info_[i];
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6819      	ldr	r1, [r3, #0]
 8006236:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006238:	4613      	mov	r3, r2
 800623a:	005b      	lsls	r3, r3, #1
 800623c:	4413      	add	r3, r2
 800623e:	00db      	lsls	r3, r3, #3
 8006240:	440b      	add	r3, r1
 8006242:	643b      	str	r3, [r7, #64]	; 0x40
    current->output_ptr = &(eval_tensors[i].data.data);
 8006244:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006246:	4613      	mov	r3, r2
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	461a      	mov	r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	4413      	add	r3, r2
 8006254:	461a      	mov	r2, r3
 8006256:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006258:	605a      	str	r2, [r3, #4]

    TF_LITE_ENSURE_STATUS(
 800625a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800625c:	4613      	mov	r3, r2
 800625e:	005b      	lsls	r3, r3, #1
 8006260:	4413      	add	r3, r2
 8006262:	009b      	lsls	r3, r3, #2
 8006264:	461a      	mov	r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	4413      	add	r3, r2
 800626a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800626c:	4611      	mov	r1, r2
 800626e:	4618      	mov	r0, r3
 8006270:	f7ff fdcf 	bl	8005e12 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8006274:	4603      	mov	r3, r0
 8006276:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800627a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800627e:	2b00      	cmp	r3, #0
 8006280:	d002      	beq.n	8006288 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x7c>
 8006282:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006286:	e170      	b.n	800656a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35e>
        TfLiteEvalTensorByteLength(&eval_tensors[i], &current->bytes));

    current->first_created = -1;
 8006288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800628a:	f04f 32ff 	mov.w	r2, #4294967295
 800628e:	609a      	str	r2, [r3, #8]
    current->last_used = -1;
 8006290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006292:	f04f 32ff 	mov.w	r2, #4294967295
 8006296:	60da      	str	r2, [r3, #12]
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 8006298:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800629a:	4613      	mov	r3, r2
 800629c:	005b      	lsls	r3, r3, #1
 800629e:	4413      	add	r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	461a      	mov	r2, r3
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	4413      	add	r3, r2
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d113      	bne.n	80062d6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
                                (!subgraph->tensors()->Get(i)->is_variable());
 80062ae:	68b8      	ldr	r0, [r7, #8]
 80062b0:	f7ff fe90 	bl	8005fd4 <_ZNK6tflite8SubGraph7tensorsEv>
 80062b4:	4603      	mov	r3, r0
 80062b6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80062b8:	4618      	mov	r0, r3
 80062ba:	f001 fd09 	bl	8007cd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80062be:	4603      	mov	r3, r0
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7ff fe3a 	bl	8005f3a <_ZNK6tflite6Tensor11is_variableEv>
 80062c6:	4603      	mov	r3, r0
 80062c8:	f083 0301 	eor.w	r3, r3, #1
 80062cc:	b2db      	uxtb	r3, r3
    current->needs_allocating = (eval_tensors[i].data.data == nullptr) &&
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xca>
 80062d2:	2201      	movs	r2, #1
 80062d4:	e000      	b.n	80062d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xcc>
 80062d6:	2200      	movs	r2, #0
 80062d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062da:	751a      	strb	r2, [r3, #20]
    if (offline_offsets) {
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d007      	beq.n	80062f2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xe6>
      current->offline_offset = offline_offsets[i];
 80062e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	4413      	add	r3, r2
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ee:	611a      	str	r2, [r3, #16]
 80062f0:	e003      	b.n	80062fa <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xee>
    } else {
      current->offline_offset = kOnlinePlannedBuffer;
 80062f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062f4:	f04f 32ff 	mov.w	r2, #4294967295
 80062f8:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < tensor_count_; ++i) {
 80062fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80062fc:	3301      	adds	r3, #1
 80062fe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006300:	e792      	b.n	8006228 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c>
    }
  }

  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8006302:	2300      	movs	r3, #0
 8006304:	65bb      	str	r3, [r7, #88]	; 0x58
 8006306:	68b8      	ldr	r0, [r7, #8]
 8006308:	f7ff fe72 	bl	8005ff0 <_ZNK6tflite8SubGraph6inputsEv>
 800630c:	4603      	mov	r3, r0
 800630e:	4618      	mov	r0, r3
 8006310:	f7fe fb93 	bl	8004a3a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006314:	4602      	mov	r2, r0
 8006316:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006318:	4293      	cmp	r3, r2
 800631a:	bf34      	ite	cc
 800631c:	2301      	movcc	r3, #1
 800631e:	2300      	movcs	r3, #0
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d018      	beq.n	8006358 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x14c>
    const int tensor_index = subgraph->inputs()->Get(i);
 8006326:	68b8      	ldr	r0, [r7, #8]
 8006328:	f7ff fe62 	bl	8005ff0 <_ZNK6tflite8SubGraph6inputsEv>
 800632c:	4603      	mov	r3, r0
 800632e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006330:	4618      	mov	r0, r3
 8006332:	f7fe fb91 	bl	8004a58 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006336:	6178      	str	r0, [r7, #20]
    AllocationInfo* current = &info_[tensor_index];
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6819      	ldr	r1, [r3, #0]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	4613      	mov	r3, r2
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	4413      	add	r3, r2
 8006344:	00db      	lsls	r3, r3, #3
 8006346:	440b      	add	r3, r1
 8006348:	613b      	str	r3, [r7, #16]
    current->first_created = 0;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	2200      	movs	r2, #0
 800634e:	609a      	str	r2, [r3, #8]
  for (size_t i = 0; i < subgraph->inputs()->size(); ++i) {
 8006350:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006352:	3301      	adds	r3, #1
 8006354:	65bb      	str	r3, [r7, #88]	; 0x58
 8006356:	e7d6      	b.n	8006306 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0xfa>
  }

  // Mark all outputs as persistent to the end of the invocation.
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 8006358:	2300      	movs	r3, #0
 800635a:	657b      	str	r3, [r7, #84]	; 0x54
 800635c:	68b8      	ldr	r0, [r7, #8]
 800635e:	f7ff fe55 	bl	800600c <_ZNK6tflite8SubGraph7outputsEv>
 8006362:	4603      	mov	r3, r0
 8006364:	4618      	mov	r0, r3
 8006366:	f7fe fb68 	bl	8004a3a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800636a:	4602      	mov	r2, r0
 800636c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800636e:	4293      	cmp	r3, r2
 8006370:	bf34      	ite	cc
 8006372:	2301      	movcc	r3, #1
 8006374:	2300      	movcs	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	2b00      	cmp	r3, #0
 800637a:	d021      	beq.n	80063c0 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1b4>
    const int tensor_index = subgraph->outputs()->Get(i);
 800637c:	68b8      	ldr	r0, [r7, #8]
 800637e:	f7ff fe45 	bl	800600c <_ZNK6tflite8SubGraph7outputsEv>
 8006382:	4603      	mov	r3, r0
 8006384:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006386:	4618      	mov	r0, r3
 8006388:	f7fe fb66 	bl	8004a58 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800638c:	61f8      	str	r0, [r7, #28]
    AllocationInfo* current = &info_[tensor_index];
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6819      	ldr	r1, [r3, #0]
 8006392:	69fa      	ldr	r2, [r7, #28]
 8006394:	4613      	mov	r3, r2
 8006396:	005b      	lsls	r3, r3, #1
 8006398:	4413      	add	r3, r2
 800639a:	00db      	lsls	r3, r3, #3
 800639c:	440b      	add	r3, r1
 800639e:	61bb      	str	r3, [r7, #24]
    current->last_used = subgraph->operators()->size() - 1;
 80063a0:	68b8      	ldr	r0, [r7, #8]
 80063a2:	f7ff fe41 	bl	8006028 <_ZNK6tflite8SubGraph9operatorsEv>
 80063a6:	4603      	mov	r3, r0
 80063a8:	4618      	mov	r0, r3
 80063aa:	f001 fcb7 	bl	8007d1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80063ae:	4603      	mov	r3, r0
 80063b0:	3b01      	subs	r3, #1
 80063b2:	461a      	mov	r2, r3
 80063b4:	69bb      	ldr	r3, [r7, #24]
 80063b6:	60da      	str	r2, [r3, #12]
  for (size_t i = 0; i < subgraph->outputs()->size(); ++i) {
 80063b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80063ba:	3301      	adds	r3, #1
 80063bc:	657b      	str	r3, [r7, #84]	; 0x54
 80063be:	e7cd      	b.n	800635c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x150>
  }

  // Figure out when the first and last use of each tensor is.
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 80063c0:	68b8      	ldr	r0, [r7, #8]
 80063c2:	f7ff fe31 	bl	8006028 <_ZNK6tflite8SubGraph9operatorsEv>
 80063c6:	4603      	mov	r3, r0
 80063c8:	4618      	mov	r0, r3
 80063ca:	f001 fca7 	bl	8007d1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80063ce:	4603      	mov	r3, r0
 80063d0:	3b01      	subs	r3, #1
 80063d2:	653b      	str	r3, [r7, #80]	; 0x50
 80063d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	db77      	blt.n	80064ca <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2be>
    const auto* op = subgraph->operators()->Get(i);
 80063da:	68b8      	ldr	r0, [r7, #8]
 80063dc:	f7ff fe24 	bl	8006028 <_ZNK6tflite8SubGraph9operatorsEv>
 80063e0:	4602      	mov	r2, r0
 80063e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063e4:	4619      	mov	r1, r3
 80063e6:	4610      	mov	r0, r2
 80063e8:	f001 fca6 	bl	8007d38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 80063ec:	63b8      	str	r0, [r7, #56]	; 0x38
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 80063ee:	2300      	movs	r3, #0
 80063f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80063f2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80063f4:	f7ff fdc4 	bl	8005f80 <_ZNK6tflite8Operator6inputsEv>
 80063f8:	4603      	mov	r3, r0
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fb1d 	bl	8004a3a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 8006400:	4602      	mov	r2, r0
 8006402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006404:	4293      	cmp	r3, r2
 8006406:	bf34      	ite	cc
 8006408:	2301      	movcc	r3, #1
 800640a:	2300      	movcs	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b00      	cmp	r3, #0
 8006410:	d022      	beq.n	8006458 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x24c>
      const int tensor_index = op->inputs()->Get(n);
 8006412:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006414:	f7ff fdb4 	bl	8005f80 <_ZNK6tflite8Operator6inputsEv>
 8006418:	4603      	mov	r3, r0
 800641a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800641c:	4618      	mov	r0, r3
 800641e:	f7fe fb1b 	bl	8004a58 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8006422:	62f8      	str	r0, [r7, #44]	; 0x2c
      AllocationInfo* current = &info_[tensor_index];
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6819      	ldr	r1, [r3, #0]
 8006428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800642a:	4613      	mov	r3, r2
 800642c:	005b      	lsls	r3, r3, #1
 800642e:	4413      	add	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	440b      	add	r3, r1
 8006434:	62bb      	str	r3, [r7, #40]	; 0x28
      if (((current->last_used == -1) || (current->last_used < i))) {
 8006436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006438:	68db      	ldr	r3, [r3, #12]
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d004      	beq.n	800644a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x23e>
 8006440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006446:	429a      	cmp	r2, r3
 8006448:	dd02      	ble.n	8006450 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x244>
        current->last_used = i;
 800644a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800644e:	60da      	str	r2, [r3, #12]
    for (size_t n = 0; n < op->inputs()->size(); ++n) {
 8006450:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006452:	3301      	adds	r3, #1
 8006454:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006456:	e7cc      	b.n	80063f2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1e6>
      }
    }
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 8006458:	2300      	movs	r3, #0
 800645a:	64bb      	str	r3, [r7, #72]	; 0x48
 800645c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800645e:	f7ff fd9d 	bl	8005f9c <_ZNK6tflite8Operator7outputsEv>
 8006462:	4603      	mov	r3, r0
 8006464:	4618      	mov	r0, r3
 8006466:	f7fe fae8 	bl	8004a3a <_ZNK11flatbuffers6VectorIlE4sizeEv>
 800646a:	4602      	mov	r2, r0
 800646c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800646e:	4293      	cmp	r3, r2
 8006470:	bf34      	ite	cc
 8006472:	2301      	movcc	r3, #1
 8006474:	2300      	movcs	r3, #0
 8006476:	b2db      	uxtb	r3, r3
 8006478:	2b00      	cmp	r3, #0
 800647a:	d022      	beq.n	80064c2 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2b6>
      const int tensor_index = op->outputs()->Get(n);
 800647c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800647e:	f7ff fd8d 	bl	8005f9c <_ZNK6tflite8Operator7outputsEv>
 8006482:	4603      	mov	r3, r0
 8006484:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006486:	4618      	mov	r0, r3
 8006488:	f7fe fae6 	bl	8004a58 <_ZNK11flatbuffers6VectorIlE3GetEm>
 800648c:	6378      	str	r0, [r7, #52]	; 0x34
      AllocationInfo* current = &info_[tensor_index];
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6819      	ldr	r1, [r3, #0]
 8006492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006494:	4613      	mov	r3, r2
 8006496:	005b      	lsls	r3, r3, #1
 8006498:	4413      	add	r3, r2
 800649a:	00db      	lsls	r3, r3, #3
 800649c:	440b      	add	r3, r1
 800649e:	633b      	str	r3, [r7, #48]	; 0x30
      if ((current->first_created == -1) || (current->first_created > i)) {
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	689b      	ldr	r3, [r3, #8]
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d004      	beq.n	80064b4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2a8>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064b0:	429a      	cmp	r2, r3
 80064b2:	da02      	bge.n	80064ba <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2ae>
        current->first_created = i;
 80064b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80064b8:	609a      	str	r2, [r3, #8]
    for (size_t n = 0; n < op->outputs()->size(); ++n) {
 80064ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064bc:	3301      	adds	r3, #1
 80064be:	64bb      	str	r3, [r7, #72]	; 0x48
 80064c0:	e7cc      	b.n	800645c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x250>
  for (int i = (subgraph->operators()->size() - 1); i >= 0; --i) {
 80064c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c4:	3b01      	subs	r3, #1
 80064c6:	653b      	str	r3, [r7, #80]	; 0x50
 80064c8:	e784      	b.n	80063d4 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x1c8>
      }
    }
  }

  // Sanity check for valid tensor lifetime.
  for (size_t i = 0; i < tensor_count_; ++i) {
 80064ca:	2300      	movs	r3, #0
 80064cc:	647b      	str	r3, [r7, #68]	; 0x44
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	685b      	ldr	r3, [r3, #4]
 80064d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d247      	bcs.n	8006568 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35c>
    AllocationInfo* current = &info_[i];
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	6819      	ldr	r1, [r3, #0]
 80064dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80064de:	4613      	mov	r3, r2
 80064e0:	005b      	lsls	r3, r3, #1
 80064e2:	4413      	add	r3, r2
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	440b      	add	r3, r1
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
    // Even though tensor appears to be read only it may still need to be
    // allocated.
    const bool appears_read_only =
        (current->first_created == -1) && (current->last_used != -1);
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064f2:	d106      	bne.n	8006502 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f6>
 80064f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064fc:	d001      	beq.n	8006502 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f6>
 80064fe:	2301      	movs	r3, #1
 8006500:	e000      	b.n	8006504 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2f8>
 8006502:	2300      	movs	r3, #0
    const bool appears_read_only =
 8006504:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    const bool has_partial_lifetime =
        !appears_read_only &&
 8006508:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800650c:	f083 0301 	eor.w	r3, r3, #1
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00b      	beq.n	800652e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x322>
        ((current->first_created == -1) || (current->last_used == -1));
 8006516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006518:	689b      	ldr	r3, [r3, #8]
        !appears_read_only &&
 800651a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651e:	d004      	beq.n	800652a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x31e>
        ((current->first_created == -1) || (current->last_used == -1));
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006528:	d101      	bne.n	800652e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x322>
        !appears_read_only &&
 800652a:	2301      	movs	r3, #1
 800652c:	e000      	b.n	8006530 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x324>
 800652e:	2300      	movs	r3, #0
    const bool has_partial_lifetime =
 8006530:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (has_partial_lifetime && current->needs_allocating) {
 8006534:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8006538:	2b00      	cmp	r3, #0
 800653a:	d011      	beq.n	8006560 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x354>
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	7d1b      	ldrb	r3, [r3, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00d      	beq.n	8006560 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x354>
      TF_LITE_REPORT_ERROR(
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	68d8      	ldr	r0, [r3, #12]
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654a:	689a      	ldr	r2, [r3, #8]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	68db      	ldr	r3, [r3, #12]
 8006550:	9300      	str	r3, [sp, #0]
 8006552:	4613      	mov	r3, r2
 8006554:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006556:	4907      	ldr	r1, [pc, #28]	; (8006574 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x368>)
 8006558:	f7fd ff98 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
          reporter_,
          "Logic error in memory planner, tensor %d has an invalid lifetime: "
          "first_created: %d, last_used: %d",
          i, current->first_created, current->last_used);
      return kTfLiteError;
 800655c:	2301      	movs	r3, #1
 800655e:	e004      	b.n	800656a <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x35e>
  for (size_t i = 0; i < tensor_count_; ++i) {
 8006560:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006562:	3301      	adds	r3, #1
 8006564:	647b      	str	r3, [r7, #68]	; 0x44
 8006566:	e7b2      	b.n	80064ce <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor+0x2c2>
    }
  }
  return kTfLiteOk;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3760      	adds	r7, #96	; 0x60
 800656e:	46bd      	mov	sp, r7
 8006570:	bd80      	pop	{r7, pc}
 8006572:	bf00      	nop
 8006574:	080107c8 	.word	0x080107c8

08006578 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>:
// |    2    | Number offsets following: n                                     |
// |    3    | Arena byte offset of tensor #0 or -1 to allocate at runtime     |
// |    4    | Arena byte offset of tensor #1 or -1 to allocate at runtime     |
// | 3+(n-1) | Arena byte offset of tensor #(n-1) or -1 to allocate at runtime |
TfLiteStatus AllocationInfoBuilder::GetOfflinePlannedOffsets(
    const Model* model, const int32_t** offline_planner_offsets) {
 8006578:	b580      	push	{r7, lr}
 800657a:	b08c      	sub	sp, #48	; 0x30
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  if (model->metadata()) {
 8006584:	68b8      	ldr	r0, [r7, #8]
 8006586:	f7ff fdb2 	bl	80060ee <_ZNK6tflite5Model8metadataEv>
 800658a:	4603      	mov	r3, r0
 800658c:	2b00      	cmp	r3, #0
 800658e:	bf14      	ite	ne
 8006590:	2301      	movne	r3, #1
 8006592:	2300      	moveq	r3, #0
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d060      	beq.n	800665c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 800659a:	2300      	movs	r3, #0
 800659c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800659e:	68b8      	ldr	r0, [r7, #8]
 80065a0:	f7ff fda5 	bl	80060ee <_ZNK6tflite5Model8metadataEv>
 80065a4:	4603      	mov	r3, r0
 80065a6:	4618      	mov	r0, r3
 80065a8:	f001 fc88 	bl	8007ebc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 80065ac:	4602      	mov	r2, r0
 80065ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b0:	4293      	cmp	r3, r2
 80065b2:	bf34      	ite	cc
 80065b4:	2301      	movcc	r3, #1
 80065b6:	2300      	movcs	r3, #0
 80065b8:	b2db      	uxtb	r3, r3
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d04e      	beq.n	800665c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe4>
      auto metadata = model->metadata()->Get(i);
 80065be:	68b8      	ldr	r0, [r7, #8]
 80065c0:	f7ff fd95 	bl	80060ee <_ZNK6tflite5Model8metadataEv>
 80065c4:	4603      	mov	r3, r0
 80065c6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065c8:	4618      	mov	r0, r3
 80065ca:	f001 fc85 	bl	8007ed8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>
 80065ce:	62b8      	str	r0, [r7, #40]	; 0x28
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80065d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80065d2:	f7ff fd45 	bl	8006060 <_ZNK6tflite8Metadata4nameEv>
 80065d6:	4603      	mov	r3, r0
 80065d8:	4618      	mov	r0, r3
 80065da:	f7fe fd2f 	bl	800503c <_ZNK11flatbuffers6String5c_strEv>
 80065de:	4603      	mov	r3, r0
 80065e0:	2217      	movs	r2, #23
 80065e2:	4921      	ldr	r1, [pc, #132]	; (8006668 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf0>)
 80065e4:	4618      	mov	r0, r3
 80065e6:	f006 ff11 	bl	800d40c <strncmp>
 80065ea:	4603      	mov	r3, r0
                  strlen(kOfflineMemAllocMetadata)) == 0) {
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	bf0c      	ite	eq
 80065f0:	2301      	moveq	r3, #1
 80065f2:	2300      	movne	r3, #0
 80065f4:	b2db      	uxtb	r3, r3
      if (strncmp(metadata->name()->c_str(), kOfflineMemAllocMetadata,
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d02c      	beq.n	8006654 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
        const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers =
            model->buffers();
 80065fa:	68b8      	ldr	r0, [r7, #8]
 80065fc:	f7ff fd69 	bl	80060d2 <_ZNK6tflite5Model7buffersEv>
 8006600:	6278      	str	r0, [r7, #36]	; 0x24
        auto* buffer = (*buffers)[metadata->buffer()];
 8006602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006604:	f7ff fd3a 	bl	800607c <_ZNK6tflite8Metadata6bufferEv>
 8006608:	4603      	mov	r3, r0
 800660a:	4619      	mov	r1, r3
 800660c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800660e:	f001 fc97 	bl	8007f40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 8006612:	6238      	str	r0, [r7, #32]
        auto* array = buffer->data();
 8006614:	6a38      	ldr	r0, [r7, #32]
 8006616:	f7ff fd15 	bl	8006044 <_ZNK6tflite6Buffer4dataEv>
 800661a:	61f8      	str	r0, [r7, #28]
        const uint32_t* metadata_buffer =
            reinterpret_cast<const uint32_t*>(array->data());
 800661c:	69f8      	ldr	r0, [r7, #28]
 800661e:	f001 fc9d 	bl	8007f5c <_ZNK11flatbuffers6VectorIhE4dataEv>
 8006622:	61b8      	str	r0, [r7, #24]
        const size_t nbr_tensors = static_cast<size_t>(metadata_buffer[2]);
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	3308      	adds	r3, #8
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	617b      	str	r3, [r7, #20]
        *offline_planner_offsets =
            reinterpret_cast<const int32_t*>(&metadata_buffer[3]);
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	f103 020c 	add.w	r2, r3, #12
        *offline_planner_offsets =
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]

        if (tensor_count_ != nbr_tensors) {
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	429a      	cmp	r2, r3
 800663e:	d009      	beq.n	8006654 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xdc>
          TF_LITE_REPORT_ERROR(reporter_,
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68d8      	ldr	r0, [r3, #12]
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	4908      	ldr	r1, [pc, #32]	; (800666c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xf4>)
 800664c:	f7fd ff1e 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                               "Nbr of offline buffer offsets (%d) in metadata "
                               "not equal nbr tensors (%d)\n",
                               nbr_tensors, tensor_count_);
          return kTfLiteError;
 8006650:	2301      	movs	r3, #1
 8006652:	e004      	b.n	800665e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0xe6>
    for (size_t i = 0; i < model->metadata()->size(); ++i) {
 8006654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006656:	3301      	adds	r3, #1
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800665a:	e7a0      	b.n	800659e <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl+0x26>
        }
      }
    }
  }
  return kTfLiteOk;
 800665c:	2300      	movs	r3, #0
}
 800665e:	4618      	mov	r0, r3
 8006660:	3730      	adds	r7, #48	; 0x30
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	08011ffc 	.word	0x08011ffc
 800666c:	0801077c 	.word	0x0801077c

08006670 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>:

TfLiteStatus AllocationInfoBuilder::AddScratchBuffers(
    internal::ScratchBufferRequest* scratch_buffer_requests,
    ScratchBufferHandle* scratch_buffer_handles) {
 8006670:	b480      	push	{r7}
 8006672:	b089      	sub	sp, #36	; 0x24
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
  // Set up allocation info for buffers.
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	61fb      	str	r3, [r7, #28]
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	4413      	add	r3, r2
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	429a      	cmp	r2, r3
 8006690:	d232      	bcs.n	80066f8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x88>
    internal::ScratchBufferRequest* current_request =
        &(scratch_buffer_requests[i - tensor_count_]);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	69fa      	ldr	r2, [r7, #28]
 8006698:	1ad3      	subs	r3, r2, r3
 800669a:	00db      	lsls	r3, r3, #3
    internal::ScratchBufferRequest* current_request =
 800669c:	68ba      	ldr	r2, [r7, #8]
 800669e:	4413      	add	r3, r2
 80066a0:	61bb      	str	r3, [r7, #24]
    ScratchBufferHandle* current_handle =
        &(scratch_buffer_handles[i - tensor_count_]);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	69fa      	ldr	r2, [r7, #28]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	009b      	lsls	r3, r3, #2
    ScratchBufferHandle* current_handle =
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	4413      	add	r3, r2
 80066b0:	617b      	str	r3, [r7, #20]

    AllocationInfo* current = &info_[i];
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6819      	ldr	r1, [r3, #0]
 80066b6:	69fa      	ldr	r2, [r7, #28]
 80066b8:	4613      	mov	r3, r2
 80066ba:	005b      	lsls	r3, r3, #1
 80066bc:	4413      	add	r3, r2
 80066be:	00db      	lsls	r3, r3, #3
 80066c0:	440b      	add	r3, r1
 80066c2:	613b      	str	r3, [r7, #16]
    current->output_ptr = reinterpret_cast<void**>(&current_handle->data);
 80066c4:	697a      	ldr	r2, [r7, #20]
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	605a      	str	r2, [r3, #4]
    current->bytes = current_request->bytes;
 80066ca:	69bb      	ldr	r3, [r7, #24]
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	601a      	str	r2, [r3, #0]
    current->first_created = current_request->node_idx;
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	609a      	str	r2, [r3, #8]
    current->last_used = current_request->node_idx;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	693b      	ldr	r3, [r7, #16]
 80066e0:	60da      	str	r2, [r3, #12]
    current->offline_offset = kOnlinePlannedBuffer;
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f04f 32ff 	mov.w	r2, #4294967295
 80066e8:	611a      	str	r2, [r3, #16]
    current->needs_allocating = true;
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	2201      	movs	r2, #1
 80066ee:	751a      	strb	r2, [r3, #20]
  for (size_t i = tensor_count_; i < tensor_count_ + buffer_count_; ++i) {
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	3301      	adds	r3, #1
 80066f4:	61fb      	str	r3, [r7, #28]
 80066f6:	e7c4      	b.n	8006682 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE+0x12>
  }
  return kTfLiteOk;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3724      	adds	r7, #36	; 0x24
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>:

TfLiteStatus CreatePlan(ErrorReporter* error_reporter,
                        GreedyMemoryPlanner* planner,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 8006706:	b590      	push	{r4, r7, lr}
 8006708:	b08b      	sub	sp, #44	; 0x2c
 800670a:	af02      	add	r7, sp, #8
 800670c:	60f8      	str	r0, [r7, #12]
 800670e:	60b9      	str	r1, [r7, #8]
 8006710:	607a      	str	r2, [r7, #4]
 8006712:	603b      	str	r3, [r7, #0]
  // Add the tensors to our allocation plan.
  for (size_t i = 0; i < allocation_info_size; ++i) {
 8006714:	2300      	movs	r3, #0
 8006716:	61fb      	str	r3, [r7, #28]
 8006718:	69fa      	ldr	r2, [r7, #28]
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d247      	bcs.n	80067b0 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xaa>
    const AllocationInfo* current = &allocation_info[i];
 8006720:	69fa      	ldr	r2, [r7, #28]
 8006722:	4613      	mov	r3, r2
 8006724:	005b      	lsls	r3, r3, #1
 8006726:	4413      	add	r3, r2
 8006728:	00db      	lsls	r3, r3, #3
 800672a:	461a      	mov	r2, r3
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	4413      	add	r3, r2
 8006730:	61bb      	str	r3, [r7, #24]
    if (current->needs_allocating) {
 8006732:	69bb      	ldr	r3, [r7, #24]
 8006734:	7d1b      	ldrb	r3, [r3, #20]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d036      	beq.n	80067a8 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
      size_t aligned_bytes_required =
          AlignSizeUp(current->bytes, kBufferAlignment);
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	2110      	movs	r1, #16
 8006740:	4618      	mov	r0, r3
 8006742:	f7ff fa93 	bl	8005c6c <_ZN6tflite11AlignSizeUpEjj>
 8006746:	6178      	str	r0, [r7, #20]
      if (current->offline_offset == kOnlinePlannedBuffer) {
 8006748:	69bb      	ldr	r3, [r7, #24]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006750:	d114      	bne.n	800677c <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x76>
        TF_LITE_ENSURE_STATUS(
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	3308      	adds	r3, #8
 8006758:	681c      	ldr	r4, [r3, #0]
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	6899      	ldr	r1, [r3, #8]
 8006760:	69bb      	ldr	r3, [r7, #24]
 8006762:	68db      	ldr	r3, [r3, #12]
 8006764:	9300      	str	r3, [sp, #0]
 8006766:	460b      	mov	r3, r1
 8006768:	68f9      	ldr	r1, [r7, #12]
 800676a:	68b8      	ldr	r0, [r7, #8]
 800676c:	47a0      	blx	r4
 800676e:	4603      	mov	r3, r0
 8006770:	74bb      	strb	r3, [r7, #18]
 8006772:	7cbb      	ldrb	r3, [r7, #18]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d017      	beq.n	80067a8 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 8006778:	7cbb      	ldrb	r3, [r7, #18]
 800677a:	e01a      	b.n	80067b2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
            planner->AddBuffer(error_reporter, aligned_bytes_required,
                               current->first_created, current->last_used));
      } else {
        TF_LITE_ENSURE_STATUS(planner->AddBuffer(
 800677c:	6979      	ldr	r1, [r7, #20]
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	6898      	ldr	r0, [r3, #8]
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	69ba      	ldr	r2, [r7, #24]
 8006788:	6912      	ldr	r2, [r2, #16]
 800678a:	9201      	str	r2, [sp, #4]
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	4603      	mov	r3, r0
 8006790:	460a      	mov	r2, r1
 8006792:	68f9      	ldr	r1, [r7, #12]
 8006794:	68b8      	ldr	r0, [r7, #8]
 8006796:	f005 fb15 	bl	800bdc4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>
 800679a:	4603      	mov	r3, r0
 800679c:	74fb      	strb	r3, [r7, #19]
 800679e:	7cfb      	ldrb	r3, [r7, #19]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d001      	beq.n	80067a8 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xa2>
 80067a4:	7cfb      	ldrb	r3, [r7, #19]
 80067a6:	e004      	b.n	80067b2 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0xac>
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80067a8:	69fb      	ldr	r3, [r7, #28]
 80067aa:	3301      	adds	r3, #1
 80067ac:	61fb      	str	r3, [r7, #28]
 80067ae:	e7b3      	b.n	8006718 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj+0x12>
            error_reporter, aligned_bytes_required, current->first_created,
            current->last_used, current->offline_offset));
      }
    }
  }
  return kTfLiteOk;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3724      	adds	r7, #36	; 0x24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd90      	pop	{r4, r7, pc}

080067ba <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>:

TfLiteStatus CommitPlan(ErrorReporter* error_reporter, MemoryPlanner* planner,
                        uint8_t* starting_point,
                        const AllocationInfo* allocation_info,
                        size_t allocation_info_size) {
 80067ba:	b590      	push	{r4, r7, lr}
 80067bc:	b08b      	sub	sp, #44	; 0x2c
 80067be:	af00      	add	r7, sp, #0
 80067c0:	60f8      	str	r0, [r7, #12]
 80067c2:	60b9      	str	r1, [r7, #8]
 80067c4:	607a      	str	r2, [r7, #4]
 80067c6:	603b      	str	r3, [r7, #0]
  // Figure out the actual memory addresses for each buffer, based on the plan.
  int planner_index = 0;
 80067c8:	2300      	movs	r3, #0
 80067ca:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 80067cc:	2300      	movs	r3, #0
 80067ce:	623b      	str	r3, [r7, #32]
 80067d0:	6a3a      	ldr	r2, [r7, #32]
 80067d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d22e      	bcs.n	8006836 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7c>
    const AllocationInfo* current = &allocation_info[i];
 80067d8:	6a3a      	ldr	r2, [r7, #32]
 80067da:	4613      	mov	r3, r2
 80067dc:	005b      	lsls	r3, r3, #1
 80067de:	4413      	add	r3, r2
 80067e0:	00db      	lsls	r3, r3, #3
 80067e2:	461a      	mov	r2, r3
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	4413      	add	r3, r2
 80067e8:	61fb      	str	r3, [r7, #28]
    if (current->needs_allocating) {
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	7d1b      	ldrb	r3, [r3, #20]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d01d      	beq.n	800682e <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x74>
      int offset = -1;
 80067f2:	f04f 33ff 	mov.w	r3, #4294967295
 80067f6:	617b      	str	r3, [r7, #20]
      TF_LITE_ENSURE_STATUS(
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3314      	adds	r3, #20
 80067fe:	681c      	ldr	r4, [r3, #0]
 8006800:	f107 0314 	add.w	r3, r7, #20
 8006804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006806:	68f9      	ldr	r1, [r7, #12]
 8006808:	68b8      	ldr	r0, [r7, #8]
 800680a:	47a0      	blx	r4
 800680c:	4603      	mov	r3, r0
 800680e:	76fb      	strb	r3, [r7, #27]
 8006810:	7efb      	ldrb	r3, [r7, #27]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d001      	beq.n	800681a <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x60>
 8006816:	7efb      	ldrb	r3, [r7, #27]
 8006818:	e00e      	b.n	8006838 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x7e>
          planner->GetOffsetForBuffer(error_reporter, planner_index, &offset));
      *current->output_ptr = reinterpret_cast<void*>(starting_point + offset);
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	4619      	mov	r1, r3
 800681e:	69fb      	ldr	r3, [r7, #28]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	687a      	ldr	r2, [r7, #4]
 8006824:	440a      	add	r2, r1
 8006826:	601a      	str	r2, [r3, #0]
      ++planner_index;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682a:	3301      	adds	r3, #1
 800682c:	627b      	str	r3, [r7, #36]	; 0x24
  for (size_t i = 0; i < allocation_info_size; ++i) {
 800682e:	6a3b      	ldr	r3, [r7, #32]
 8006830:	3301      	adds	r3, #1
 8006832:	623b      	str	r3, [r7, #32]
 8006834:	e7cc      	b.n	80067d0 <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj+0x16>
    }
  }
  return kTfLiteOk;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	372c      	adds	r7, #44	; 0x2c
 800683c:	46bd      	mov	sp, r7
 800683e:	bd90      	pop	{r4, r7, pc}

08006840 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>:

// Returns a pointer to any buffer associated with the flatbuffer tensor. Can
// return nullptr if no buffer is found.
void* GetFlatbufferTensorBuffer(
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  // the same as a constant op in TensorFlow) associated with this tensor first,
  // and if there is update the runtime structure to point to its location in
  // memory.
  // First see if there's any buffer information in the serialized tensor.
  // TODO(b/170379532): Add better unit tests to validate flatbuffer values.
  void* out_buffer = nullptr;
 800684a:	2300      	movs	r3, #0
 800684c:	617b      	str	r3, [r7, #20]
  if (auto* buffer = (*buffers)[flatbuffer_tensor.buffer()]) {
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	f7ff fb56 	bl	8005f00 <_ZNK6tflite6Tensor6bufferEv>
 8006854:	4603      	mov	r3, r0
 8006856:	4619      	mov	r1, r3
 8006858:	6838      	ldr	r0, [r7, #0]
 800685a:	f001 fb71 	bl	8007f40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>
 800685e:	6138      	str	r0, [r7, #16]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d015      	beq.n	8006892 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
    // If we've found a buffer, does it have any data?
    if (auto* array = buffer->data()) {
 8006866:	6938      	ldr	r0, [r7, #16]
 8006868:	f7ff fbec 	bl	8006044 <_ZNK6tflite6Buffer4dataEv>
 800686c:	60f8      	str	r0, [r7, #12]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d00e      	beq.n	8006892 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
      // If it has any data, is the data size larger than zero?
      if (array->size()) {
 8006874:	68f8      	ldr	r0, [r7, #12]
 8006876:	f001 f9a3 	bl	8007bc0 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 800687a:	4603      	mov	r3, r0
 800687c:	2b00      	cmp	r3, #0
 800687e:	bf14      	ite	ne
 8006880:	2301      	movne	r3, #1
 8006882:	2300      	moveq	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	2b00      	cmp	r3, #0
 8006888:	d003      	beq.n	8006892 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE+0x52>
        // We've found a buffer with valid data, so update the runtime tensor
        // data structure to point to it.
        out_buffer = const_cast<void*>(static_cast<const void*>(array->data()));
 800688a:	68f8      	ldr	r0, [r7, #12]
 800688c:	f001 fb66 	bl	8007f5c <_ZNK11flatbuffers6VectorIhE4dataEv>
 8006890:	6178      	str	r0, [r7, #20]
    // buffer in the serialized tensor, but it doesn't have any data in it. Is
    // that a validly-generated file, and if so what does it mean, or is it an
    // error condition? It would be good to tighten up the specification to make
    // it less ambiguous.
  }
  return out_buffer;
 8006892:	697b      	ldr	r3, [r7, #20]
}
 8006894:	4618      	mov	r0, r3
 8006896:	3718      	adds	r7, #24
 8006898:	46bd      	mov	sp, r7
 800689a:	bd80      	pop	{r7, pc}

0800689c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>:

TfLiteStatus InitializeTfLiteTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, bool allocate_temp,
    const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteTensor* result) {
 800689c:	b590      	push	{r4, r7, lr}
 800689e:	b08d      	sub	sp, #52	; 0x34
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	607a      	str	r2, [r7, #4]
 80068a6:	603b      	str	r3, [r7, #0]
 80068a8:	460b      	mov	r3, r1
 80068aa:	72fb      	strb	r3, [r7, #11]
  TFLITE_DCHECK(result != nullptr);
 80068ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1a>
 80068b2:	f005 fe4f 	bl	800c554 <abort>

  *result = {};
 80068b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068b8:	4618      	mov	r0, r3
 80068ba:	2340      	movs	r3, #64	; 0x40
 80068bc:	461a      	mov	r2, r3
 80068be:	2100      	movs	r1, #0
 80068c0:	f005 fee4 	bl	800c68c <memset>
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff f8d7 	bl	8005a78 <_ZNK6tflite6Tensor4typeEv>
 80068ca:	4603      	mov	r3, r0
 80068cc:	4618      	mov	r0, r3
 80068ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068d2:	4619      	mov	r1, r3
 80068d4:	f7fd ff0e 	bl	80046f4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 80068d8:	4603      	mov	r3, r0
 80068da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80068de:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d002      	beq.n	80068ec <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x50>
 80068e6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80068ea:	e128      	b.n	8006b3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
                                          &result->type, error_reporter));
  // Make sure we remember if the serialized tensor is designated as a variable.
  result->is_variable = flatbuffer_tensor.is_variable();
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f7ff fb24 	bl	8005f3a <_ZNK6tflite6Tensor11is_variableEv>
 80068f2:	4603      	mov	r3, r0
 80068f4:	461a      	mov	r2, r3
 80068f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80068f8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 80068fc:	6839      	ldr	r1, [r7, #0]
 80068fe:	6878      	ldr	r0, [r7, #4]
 8006900:	f7ff ff9e 	bl	8006840 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8006904:	4602      	mov	r2, r0
 8006906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006908:	605a      	str	r2, [r3, #4]

  // TODO(petewarden): Some of these paths aren't getting enough testing
  // coverage, so we should figure out some tests that exercise them.
  if (result->data.data == nullptr) {
 800690a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d103      	bne.n	800691a <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x7e>
    // The tensor contents haven't been set from a serialized buffer, so
    // make a note that they will be allocated from memory. The actual
    // allocation won't happen until later.
    result->allocation_type = kTfLiteArenaRw;
 8006912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006914:	2202      	movs	r2, #2
 8006916:	751a      	strb	r2, [r3, #20]
 8006918:	e002      	b.n	8006920 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x84>
  } else {
    // We set the data from a serialized buffer, so record tha.
    result->allocation_type = kTfLiteMmapRo;
 800691a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800691c:	2201      	movs	r2, #1
 800691e:	751a      	strb	r2, [r3, #20]
  }

  // Figure out what the size in bytes of the buffer is and store it.
  size_t type_size;
  TF_LITE_ENSURE_STATUS(BytesRequiredForTensor(
 8006920:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006922:	f103 0118 	add.w	r1, r3, #24
 8006926:	f107 0210 	add.w	r2, r7, #16
 800692a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f7ff fa0f 	bl	8005d50 <_ZN6tflite22BytesRequiredForTensorERKNS_6TensorEPjS3_PNS_13ErrorReporterE>
 8006932:	4603      	mov	r3, r0
 8006934:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006938:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 800693c:	2b00      	cmp	r3, #0
 800693e:	d002      	beq.n	8006946 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xaa>
 8006940:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006944:	e0fb      	b.n	8006b3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
      flatbuffer_tensor, &result->bytes, &type_size, error_reporter));

  if (flatbuffer_tensor.shape() == nullptr) {
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f7ff f888 	bl	8005a5c <_ZNK6tflite6Tensor5shapeEv>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	bf0c      	ite	eq
 8006952:	2301      	moveq	r3, #1
 8006954:	2300      	movne	r3, #0
 8006956:	b2db      	uxtb	r3, r3
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xc8>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 800695c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800695e:	4a7a      	ldr	r2, [pc, #488]	; (8006b48 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2ac>)
 8006960:	609a      	str	r2, [r3, #8]
 8006962:	e013      	b.n	800698c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
  } else {
    // TFLM doesn't allow reshaping the tensor which requires dynamic memory
    // allocation so it is safe to drop the const qualifier. In the future, if
    // we really want to update the tensor shape, we can always pass in a new
    // TfLiteIntArray - especially we have to do so if the dimension is
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff f879 	bl	8005a5c <_ZNK6tflite6Tensor5shapeEv>
 800696a:	4602      	mov	r2, r0
 800696c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800696e:	3308      	adds	r3, #8
 8006970:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006972:	68f8      	ldr	r0, [r7, #12]
 8006974:	f001 fafe 	bl	8007f74 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006978:	4603      	mov	r3, r0
 800697a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 800697e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006982:	2b00      	cmp	r3, #0
 8006984:	d002      	beq.n	800698c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0xf0>
 8006986:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800698a:	e0d8      	b.n	8006b3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }

  // Copy the quantization information from the serialized data.
  const auto* src_quantization = flatbuffer_tensor.quantization();
 800698c:	6878      	ldr	r0, [r7, #4]
 800698e:	f7ff fac6 	bl	8005f1e <_ZNK6tflite6Tensor12quantizationEv>
 8006992:	6278      	str	r0, [r7, #36]	; 0x24
  if (src_quantization && src_quantization->scale() &&
      (src_quantization->scale()->size() > 0) &&
      src_quantization->zero_point() &&
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006996:	2b00      	cmp	r3, #0
 8006998:	d021      	beq.n	80069de <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
  if (src_quantization && src_quantization->scale() &&
 800699a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800699c:	f7ff fa85 	bl	8005eaa <_ZNK6tflite22QuantizationParameters5scaleEv>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d01b      	beq.n	80069de <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->scale()->size() > 0) &&
 80069a6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069a8:	f7ff fa7f 	bl	8005eaa <_ZNK6tflite22QuantizationParameters5scaleEv>
 80069ac:	4603      	mov	r3, r0
 80069ae:	4618      	mov	r0, r3
 80069b0:	f001 f914 	bl	8007bdc <_ZNK11flatbuffers6VectorIfE4sizeEv>
 80069b4:	4603      	mov	r3, r0
  if (src_quantization && src_quantization->scale() &&
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d011      	beq.n	80069de <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      src_quantization->zero_point() &&
 80069ba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069bc:	f7ff fa83 	bl	8005ec6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80069c0:	4603      	mov	r3, r0
      (src_quantization->scale()->size() > 0) &&
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d00b      	beq.n	80069de <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
      (src_quantization->zero_point()->size() > 0)) {
 80069c6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069c8:	f7ff fa7d 	bl	8005ec6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 80069cc:	4603      	mov	r3, r0
 80069ce:	4618      	mov	r0, r3
 80069d0:	f001 f93a 	bl	8007c48 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 80069d4:	4603      	mov	r3, r0
      src_quantization->zero_point() &&
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d001      	beq.n	80069de <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x142>
 80069da:	2301      	movs	r3, #1
 80069dc:	e000      	b.n	80069e0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x144>
 80069de:	2300      	movs	r3, #0
  if (src_quantization && src_quantization->scale() &&
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 80ab 	beq.w	8006b3c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a0>
    // Always populate the TfLiteTensor.params field, even if there are
    // per-channel quantization parameters.
    result->params.scale = src_quantization->scale()->Get(0);
 80069e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069e8:	f7ff fa5f 	bl	8005eaa <_ZNK6tflite22QuantizationParameters5scaleEv>
 80069ec:	4603      	mov	r3, r0
 80069ee:	2100      	movs	r1, #0
 80069f0:	4618      	mov	r0, r3
 80069f2:	f001 f901 	bl	8007bf8 <_ZNK11flatbuffers6VectorIfE3GetEm>
 80069f6:	eef0 7a40 	vmov.f32	s15, s0
 80069fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069fc:	edc3 7a03 	vstr	s15, [r3, #12]
    // Note that the zero_point field in the FlatBuffers schema is a 64-bit
    // integer, but the zero_point field in the TfLiteQuantizationParams struct
    // is a 32-bit integer.
    result->params.zero_point =
        static_cast<int32_t>(src_quantization->zero_point()->Get(0));
 8006a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a02:	f7ff fa60 	bl	8005ec6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2100      	movs	r1, #0
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f001 f92a 	bl	8007c64 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8006a10:	4603      	mov	r3, r0
 8006a12:	460c      	mov	r4, r1
    result->params.zero_point =
 8006a14:	461a      	mov	r2, r3
 8006a16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a18:	611a      	str	r2, [r3, #16]

    // Populate per-channel quantization params.
    int channels = src_quantization->scale()->size();
 8006a1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a1c:	f7ff fa45 	bl	8005eaa <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006a20:	4603      	mov	r3, r0
 8006a22:	4618      	mov	r0, r3
 8006a24:	f001 f8da 	bl	8007bdc <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	623b      	str	r3, [r7, #32]
    TfLiteAffineQuantization* quantization =
        allocate_temp
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8006a2c:	7afb      	ldrb	r3, [r7, #11]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d009      	beq.n	8006a46 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1aa>
                  allocator->AllocateTemp(sizeof(TfLiteAffineQuantization),
                                          alignof(TfLiteAffineQuantization)))
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3310      	adds	r3, #16
 8006a38:	681b      	ldr	r3, [r3, #0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8006a3a:	2204      	movs	r2, #4
 8006a3c:	210c      	movs	r1, #12
 8006a3e:	68f8      	ldr	r0, [r7, #12]
 8006a40:	4798      	blx	r3
 8006a42:	4603      	mov	r3, r0
 8006a44:	e008      	b.n	8006a58 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1bc>
            : reinterpret_cast<TfLiteAffineQuantization*>(
                  allocator->AllocateFromTail(
                      sizeof(TfLiteAffineQuantization),
                      alignof(TfLiteAffineQuantization)));
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	330c      	adds	r3, #12
 8006a4c:	681b      	ldr	r3, [r3, #0]
            ? reinterpret_cast<TfLiteAffineQuantization*>(
 8006a4e:	2204      	movs	r2, #4
 8006a50:	210c      	movs	r1, #12
 8006a52:	68f8      	ldr	r0, [r7, #12]
 8006a54:	4798      	blx	r3
 8006a56:	4603      	mov	r3, r0
                      alignof(TfLiteAffineQuantization)));
 8006a58:	61fb      	str	r3, [r7, #28]
    if (quantization == nullptr) {
 8006a5a:	69fb      	ldr	r3, [r7, #28]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d105      	bne.n	8006a6c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1d0>
      TF_LITE_REPORT_ERROR(error_reporter,
 8006a60:	493a      	ldr	r1, [pc, #232]	; (8006b4c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b0>)
 8006a62:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006a64:	f7fd fd12 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate TfLiteAffineQuantization.\n");
      return kTfLiteError;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e068      	b.n	8006b3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
    // TODO(b/153688719): Reduce tail allocation by using a global zero-point
    // buffer. This value can not be reused from the flatbuffer since the
    // zero_point is stored as a int64_t.
    quantization->zero_point =
        allocate_temp
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8006a6c:	7afb      	ldrb	r3, [r7, #11]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00d      	beq.n	8006a8e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x1f2>
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)))
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3310      	adds	r3, #16
 8006a78:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8006a7a:	6a38      	ldr	r0, [r7, #32]
 8006a7c:	f7fd fc8e 	bl	800439c <TfLiteIntArrayGetSizeInBytes>
 8006a80:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8006a82:	2204      	movs	r2, #4
 8006a84:	4619      	mov	r1, r3
 8006a86:	68f8      	ldr	r0, [r7, #12]
 8006a88:	47a0      	blx	r4
 8006a8a:	4602      	mov	r2, r0
 8006a8c:	e00c      	b.n	8006aa8 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x20c>
            : reinterpret_cast<TfLiteIntArray*>(allocator->AllocateFromTail(
                  TfLiteIntArrayGetSizeInBytes(channels),
                  alignof(TfLiteIntArray)));
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	330c      	adds	r3, #12
 8006a94:	681c      	ldr	r4, [r3, #0]
                  TfLiteIntArrayGetSizeInBytes(channels),
 8006a96:	6a38      	ldr	r0, [r7, #32]
 8006a98:	f7fd fc80 	bl	800439c <TfLiteIntArrayGetSizeInBytes>
 8006a9c:	4603      	mov	r3, r0
            ? reinterpret_cast<TfLiteIntArray*>(allocator->AllocateTemp(
 8006a9e:	2204      	movs	r2, #4
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	47a0      	blx	r4
 8006aa6:	4602      	mov	r2, r0
    quantization->zero_point =
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	605a      	str	r2, [r3, #4]
    if (quantization->zero_point == nullptr) {
 8006aac:	69fb      	ldr	r3, [r7, #28]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x224>
      TF_LITE_REPORT_ERROR(error_reporter,
 8006ab4:	4926      	ldr	r1, [pc, #152]	; (8006b50 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2b4>)
 8006ab6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8006ab8:	f7fd fce8 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Unable to allocate quantization->zero_point.\n");
      return kTfLiteError;
 8006abc:	2301      	movs	r3, #1
 8006abe:	e03e      	b.n	8006b3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
    }

    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006ac0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006ac2:	f7ff f9f2 	bl	8005eaa <_ZNK6tflite22QuantizationParameters5scaleEv>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	69fb      	ldr	r3, [r7, #28]
 8006aca:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f001 fa6a 	bl	8007fa6 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006ad2:	4603      	mov	r3, r0
 8006ad4:	76fb      	strb	r3, [r7, #27]
 8006ad6:	7efb      	ldrb	r3, [r7, #27]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d001      	beq.n	8006ae0 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x244>
 8006adc:	7efb      	ldrb	r3, [r7, #27]
 8006ade:	e02e      	b.n	8006b3e <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x2a2>
        allocator, error_reporter, src_quantization->scale(),
        &quantization->scale));

    quantization->zero_point->size = channels;
 8006ae0:	69fb      	ldr	r3, [r7, #28]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	6a3a      	ldr	r2, [r7, #32]
 8006ae6:	601a      	str	r2, [r3, #0]
    int* zero_point_data = quantization->zero_point->data;
 8006ae8:	69fb      	ldr	r3, [r7, #28]
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	3304      	adds	r3, #4
 8006aee:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < channels; i++) {
 8006af0:	2300      	movs	r3, #0
 8006af2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006af4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	429a      	cmp	r2, r3
 8006afa:	da12      	bge.n	8006b22 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x286>
      zero_point_data[i] = src_quantization->zero_point()->Get(i);
 8006afc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006afe:	f7ff f9e2 	bl	8005ec6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8006b02:	4602      	mov	r2, r0
 8006b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b06:	4619      	mov	r1, r3
 8006b08:	4610      	mov	r0, r2
 8006b0a:	f001 f8ab 	bl	8007c64 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8006b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b10:	009b      	lsls	r3, r3, #2
 8006b12:	697a      	ldr	r2, [r7, #20]
 8006b14:	4413      	add	r3, r2
 8006b16:	4602      	mov	r2, r0
 8006b18:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < channels; i++) {
 8006b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b1c:	3301      	adds	r3, #1
 8006b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b20:	e7e8      	b.n	8006af4 <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor+0x258>
    }
    // TODO(rocky): Need to add a micro_allocator test case that fails when
    // this is not copied:
    quantization->quantized_dimension = src_quantization->quantized_dimension();
 8006b22:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006b24:	f7ff f9dd 	bl	8005ee2 <_ZNK6tflite22QuantizationParameters19quantized_dimensionEv>
 8006b28:	4602      	mov	r2, r0
 8006b2a:	69fb      	ldr	r3, [r7, #28]
 8006b2c:	609a      	str	r2, [r3, #8]

    result->quantization = {kTfLiteAffineQuantization, quantization};
 8006b2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b30:	2201      	movs	r2, #1
 8006b32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
 8006b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b38:	69fa      	ldr	r2, [r7, #28]
 8006b3a:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return kTfLiteOk;
 8006b3c:	2300      	movs	r3, #0
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3734      	adds	r7, #52	; 0x34
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd90      	pop	{r4, r7, pc}
 8006b46:	bf00      	nop
 8006b48:	08012014 	.word	0x08012014
 8006b4c:	0801082c 	.word	0x0801082c
 8006b50:	0801085c 	.word	0x0801085c

08006b54 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>:

TfLiteStatus InitializeTfLiteEvalTensorFromFlatbuffer(
    SimpleMemoryAllocator* allocator, const tflite::Tensor& flatbuffer_tensor,
    const flatbuffers::Vector<flatbuffers::Offset<Buffer>>* buffers,
    ErrorReporter* error_reporter, TfLiteEvalTensor* result) {
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	607a      	str	r2, [r7, #4]
 8006b60:	603b      	str	r3, [r7, #0]
  *result = {};
 8006b62:	6a3b      	ldr	r3, [r7, #32]
 8006b64:	461a      	mov	r2, r3
 8006b66:	2300      	movs	r3, #0
 8006b68:	6013      	str	r3, [r2, #0]
 8006b6a:	6053      	str	r3, [r2, #4]
 8006b6c:	6093      	str	r3, [r2, #8]
  // Make sure the serialized type is one we know how to deal with, and convert
  // it from a flatbuffer enum into a constant used by the kernel C API.
  TF_LITE_ENSURE_STATUS(ConvertTensorType(flatbuffer_tensor.type(),
 8006b6e:	68b8      	ldr	r0, [r7, #8]
 8006b70:	f7fe ff82 	bl	8005a78 <_ZNK6tflite6Tensor4typeEv>
 8006b74:	4603      	mov	r3, r0
 8006b76:	4618      	mov	r0, r3
 8006b78:	6a3b      	ldr	r3, [r7, #32]
 8006b7a:	3308      	adds	r3, #8
 8006b7c:	683a      	ldr	r2, [r7, #0]
 8006b7e:	4619      	mov	r1, r3
 8006b80:	f7fd fdb8 	bl	80046f4 <_ZN6tflite17ConvertTensorTypeENS_10TensorTypeEP10TfLiteTypePNS_13ErrorReporterE>
 8006b84:	4603      	mov	r3, r0
 8006b86:	75fb      	strb	r3, [r7, #23]
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x3e>
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	e027      	b.n	8006be2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
                                          &result->type, error_reporter));

  result->data.data = GetFlatbufferTensorBuffer(flatbuffer_tensor, buffers);
 8006b92:	6879      	ldr	r1, [r7, #4]
 8006b94:	68b8      	ldr	r0, [r7, #8]
 8006b96:	f7ff fe53 	bl	8006840 <_ZN6tflite8internal25GetFlatbufferTensorBufferERKNS_6TensorEPKN11flatbuffers6VectorINS4_6OffsetINS_6BufferEEEEE>
 8006b9a:	4602      	mov	r2, r0
 8006b9c:	6a3b      	ldr	r3, [r7, #32]
 8006b9e:	601a      	str	r2, [r3, #0]

  if (flatbuffer_tensor.shape() == nullptr) {
 8006ba0:	68b8      	ldr	r0, [r7, #8]
 8006ba2:	f7fe ff5b 	bl	8005a5c <_ZNK6tflite6Tensor5shapeEv>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bf0c      	ite	eq
 8006bac:	2301      	moveq	r3, #1
 8006bae:	2300      	movne	r3, #0
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x6a>
    // flatbuffer_tensor.shape() can return a nullptr in the case of a scalar
    // tensor.
    result->dims = const_cast<TfLiteIntArray*>(&kZeroLengthIntArray);
 8006bb6:	6a3b      	ldr	r3, [r7, #32]
 8006bb8:	4a0c      	ldr	r2, [pc, #48]	; (8006bec <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x98>)
 8006bba:	605a      	str	r2, [r3, #4]
 8006bbc:	e010      	b.n	8006be0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
  } else {
    TF_LITE_ENSURE_STATUS(FlatBufferVectorToTfLiteTypeArray(
 8006bbe:	68b8      	ldr	r0, [r7, #8]
 8006bc0:	f7fe ff4c 	bl	8005a5c <_ZNK6tflite6Tensor5shapeEv>
 8006bc4:	4602      	mov	r2, r0
 8006bc6:	6a3b      	ldr	r3, [r7, #32]
 8006bc8:	3304      	adds	r3, #4
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	68f8      	ldr	r0, [r7, #12]
 8006bce:	f001 f9d1 	bl	8007f74 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	75bb      	strb	r3, [r7, #22]
 8006bd6:	7dbb      	ldrb	r3, [r7, #22]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d001      	beq.n	8006be0 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8c>
 8006bdc:	7dbb      	ldrb	r3, [r7, #22]
 8006bde:	e000      	b.n	8006be2 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor+0x8e>
        allocator, error_reporter, flatbuffer_tensor.shape(), &(result->dims)));
  }
  return kTfLiteOk;
 8006be0:	2300      	movs	r3, #0
}
 8006be2:	4618      	mov	r0, r3
 8006be4:	3718      	adds	r7, #24
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
 8006bea:	bf00      	nop
 8006bec:	08012014 	.word	0x08012014

08006bf0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

}  // namespace internal

MicroAllocator::MicroAllocator(SimpleMemoryAllocator* memory_allocator,
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	60f8      	str	r0, [r7, #12]
 8006bf8:	60b9      	str	r1, [r7, #8]
 8006bfa:	607a      	str	r2, [r7, #4]
                               ErrorReporter* error_reporter)
    : memory_allocator_(memory_allocator),
      error_reporter_(error_reporter),
      model_is_allocating_(false) {}
 8006bfc:	4a0c      	ldr	r2, [pc, #48]	; (8006c30 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x40>)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	601a      	str	r2, [r3, #0]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	68ba      	ldr	r2, [r7, #8]
 8006c06:	605a      	str	r2, [r3, #4]
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	687a      	ldr	r2, [r7, #4]
 8006c0c:	609a      	str	r2, [r3, #8]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	731a      	strb	r2, [r3, #12]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2200      	movs	r2, #0
 8006c18:	611a      	str	r2, [r3, #16]
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	615a      	str	r2, [r3, #20]
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	4618      	mov	r0, r3
 8006c24:	3714      	adds	r7, #20
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr
 8006c2e:	bf00      	nop
 8006c30:	08012038 	.word	0x08012038

08006c34 <_ZN6tflite14MicroAllocatorD1Ev>:

MicroAllocator::~MicroAllocator() {}
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	4a04      	ldr	r2, [pc, #16]	; (8006c50 <_ZN6tflite14MicroAllocatorD1Ev+0x1c>)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	601a      	str	r2, [r3, #0]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	08012038 	.word	0x08012038

08006c54 <_ZN6tflite14MicroAllocatorD0Ev>:
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b082      	sub	sp, #8
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	6078      	str	r0, [r7, #4]
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7ff ffe9 	bl	8006c34 <_ZN6tflite14MicroAllocatorD1Ev>
 8006c62:	2118      	movs	r1, #24
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f005 fb91 	bl	800c38c <_ZdlPvj>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3708      	adds	r7, #8
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}

08006c74 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(uint8_t* tensor_arena, size_t arena_size,
                                       ErrorReporter* error_reporter) {
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b086      	sub	sp, #24
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  uint8_t* aligned_arena = AlignPointerUp(tensor_arena, kBufferAlignment);
 8006c80:	2110      	movs	r1, #16
 8006c82:	68f8      	ldr	r0, [r7, #12]
 8006c84:	f7fe ffc3 	bl	8005c0e <_ZN6tflite14AlignPointerUpEPhj>
 8006c88:	6178      	str	r0, [r7, #20]
  size_t aligned_arena_size = tensor_arena + arena_size - aligned_arena;
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	4413      	add	r3, r2
 8006c90:	461a      	mov	r2, r3
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	1ad3      	subs	r3, r2, r3
 8006c96:	613b      	str	r3, [r7, #16]
  return Create(SimpleMemoryAllocator::Create(error_reporter, aligned_arena,
 8006c98:	693a      	ldr	r2, [r7, #16]
 8006c9a:	6979      	ldr	r1, [r7, #20]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f002 fd6d 	bl	800977c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>
 8006ca2:	4603      	mov	r3, r0
                                              aligned_arena_size),
                error_reporter);
 8006ca4:	6879      	ldr	r1, [r7, #4]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f000 f805 	bl	8006cb6 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8006cac:	4603      	mov	r3, r0
}
 8006cae:	4618      	mov	r0, r3
 8006cb0:	3718      	adds	r7, #24
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	bd80      	pop	{r7, pc}

08006cb6 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>:

MicroAllocator* MicroAllocator::Create(SimpleMemoryAllocator* memory_allocator,
                                       ErrorReporter* error_reporter) {
 8006cb6:	b590      	push	{r4, r7, lr}
 8006cb8:	b085      	sub	sp, #20
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	6078      	str	r0, [r7, #4]
 8006cbe:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(memory_allocator != nullptr);
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d101      	bne.n	8006cca <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x14>
 8006cc6:	f005 fc45 	bl	800c554 <abort>
  TFLITE_DCHECK(error_reporter != nullptr);
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d101      	bne.n	8006cd4 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x1e>
 8006cd0:	f005 fc40 	bl	800c554 <abort>

  uint8_t* allocator_buffer = memory_allocator->AllocateFromTail(
      sizeof(MicroAllocator), alignof(MicroAllocator));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	330c      	adds	r3, #12
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2204      	movs	r2, #4
 8006cde:	2118      	movs	r1, #24
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	4798      	blx	r3
 8006ce4:	60f8      	str	r0, [r7, #12]
  MicroAllocator* allocator =
      new (allocator_buffer) MicroAllocator(memory_allocator, error_reporter);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	4619      	mov	r1, r3
 8006cea:	2018      	movs	r0, #24
 8006cec:	f7fd fc01 	bl	80044f2 <_ZnwjPv>
 8006cf0:	4604      	mov	r4, r0
 8006cf2:	2c00      	cmp	r4, #0
 8006cf4:	d006      	beq.n	8006d04 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x4e>
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	6879      	ldr	r1, [r7, #4]
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f7ff ff78 	bl	8006bf0 <_ZN6tflite14MicroAllocatorC1EPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE>
 8006d00:	4623      	mov	r3, r4
 8006d02:	e000      	b.n	8006d06 <_ZN6tflite14MicroAllocator6CreateEPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterE+0x50>
 8006d04:	4623      	mov	r3, r4
 8006d06:	60bb      	str	r3, [r7, #8]
  return allocator;
 8006d08:	68bb      	ldr	r3, [r7, #8]
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3714      	adds	r7, #20
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd90      	pop	{r4, r7, pc}
	...

08006d14 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::StartModelAllocation(
    const Model* model, const MicroOpResolver& op_resolver,
    NodeAndRegistration** node_and_registrations,
    TfLiteEvalTensor** eval_tensors) {
 8006d14:	b590      	push	{r4, r7, lr}
 8006d16:	b087      	sub	sp, #28
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	60f8      	str	r0, [r7, #12]
 8006d1c:	60b9      	str	r1, [r7, #8]
 8006d1e:	607a      	str	r2, [r7, #4]
 8006d20:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d101      	bne.n	8006d2c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x18>
 8006d28:	f005 fc14 	bl	800c554 <abort>

  if (model_is_allocating_) {
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	7b1b      	ldrb	r3, [r3, #12]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d007      	beq.n	8006d44 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x30>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	4923      	ldr	r1, [pc, #140]	; (8006dc8 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xb4>)
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f7fd fba6 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation started before "
                         "finishing previously allocated model");
    return kTfLiteError;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e03c      	b.n	8006dbe <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  }

  model_is_allocating_ = true;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2201      	movs	r2, #1
 8006d48:	731a      	strb	r2, [r3, #12]

  TF_LITE_ENSURE_STATUS(InitScratchBufferData());
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 fe68 	bl	8007a20 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>
 8006d50:	4603      	mov	r3, r0
 8006d52:	75fb      	strb	r3, [r7, #23]
 8006d54:	7dfb      	ldrb	r3, [r7, #23]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x4a>
 8006d5a:	7dfb      	ldrb	r3, [r7, #23]
 8006d5c:	e02f      	b.n	8006dbe <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  TF_LITE_ENSURE_STATUS(AllocateTfLiteEvalTensors(model, eval_tensors));
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	3320      	adds	r3, #32
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006d68:	68b9      	ldr	r1, [r7, #8]
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	4798      	blx	r3
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75bb      	strb	r3, [r7, #22]
 8006d72:	7dbb      	ldrb	r3, [r7, #22]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x68>
 8006d78:	7dbb      	ldrb	r3, [r7, #22]
 8006d7a:	e020      	b.n	8006dbe <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
  TF_LITE_ENSURE_STATUS(
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	3318      	adds	r3, #24
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	683a      	ldr	r2, [r7, #0]
 8006d86:	68b9      	ldr	r1, [r7, #8]
 8006d88:	68f8      	ldr	r0, [r7, #12]
 8006d8a:	4798      	blx	r3
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	757b      	strb	r3, [r7, #21]
 8006d90:	7d7b      	ldrb	r3, [r7, #21]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d001      	beq.n	8006d9a <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0x86>
 8006d96:	7d7b      	ldrb	r3, [r7, #21]
 8006d98:	e011      	b.n	8006dbe <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
      AllocateNodeAndRegistrations(model, node_and_registrations));
  TF_LITE_ENSURE_STATUS(PrepareNodeAndRegistrationDataFromFlatbuffer(
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	331c      	adds	r3, #28
 8006da0:	681c      	ldr	r4, [r3, #0]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	68b9      	ldr	r1, [r7, #8]
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	47a0      	blx	r4
 8006dae:	4603      	mov	r3, r0
 8006db0:	753b      	strb	r3, [r7, #20]
 8006db2:	7d3b      	ldrb	r3, [r7, #20]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d001      	beq.n	8006dbc <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xa8>
 8006db8:	7d3b      	ldrb	r3, [r7, #20]
 8006dba:	e000      	b.n	8006dbe <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor+0xaa>
      model, op_resolver, *node_and_registrations));

  return kTfLiteOk;
 8006dbc:	2300      	movs	r3, #0
}
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd90      	pop	{r4, r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	0801088c 	.word	0x0801088c

08006dcc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::FinishModelAllocation(
    const Model* model, TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle** scratch_buffer_handles) {
 8006dcc:	b590      	push	{r4, r7, lr}
 8006dce:	b089      	sub	sp, #36	; 0x24
 8006dd0:	af02      	add	r7, sp, #8
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
  if (!model_is_allocating_) {
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	7b1b      	ldrb	r3, [r3, #12]
 8006dde:	f083 0301 	eor.w	r3, r3, #1
 8006de2:	b2db      	uxtb	r3, r3
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d007      	beq.n	8006df8 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	4924      	ldr	r1, [pc, #144]	; (8006e80 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xb4>)
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7fd fb4c 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "MicroAllocator: Model allocation finished before "
                         "starting allocating model");
    return kTfLiteError;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e03f      	b.n	8006e78 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
  }

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8006df8:	68b9      	ldr	r1, [r7, #8]
 8006dfa:	68f8      	ldr	r0, [r7, #12]
 8006dfc:	f000 fc86 	bl	800770c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8006e00:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d101      	bne.n	8006e0c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x40>
 8006e08:	f005 fba4 	bl	800c554 <abort>

  TF_LITE_ENSURE_STATUS(AllocateScratchBufferHandles(
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	3334      	adds	r3, #52	; 0x34
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	6912      	ldr	r2, [r2, #16]
 8006e18:	6839      	ldr	r1, [r7, #0]
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	4798      	blx	r3
 8006e1e:	4603      	mov	r3, r0
 8006e20:	74fb      	strb	r3, [r7, #19]
 8006e22:	7cfb      	ldrb	r3, [r7, #19]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d001      	beq.n	8006e2c <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x60>
 8006e28:	7cfb      	ldrb	r3, [r7, #19]
 8006e2a:	e025      	b.n	8006e78 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
      scratch_buffer_handles, scratch_buffer_request_count_));
  TF_LITE_ENSURE_STATUS(CommitStaticMemoryPlan(model, subgraph, eval_tensors,
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	3330      	adds	r3, #48	; 0x30
 8006e32:	681c      	ldr	r4, [r3, #0]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	9300      	str	r3, [sp, #0]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	697a      	ldr	r2, [r7, #20]
 8006e3e:	68b9      	ldr	r1, [r7, #8]
 8006e40:	68f8      	ldr	r0, [r7, #12]
 8006e42:	47a0      	blx	r4
 8006e44:	4603      	mov	r3, r0
 8006e46:	74bb      	strb	r3, [r7, #18]
 8006e48:	7cbb      	ldrb	r3, [r7, #18]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d001      	beq.n	8006e52 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0x86>
 8006e4e:	7cbb      	ldrb	r3, [r7, #18]
 8006e50:	e012      	b.n	8006e78 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>
                                               *scratch_buffer_handles));
  TF_LITE_ENSURE_STATUS(AllocateVariables(subgraph, eval_tensors));
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	3324      	adds	r3, #36	; 0x24
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	6979      	ldr	r1, [r7, #20]
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	4798      	blx	r3
 8006e62:	4603      	mov	r3, r0
 8006e64:	747b      	strb	r3, [r7, #17]
 8006e66:	7c7b      	ldrb	r3, [r7, #17]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d001      	beq.n	8006e70 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xa4>
 8006e6c:	7c7b      	ldrb	r3, [r7, #17]
 8006e6e:	e003      	b.n	8006e78 <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE+0xac>

  model_is_allocating_ = false;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	2200      	movs	r2, #0
 8006e74:	731a      	strb	r2, [r3, #12]
  return kTfLiteOk;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	371c      	adds	r7, #28
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd90      	pop	{r4, r7, pc}
 8006e80:	080108e4 	.word	0x080108e4

08006e84 <_ZN6tflite14MicroAllocator24AllocatePersistentBufferEj>:

void* MicroAllocator::AllocatePersistentBuffer(size_t bytes) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
 8006e8c:	6039      	str	r1, [r7, #0]
  return memory_allocator_->AllocateFromTail(bytes, kBufferAlignment);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6858      	ldr	r0, [r3, #4]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	330c      	adds	r3, #12
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2210      	movs	r2, #16
 8006e9e:	6839      	ldr	r1, [r7, #0]
 8006ea0:	4798      	blx	r3
 8006ea2:	4603      	mov	r3, r0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3708      	adds	r7, #8
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>:

TfLiteStatus MicroAllocator::RequestScratchBufferInArena(size_t bytes,
                                                         int* buffer_idx) {
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b088      	sub	sp, #32
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	60f8      	str	r0, [r7, #12]
 8006eb4:	60b9      	str	r1, [r7, #8]
 8006eb6:	607a      	str	r2, [r7, #4]
  // All scratch buffer requests are stored in the head section of the arena
  // when a model is in the prepare phase. First align a scratch buffer request
  // pointer to the start of the head:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 fdce 	bl	8007a5a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8006ebe:	6178      	str	r0, [r7, #20]

  // Count the number of requested scratch buffers for the current node:
  size_t current_node_request_count = 0;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	61bb      	str	r3, [r7, #24]
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	691b      	ldr	r3, [r3, #16]
 8006ecc:	69ba      	ldr	r2, [r7, #24]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d20e      	bcs.n	8006ef0 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x44>
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8006ed2:	69bb      	ldr	r3, [r7, #24]
 8006ed4:	00db      	lsls	r3, r3, #3
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	4413      	add	r3, r2
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ee0:	d102      	bne.n	8006ee8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x3c>
      ++current_node_request_count;
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	3301      	adds	r3, #1
 8006ee6:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	3301      	adds	r3, #1
 8006eec:	61bb      	str	r3, [r7, #24]
 8006eee:	e7eb      	b.n	8006ec8 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x1c>
    }
  }

  // First, ensure that the per-kernel request has not exceeded the limit:
  if (current_node_request_count >= kMaxScratchBuffersPerOp) {
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	2b07      	cmp	r3, #7
 8006ef4:	d908      	bls.n	8006f08 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x5c>
    TF_LITE_REPORT_ERROR(
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	2208      	movs	r2, #8
 8006efc:	4913      	ldr	r1, [pc, #76]	; (8006f4c <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0xa0>)
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fd fac4 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Scratch buffer request exeeds limit per operator (%d)",
        kMaxScratchBuffersPerOp);
    return kTfLiteError;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e01c      	b.n	8006f42 <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi+0x96>
  }

  // Initialize and assign values for the request at the current index:
  internal::ScratchBufferRequest* current_request =
      &requests[scratch_buffer_request_count_];
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	691b      	ldr	r3, [r3, #16]
 8006f0c:	00db      	lsls	r3, r3, #3
  internal::ScratchBufferRequest* current_request =
 8006f0e:	697a      	ldr	r2, [r7, #20]
 8006f10:	4413      	add	r3, r2
 8006f12:	613b      	str	r3, [r7, #16]
  *current_request = {};
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	461a      	mov	r2, r3
 8006f18:	2300      	movs	r3, #0
 8006f1a:	6013      	str	r3, [r2, #0]
 8006f1c:	6053      	str	r3, [r2, #4]
  // Assign -1 as a sentinel value that will be updated when the node finishes
  // allocating:
  current_request->bytes = bytes;
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	601a      	str	r2, [r3, #0]
  current_request->node_idx = kUnassignedScratchBufferRequestIndex;
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	f04f 32ff 	mov.w	r2, #4294967295
 8006f2a:	605a      	str	r2, [r3, #4]

  // Assign the current request index to the out-param:
  *buffer_idx = scratch_buffer_request_count_;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	691b      	ldr	r3, [r3, #16]
 8006f30:	461a      	mov	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	601a      	str	r2, [r3, #0]

  // Bump the request count to prepare for the next request:
  ++scratch_buffer_request_count_;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	691b      	ldr	r3, [r3, #16]
 8006f3a:	1c5a      	adds	r2, r3, #1
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	611a      	str	r2, [r3, #16]
  return kTfLiteOk;
 8006f40:	2300      	movs	r3, #0
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	3720      	adds	r7, #32
 8006f46:	46bd      	mov	sp, r7
 8006f48:	bd80      	pop	{r7, pc}
 8006f4a:	bf00      	nop
 8006f4c:	08010930 	.word	0x08010930

08006f50 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>:

TfLiteStatus MicroAllocator::FinishPrepareNodeAllocations(int node_id) {
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b086      	sub	sp, #24
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	6039      	str	r1, [r7, #0]
  // When a node has finished preparing, all temp allocations performed by the
  // kernel should be cleaned up:
  ResetTempAllocations();
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	3308      	adds	r3, #8
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	4798      	blx	r3

  // Find and update any new scratch buffer requests for the current node:
  internal::ScratchBufferRequest* requests = GetScratchBufferRequests();
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fd77 	bl	8007a5a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8006f6c:	6138      	str	r0, [r7, #16]

  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8006f6e:	2300      	movs	r3, #0
 8006f70:	617b      	str	r3, [r7, #20]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	691b      	ldr	r3, [r3, #16]
 8006f76:	697a      	ldr	r2, [r7, #20]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d211      	bcs.n	8006fa0 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x50>
    // A request with a node_idx of -1 is a sentinel value used to indicate this
    // was a new request for the current node. The allocator finally knows the
    // node index at this point. Assign the value and update the list of new
    // requests so the head section can be adjusted to allow for the next kernel
    // to allocate at most kMaxScratchBuffersPerOp requests:
    if (requests[i].node_idx == kUnassignedScratchBufferRequestIndex) {
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	4413      	add	r3, r2
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f8a:	d105      	bne.n	8006f98 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x48>
      requests[i].node_idx = node_id;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	693a      	ldr	r2, [r7, #16]
 8006f92:	4413      	add	r3, r2
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	605a      	str	r2, [r3, #4]
  for (size_t i = 0; i < scratch_buffer_request_count_; ++i) {
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	3301      	adds	r3, #1
 8006f9c:	617b      	str	r3, [r7, #20]
 8006f9e:	e7e8      	b.n	8006f72 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x22>
    }
  }

  // Ensure that the head is re-adjusted to allow for another at-most
  // kMaxScratchBuffersPerOp scratch buffer requests in the next operator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6858      	ldr	r0, [r3, #4]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	3308      	adds	r3, #8
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6912      	ldr	r2, [r2, #16]
 8006fb2:	3208      	adds	r2, #8
 8006fb4:	00d1      	lsls	r1, r2, #3
 8006fb6:	2204      	movs	r2, #4
 8006fb8:	4798      	blx	r3
 8006fba:	4603      	mov	r3, r0
 8006fbc:	73fb      	strb	r3, [r7, #15]
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d001      	beq.n	8006fc8 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x78>
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	e000      	b.n	8006fca <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi+0x7a>
      sizeof(internal::ScratchBufferRequest) *
          (scratch_buffer_request_count_ + kMaxScratchBuffersPerOp),
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3718      	adds	r7, #24
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}
	...

08006fd4 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE>:
size_t MicroAllocator::used_bytes() const {
  return memory_allocator_->GetUsedBytes();
}

TfLiteStatus MicroAllocator::AllocateNodeAndRegistrations(
    const Model* model, NodeAndRegistration** node_and_registrations) {
 8006fd4:	b5b0      	push	{r4, r5, r7, lr}
 8006fd6:	b086      	sub	sp, #24
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	60f8      	str	r0, [r7, #12]
 8006fdc:	60b9      	str	r1, [r7, #8]
 8006fde:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(node_and_registrations);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x16>
 8006fe6:	f005 fab5 	bl	800c554 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8006fea:	68b9      	ldr	r1, [r7, #8]
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fb8d 	bl	800770c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8006ff2:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8006ff4:	697b      	ldr	r3, [r7, #20]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d101      	bne.n	8006ffe <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x2a>
 8006ffa:	f005 faab 	bl	800c554 <abort>

  NodeAndRegistration* output = reinterpret_cast<NodeAndRegistration*>(
      memory_allocator_->AllocateFromTail(
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	685d      	ldr	r5, [r3, #4]
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
          alignof(NodeAndRegistration)));
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	330c      	adds	r3, #12
 800700a:	681c      	ldr	r4, [r3, #0]
          sizeof(NodeAndRegistration) * subgraph->operators()->size(),
 800700c:	6978      	ldr	r0, [r7, #20]
 800700e:	f7ff f80b 	bl	8006028 <_ZNK6tflite8SubGraph9operatorsEv>
 8007012:	4603      	mov	r3, r0
 8007014:	4618      	mov	r0, r3
 8007016:	f000 fe81 	bl	8007d1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 800701a:	4602      	mov	r2, r0
 800701c:	4613      	mov	r3, r2
 800701e:	009b      	lsls	r3, r3, #2
 8007020:	4413      	add	r3, r2
 8007022:	00db      	lsls	r3, r3, #3
          alignof(NodeAndRegistration)));
 8007024:	2204      	movs	r2, #4
 8007026:	4619      	mov	r1, r3
 8007028:	4628      	mov	r0, r5
 800702a:	47a0      	blx	r4
 800702c:	6138      	str	r0, [r7, #16]
  if (output == nullptr) {
 800702e:	693b      	ldr	r3, [r7, #16]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d107      	bne.n	8007044 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x70>
    TF_LITE_REPORT_ERROR(
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	4906      	ldr	r1, [pc, #24]	; (8007054 <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x80>)
 800703a:	4618      	mov	r0, r3
 800703c:	f7fd fa26 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for node_and_registrations.");
    return kTfLiteError;
 8007040:	2301      	movs	r3, #1
 8007042:	e003      	b.n	800704c <_ZN6tflite14MicroAllocator28AllocateNodeAndRegistrationsEPKNS_5ModelEPPNS_19NodeAndRegistrationE+0x78>
  }
  *node_and_registrations = output;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	693a      	ldr	r2, [r7, #16]
 8007048:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800704a:	2300      	movs	r3, #0
}
 800704c:	4618      	mov	r0, r3
 800704e:	3718      	adds	r7, #24
 8007050:	46bd      	mov	sp, r7
 8007052:	bdb0      	pop	{r4, r5, r7, pc}
 8007054:	08010968 	.word	0x08010968

08007058 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE>:

TfLiteStatus MicroAllocator::PrepareNodeAndRegistrationDataFromFlatbuffer(
    const Model* model, const MicroOpResolver& op_resolver,
    NodeAndRegistration* node_and_registrations) {
 8007058:	b5b0      	push	{r4, r5, r7, lr}
 800705a:	b098      	sub	sp, #96	; 0x60
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
 8007064:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(model != nullptr);
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d101      	bne.n	8007070 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x18>
 800706c:	f005 fa72 	bl	800c554 <abort>
  TFLITE_DCHECK(node_and_registrations != nullptr);
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d101      	bne.n	800707a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22>
 8007076:	f005 fa6d 	bl	800c554 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 800707a:	68b9      	ldr	r1, [r7, #8]
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 fb45 	bl	800770c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8007082:	6538      	str	r0, [r7, #80]	; 0x50
  TFLITE_DCHECK(subgraph != nullptr);
 8007084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007086:	2b00      	cmp	r3, #0
 8007088:	d101      	bne.n	800708e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x36>
 800708a:	f005 fa63 	bl	800c554 <abort>

  TfLiteStatus status = kTfLiteOk;
 800708e:	2300      	movs	r3, #0
 8007090:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  auto* opcodes = model->operator_codes();
 8007094:	68b8      	ldr	r0, [r7, #8]
 8007096:	f7ff f800 	bl	800609a <_ZNK6tflite5Model14operator_codesEv>
 800709a:	64b8      	str	r0, [r7, #72]	; 0x48
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	685a      	ldr	r2, [r3, #4]
 80070a0:	f107 0320 	add.w	r3, r7, #32
 80070a4:	4611      	mov	r1, r2
 80070a6:	4618      	mov	r0, r3
 80070a8:	f7ff f860 	bl	800616c <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorC1EPNS_21SimpleMemoryAllocatorE>
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 80070ac:	2300      	movs	r3, #0
 80070ae:	65fb      	str	r3, [r7, #92]	; 0x5c
 80070b0:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80070b2:	f7fe ffb9 	bl	8006028 <_ZNK6tflite8SubGraph9operatorsEv>
 80070b6:	4603      	mov	r3, r0
 80070b8:	4618      	mov	r0, r3
 80070ba:	f000 fe2f 	bl	8007d1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 80070be:	4602      	mov	r2, r0
 80070c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070c2:	4293      	cmp	r3, r2
 80070c4:	bf34      	ite	cc
 80070c6:	2301      	movcc	r3, #1
 80070c8:	2300      	movcs	r3, #0
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	f000 812c 	beq.w	800732a <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d2>
    const auto* op = subgraph->operators()->Get(i);
 80070d2:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80070d4:	f7fe ffa8 	bl	8006028 <_ZNK6tflite8SubGraph9operatorsEv>
 80070d8:	4603      	mov	r3, r0
 80070da:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fe2b 	bl	8007d38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>
 80070e2:	6478      	str	r0, [r7, #68]	; 0x44
    const size_t index = op->opcode_index();
 80070e4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80070e6:	f7fe ff3c 	bl	8005f62 <_ZNK6tflite8Operator12opcode_indexEv>
 80070ea:	6438      	str	r0, [r7, #64]	; 0x40
    if (index >= opcodes->size()) {
 80070ec:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80070ee:	f000 fe49 	bl	8007d84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 80070f2:	4602      	mov	r2, r0
 80070f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070f6:	4293      	cmp	r3, r2
 80070f8:	bf2c      	ite	cs
 80070fa:	2301      	movcs	r3, #1
 80070fc:	2300      	movcc	r3, #0
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0xbe>
      TF_LITE_REPORT_ERROR(error_reporter_,
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	689b      	ldr	r3, [r3, #8]
 8007108:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800710a:	498d      	ldr	r1, [pc, #564]	; (8007340 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2e8>)
 800710c:	4618      	mov	r0, r3
 800710e:	f7fd f9bd 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Missing registration for opcode_index %d\n", index);
      return kTfLiteError;
 8007112:	2401      	movs	r4, #1
 8007114:	e10a      	b.n	800732c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    auto* opcode = (*opcodes)[index];
 8007116:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007118:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800711a:	f000 ff5d 	bl	8007fd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>
 800711e:	63f8      	str	r0, [r7, #60]	; 0x3c
    status =
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8007120:	6879      	ldr	r1, [r7, #4]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	6898      	ldr	r0, [r3, #8]
                                  &(node_and_registrations[i].registration));
 8007126:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007128:	4613      	mov	r3, r2
 800712a:	009b      	lsls	r3, r3, #2
 800712c:	4413      	add	r3, r2
 800712e:	00db      	lsls	r3, r3, #3
 8007130:	461a      	mov	r2, r3
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	4413      	add	r3, r2
        GetRegistrationFromOpCode(opcode, op_resolver, error_reporter_,
 8007136:	3324      	adds	r3, #36	; 0x24
    status =
 8007138:	4602      	mov	r2, r0
 800713a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800713c:	f7fd ffda 	bl	80050f4 <_ZN6tflite25GetRegistrationFromOpCodeEPKNS_12OperatorCodeERKNS_10OpResolverEPNS_13ErrorReporterEPPK18TfLiteRegistration>
 8007140:	4603      	mov	r3, r0
 8007142:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
    if (status != kTfLiteOk) {
 8007146:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800714a:	2b00      	cmp	r3, #0
 800714c:	d011      	beq.n	8007172 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x11a>
      TF_LITE_REPORT_ERROR(error_reporter_,
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	689c      	ldr	r4, [r3, #8]
 8007152:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8007154:	f005 f8dd 	bl	800c312 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>
 8007158:	4603      	mov	r3, r0
 800715a:	4618      	mov	r0, r3
 800715c:	f7fd ff86 	bl	800506c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8007160:	4603      	mov	r3, r0
 8007162:	461a      	mov	r2, r3
 8007164:	4977      	ldr	r1, [pc, #476]	; (8007344 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2ec>)
 8007166:	4620      	mov	r0, r4
 8007168:	f7fd f990 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           "Failed to get registration from op code %s\n ",
                           EnumNameBuiltinOperator(GetBuiltinCode(opcode)));
      return status;
 800716c:	f897 404f 	ldrb.w	r4, [r7, #79]	; 0x4f
 8007170:	e0dc      	b.n	800732c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    const auto* registration = node_and_registrations[i].registration;
 8007172:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007174:	4613      	mov	r3, r2
 8007176:	009b      	lsls	r3, r3, #2
 8007178:	4413      	add	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	461a      	mov	r2, r3
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	4413      	add	r3, r2
 8007182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007184:	63bb      	str	r3, [r7, #56]	; 0x38
    if (registration == nullptr) {
 8007186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007188:	2b00      	cmp	r3, #0
 800718a:	d108      	bne.n	800719e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x146>
      TF_LITE_REPORT_ERROR(error_reporter_, "Skipping op for opcode_index %d\n",
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	689b      	ldr	r3, [r3, #8]
 8007190:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007192:	496d      	ldr	r1, [pc, #436]	; (8007348 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f0>)
 8007194:	4618      	mov	r0, r3
 8007196:	f7fd f979 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           index);
      return kTfLiteError;
 800719a:	2401      	movs	r4, #1
 800719c:	e0c6      	b.n	800732c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
    }
    BuiltinOperator op_type =
        static_cast<BuiltinOperator>(registration->builtin_code);
 800719e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071a0:	695b      	ldr	r3, [r3, #20]
    BuiltinOperator op_type =
 80071a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    const char* custom_data = nullptr;
 80071a6:	2300      	movs	r3, #0
 80071a8:	65bb      	str	r3, [r7, #88]	; 0x58
    size_t custom_data_size = 0;
 80071aa:	2300      	movs	r3, #0
 80071ac:	657b      	str	r3, [r7, #84]	; 0x54
    unsigned char* builtin_data = nullptr;
 80071ae:	2300      	movs	r3, #0
 80071b0:	61fb      	str	r3, [r7, #28]

    if (op_type == BuiltinOperator_CUSTOM) {
 80071b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d11b      	bne.n	80071f2 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x19a>
      // Custom Ops may or may not have a non-null custom_options field.
      if (op->custom_options() != nullptr) {
 80071ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80071bc:	f7fe fefc 	bl	8005fb8 <_ZNK6tflite8Operator14custom_optionsEv>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	bf14      	ite	ne
 80071c6:	2301      	movne	r3, #1
 80071c8:	2300      	moveq	r3, #0
 80071ca:	b2db      	uxtb	r3, r3
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d059      	beq.n	8007284 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
        custom_data =
            reinterpret_cast<const char*>(op->custom_options()->data());
 80071d0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80071d2:	f7fe fef1 	bl	8005fb8 <_ZNK6tflite8Operator14custom_optionsEv>
 80071d6:	4603      	mov	r3, r0
        custom_data =
 80071d8:	4618      	mov	r0, r3
 80071da:	f000 febf 	bl	8007f5c <_ZNK11flatbuffers6VectorIhE4dataEv>
 80071de:	65b8      	str	r0, [r7, #88]	; 0x58
        custom_data_size = op->custom_options()->size();
 80071e0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80071e2:	f7fe fee9 	bl	8005fb8 <_ZNK6tflite8Operator14custom_optionsEv>
 80071e6:	4603      	mov	r3, r0
 80071e8:	4618      	mov	r0, r3
 80071ea:	f000 fce9 	bl	8007bc0 <_ZNK11flatbuffers6VectorIhE4sizeEv>
 80071ee:	6578      	str	r0, [r7, #84]	; 0x54
 80071f0:	e048      	b.n	8007284 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
      }
    } else {
      if (op->custom_options() != nullptr) {
 80071f2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80071f4:	f7fe fee0 	bl	8005fb8 <_ZNK6tflite8Operator14custom_optionsEv>
 80071f8:	4603      	mov	r3, r0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	bf14      	ite	ne
 80071fe:	2301      	movne	r3, #1
 8007200:	2300      	moveq	r3, #0
 8007202:	b2db      	uxtb	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d00e      	beq.n	8007226 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x1ce>
        TF_LITE_REPORT_ERROR(
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	689c      	ldr	r4, [r3, #8]
 800720c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007210:	4618      	mov	r0, r3
 8007212:	f7fd ff2b 	bl	800506c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 8007216:	4603      	mov	r3, r0
 8007218:	461a      	mov	r2, r3
 800721a:	494c      	ldr	r1, [pc, #304]	; (800734c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f4>)
 800721c:	4620      	mov	r0, r4
 800721e:	f7fd f935 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Unsupported behavior: found builtin operator %s with custom "
            "options.\n",
            EnumNameBuiltinOperator(op_type));
        return kTfLiteError;
 8007222:	2401      	movs	r4, #1
 8007224:	e082      	b.n	800732c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
      }

      MicroOpResolver::BuiltinParseFunction parser =
          op_resolver.GetOpDataParser(op_type);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	331c      	adds	r3, #28
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8007232:	4611      	mov	r1, r2
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	4798      	blx	r3
 8007238:	6338      	str	r0, [r7, #48]	; 0x30
      if (parser == nullptr) {
 800723a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800723c:	2b00      	cmp	r3, #0
 800723e:	d10e      	bne.n	800725e <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x206>
        TF_LITE_REPORT_ERROR(error_reporter_, "Did not find a parser for %s",
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	689c      	ldr	r4, [r3, #8]
 8007244:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007248:	4618      	mov	r0, r3
 800724a:	f7fd ff0f 	bl	800506c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 800724e:	4603      	mov	r3, r0
 8007250:	461a      	mov	r2, r3
 8007252:	493f      	ldr	r1, [pc, #252]	; (8007350 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2f8>)
 8007254:	4620      	mov	r0, r4
 8007256:	f7fd f919 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             EnumNameBuiltinOperator(op_type));

        return kTfLiteError;
 800725a:	2401      	movs	r4, #1
 800725c:	e066      	b.n	800732c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
      }
      TF_LITE_ENSURE_STATUS(parser(op, error_reporter_, &builtin_data_allocator,
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6899      	ldr	r1, [r3, #8]
 8007262:	f107 031c 	add.w	r3, r7, #28
 8007266:	f107 0220 	add.w	r2, r7, #32
 800726a:	6b3c      	ldr	r4, [r7, #48]	; 0x30
 800726c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800726e:	47a0      	blx	r4
 8007270:	4603      	mov	r3, r0
 8007272:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8007276:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800727a:	2b00      	cmp	r3, #0
 800727c:	d002      	beq.n	8007284 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x22c>
 800727e:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8007282:	e053      	b.n	800732c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
                                   (void**)(&builtin_data)));
    }

    TfLiteIntArray* inputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	685c      	ldr	r4, [r3, #4]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	689d      	ldr	r5, [r3, #8]
 800728c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800728e:	f7fe fe77 	bl	8005f80 <_ZNK6tflite8Operator6inputsEv>
 8007292:	4602      	mov	r2, r0
 8007294:	f107 0318 	add.w	r3, r7, #24
 8007298:	4629      	mov	r1, r5
 800729a:	4620      	mov	r0, r4
 800729c:	f000 fe6a 	bl	8007f74 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80072a0:	4603      	mov	r3, r0
 80072a2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80072a6:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d002      	beq.n	80072b4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x25c>
 80072ae:	f897 402e 	ldrb.w	r4, [r7, #46]	; 0x2e
 80072b2:	e03b      	b.n	800732c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
        memory_allocator_, error_reporter_, op->inputs(), &inputs_array));

    TfLiteIntArray* outputs_array;
    TF_LITE_ENSURE_STATUS(internal::FlatBufferVectorToTfLiteTypeArray(
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	685c      	ldr	r4, [r3, #4]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689d      	ldr	r5, [r3, #8]
 80072bc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80072be:	f7fe fe6d 	bl	8005f9c <_ZNK6tflite8Operator7outputsEv>
 80072c2:	4602      	mov	r2, r0
 80072c4:	f107 0314 	add.w	r3, r7, #20
 80072c8:	4629      	mov	r1, r5
 80072ca:	4620      	mov	r0, r4
 80072cc:	f000 fe52 	bl	8007f74 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>
 80072d0:	4603      	mov	r3, r0
 80072d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80072d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x28c>
 80072de:	f897 402d 	ldrb.w	r4, [r7, #45]	; 0x2d
 80072e2:	e023      	b.n	800732c <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x2d4>
        memory_allocator_, error_reporter_, op->outputs(), &outputs_array));

    TfLiteNode* node = &(node_and_registrations[i].node);
 80072e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80072e6:	4613      	mov	r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	4413      	add	r3, r2
 80072ec:	00db      	lsls	r3, r3, #3
 80072ee:	461a      	mov	r2, r3
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	4413      	add	r3, r2
 80072f4:	62bb      	str	r3, [r7, #40]	; 0x28
    *node = {};
 80072f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072f8:	4618      	mov	r0, r3
 80072fa:	2324      	movs	r3, #36	; 0x24
 80072fc:	461a      	mov	r2, r3
 80072fe:	2100      	movs	r1, #0
 8007300:	f005 f9c4 	bl	800c68c <memset>
    node->inputs = inputs_array;
 8007304:	69ba      	ldr	r2, [r7, #24]
 8007306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007308:	601a      	str	r2, [r3, #0]
    node->outputs = outputs_array;
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800730e:	605a      	str	r2, [r3, #4]
    node->builtin_data = reinterpret_cast<void*>(builtin_data);
 8007310:	69fa      	ldr	r2, [r7, #28]
 8007312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007314:	615a      	str	r2, [r3, #20]
    node->custom_initial_data = custom_data;
 8007316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007318:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800731a:	619a      	str	r2, [r3, #24]
    node->custom_initial_data_size = custom_data_size;
 800731c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800731e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007320:	61da      	str	r2, [r3, #28]
  for (size_t i = 0; i < subgraph->operators()->size(); ++i) {
 8007322:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007324:	3301      	adds	r3, #1
 8007326:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007328:	e6c2      	b.n	80070b0 <_ZN6tflite14MicroAllocator44PrepareNodeAndRegistrationDataFromFlatbufferEPKNS_5ModelERKNS_15MicroOpResolverEPNS_19NodeAndRegistrationE+0x58>
  }

  return kTfLiteOk;
 800732a:	2400      	movs	r4, #0
  MicroBuiltinDataAllocator builtin_data_allocator(memory_allocator_);
 800732c:	f107 0320 	add.w	r3, r7, #32
 8007330:	4618      	mov	r0, r3
 8007332:	f001 f8bd 	bl	80084b0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 8007336:	4623      	mov	r3, r4
}
 8007338:	4618      	mov	r0, r3
 800733a:	3760      	adds	r7, #96	; 0x60
 800733c:	46bd      	mov	sp, r7
 800733e:	bdb0      	pop	{r4, r5, r7, pc}
 8007340:	080109a0 	.word	0x080109a0
 8007344:	080109cc 	.word	0x080109cc
 8007348:	080109fc 	.word	0x080109fc
 800734c:	08010a20 	.word	0x08010a20
 8007350:	08010a68 	.word	0x08010a68

08007354 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensor(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 8007354:	b590      	push	{r4, r7, lr}
 8007356:	b089      	sub	sp, #36	; 0x24
 8007358:	af02      	add	r7, sp, #8
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
 8007360:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = GetSubGraphFromModel(model);
 8007362:	68b9      	ldr	r1, [r7, #8]
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f000 f9d1 	bl	800770c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 800736a:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d101      	bne.n	8007376 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x22>
 8007372:	f005 f8ef 	bl	800c554 <abort>

  // This value is allocated from persistent arena space. It is guaranteed to be
  // around for the lifetime of the application.
  TfLiteTensor* tensor =
      AllocatePersistentTfLiteTensorInternal(model, eval_tensors, tensor_index);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	3328      	adds	r3, #40	; 0x28
 800737c:	681c      	ldr	r4, [r3, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	68b9      	ldr	r1, [r7, #8]
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	47a0      	blx	r4
 8007388:	6138      	str	r0, [r7, #16]

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the persistent section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
                                         /*allocate_temp=*/false) !=
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	332c      	adds	r3, #44	; 0x2c
 8007390:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8007392:	2300      	movs	r3, #0
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	693b      	ldr	r3, [r7, #16]
 800739c:	697a      	ldr	r2, [r7, #20]
 800739e:	68b9      	ldr	r1, [r7, #8]
 80073a0:	68f8      	ldr	r0, [r7, #12]
 80073a2:	47a0      	blx	r4
 80073a4:	4603      	mov	r3, r0
                                         /*allocate_temp=*/false) !=
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	bf14      	ite	ne
 80073aa:	2301      	movne	r3, #1
 80073ac:	2300      	moveq	r3, #0
 80073ae:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d007      	beq.n	80073c4 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x70>
      kTfLiteOk) {
    TF_LITE_REPORT_ERROR(error_reporter_,
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	689b      	ldr	r3, [r3, #8]
 80073b8:	490c      	ldr	r1, [pc, #48]	; (80073ec <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>)
 80073ba:	4618      	mov	r0, r3
 80073bc:	f7fd f866 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to populate a persistent TfLiteTensor struct "
                         "from flatbuffer data!");
    return nullptr;
 80073c0:	2300      	movs	r3, #0
 80073c2:	e00e      	b.n	80073e2 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8e>
  }

  if (eval_tensors != nullptr) {
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d00a      	beq.n	80073e0 <_ZN6tflite14MicroAllocator30AllocatePersistentTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8c>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data = eval_tensors[tensor_index].data.data;
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	4613      	mov	r3, r2
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	4413      	add	r3, r2
 80073d2:	009b      	lsls	r3, r3, #2
 80073d4:	461a      	mov	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4413      	add	r3, r2
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 80073e0:	693b      	ldr	r3, [r7, #16]
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	371c      	adds	r7, #28
 80073e6:	46bd      	mov	sp, r7
 80073e8:	bd90      	pop	{r4, r7, pc}
 80073ea:	bf00      	nop
 80073ec:	08010a88 	.word	0x08010a88

080073f0 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocateTempTfLiteTensor(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 80073f0:	b590      	push	{r4, r7, lr}
 80073f2:	b089      	sub	sp, #36	; 0x24
 80073f4:	af02      	add	r7, sp, #8
 80073f6:	60f8      	str	r0, [r7, #12]
 80073f8:	60b9      	str	r1, [r7, #8]
 80073fa:	607a      	str	r2, [r7, #4]
 80073fc:	603b      	str	r3, [r7, #0]
  const SubGraph* subgraph = GetSubGraphFromModel(model);
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 f983 	bl	800770c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 8007406:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(subgraph != nullptr);
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x22>
 800740e:	f005 f8a1 	bl	800c554 <abort>

  // This value is allocated from temporary arena space. It is guaranteed to be
  // around for at least the scope of the calling function. Since this struct
  // allocation takes place in temp space, no need to own or cleanup.
  TfLiteTensor* tensor =
      reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateTemp(
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6858      	ldr	r0, [r3, #4]
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	3310      	adds	r3, #16
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	2204      	movs	r2, #4
 8007422:	2140      	movs	r1, #64	; 0x40
 8007424:	4798      	blx	r3
 8007426:	6138      	str	r0, [r7, #16]

  // Populate any fields from the flatbuffer, since this TfLiteTensor struct is
  // allocated in the temp section of the arena, ensure that additional
  // allocations also take place in that section of the arena.
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	332c      	adds	r3, #44	; 0x2c
 800742e:	681c      	ldr	r4, [r3, #0]
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 8007430:	2301      	movs	r3, #1
 8007432:	9301      	str	r3, [sp, #4]
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	697a      	ldr	r2, [r7, #20]
 800743c:	68b9      	ldr	r1, [r7, #8]
 800743e:	68f8      	ldr	r0, [r7, #12]
 8007440:	47a0      	blx	r4
 8007442:	4603      	mov	r3, r0
                                         /*allocate_temp=*/true) != kTfLiteOk) {
 8007444:	2b00      	cmp	r3, #0
 8007446:	bf14      	ite	ne
 8007448:	2301      	movne	r3, #1
 800744a:	2300      	moveq	r3, #0
 800744c:	b2db      	uxtb	r3, r3
  if (PopulateTfLiteTensorFromFlatbuffer(model, subgraph, tensor, tensor_index,
 800744e:	2b00      	cmp	r3, #0
 8007450:	d007      	beq.n	8007462 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x72>
    TF_LITE_REPORT_ERROR(
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	490c      	ldr	r1, [pc, #48]	; (8007488 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x98>)
 8007458:	4618      	mov	r0, r3
 800745a:	f7fd f817 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to populate a temp TfLiteTensor struct from flatbuffer data!");
    return nullptr;
 800745e:	2300      	movs	r3, #0
 8007460:	e00e      	b.n	8007480 <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x90>
  }

  if (eval_tensors != nullptr) {
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00a      	beq.n	800747e <_ZN6tflite14MicroAllocator24AllocateTempTfLiteTensorEPKNS_5ModelEP16TfLiteEvalTensori+0x8e>
    // Tensor buffers that are allocated at runtime (e.g. non-weight buffers)
    // and not located in the flatbuffer are stored on the pre-allocated list of
    // TfLiteEvalTensors structs. These structs are the source of truth, simply
    // point the corresponding buffer to the new TfLiteTensor data value.
    tensor->data.data = eval_tensors[tensor_index].data.data;
 8007468:	683a      	ldr	r2, [r7, #0]
 800746a:	4613      	mov	r3, r2
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	4413      	add	r3, r2
 8007470:	009b      	lsls	r3, r3, #2
 8007472:	461a      	mov	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	4413      	add	r3, r2
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	693b      	ldr	r3, [r7, #16]
 800747c:	605a      	str	r2, [r3, #4]
  }
  return tensor;
 800747e:	693b      	ldr	r3, [r7, #16]
}
 8007480:	4618      	mov	r0, r3
 8007482:	371c      	adds	r7, #28
 8007484:	46bd      	mov	sp, r7
 8007486:	bd90      	pop	{r4, r7, pc}
 8007488:	08010ad4 	.word	0x08010ad4

0800748c <_ZN6tflite14MicroAllocator20ResetTempAllocationsEv>:

void MicroAllocator::ResetTempAllocations() {
 800748c:	b580      	push	{r7, lr}
 800748e:	b082      	sub	sp, #8
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
  memory_allocator_->ResetTempAllocations();
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3314      	adds	r3, #20
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4610      	mov	r0, r2
 80074a4:	4798      	blx	r3
}
 80074a6:	bf00      	nop
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::AllocateTfLiteEvalTensors(
    const Model* model, TfLiteEvalTensor** eval_tensors) {
 80074b0:	b5b0      	push	{r4, r5, r7, lr}
 80074b2:	b08c      	sub	sp, #48	; 0x30
 80074b4:	af02      	add	r7, sp, #8
 80074b6:	60f8      	str	r0, [r7, #12]
 80074b8:	60b9      	str	r1, [r7, #8]
 80074ba:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(eval_tensors != nullptr);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d101      	bne.n	80074c6 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x16>
 80074c2:	f005 f847 	bl	800c554 <abort>

  const SubGraph* subgraph = GetSubGraphFromModel(model);
 80074c6:	68b9      	ldr	r1, [r7, #8]
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 f91f 	bl	800770c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>
 80074ce:	6238      	str	r0, [r7, #32]
  TFLITE_DCHECK(subgraph != nullptr);
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d101      	bne.n	80074da <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x2a>
 80074d6:	f005 f83d 	bl	800c554 <abort>

  size_t alloc_count = subgraph->tensors()->size();
 80074da:	6a38      	ldr	r0, [r7, #32]
 80074dc:	f7fe fd7a 	bl	8005fd4 <_ZNK6tflite8SubGraph7tensorsEv>
 80074e0:	4603      	mov	r3, r0
 80074e2:	4618      	mov	r0, r3
 80074e4:	f000 fbe6 	bl	8007cb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80074e8:	61f8      	str	r0, [r7, #28]
  TfLiteEvalTensor* tensors =
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	6858      	ldr	r0, [r3, #4]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	685b      	ldr	r3, [r3, #4]
          sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	330c      	adds	r3, #12
 80074f6:	681c      	ldr	r4, [r3, #0]
      reinterpret_cast<TfLiteEvalTensor*>(memory_allocator_->AllocateFromTail(
 80074f8:	69fa      	ldr	r2, [r7, #28]
 80074fa:	4613      	mov	r3, r2
 80074fc:	005b      	lsls	r3, r3, #1
 80074fe:	4413      	add	r3, r2
 8007500:	009b      	lsls	r3, r3, #2
          sizeof(TfLiteEvalTensor) * alloc_count, alignof(TfLiteEvalTensor)));
 8007502:	2204      	movs	r2, #4
 8007504:	4619      	mov	r1, r3
 8007506:	47a0      	blx	r4
 8007508:	61b8      	str	r0, [r7, #24]
  if (tensors == nullptr) {
 800750a:	69bb      	ldr	r3, [r7, #24]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10c      	bne.n	800752a <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x7a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	6898      	ldr	r0, [r3, #8]
 8007514:	69fa      	ldr	r2, [r7, #28]
 8007516:	4613      	mov	r3, r2
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	461a      	mov	r2, r3
 8007520:	4921      	ldr	r1, [pc, #132]	; (80075a8 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf8>)
 8007522:	f7fc ffb3 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate memory for context->eval_tensors, "
                         "%d bytes required",
                         sizeof(TfLiteEvalTensor) * alloc_count);
    return kTfLiteError;
 8007526:	2301      	movs	r3, #1
 8007528:	e03a      	b.n	80075a0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf0>
  }

  for (size_t i = 0; i < alloc_count; ++i) {
 800752a:	2300      	movs	r3, #0
 800752c:	627b      	str	r3, [r7, #36]	; 0x24
 800752e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007530:	69fb      	ldr	r3, [r7, #28]
 8007532:	429a      	cmp	r2, r3
 8007534:	d230      	bcs.n	8007598 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe8>
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	685c      	ldr	r4, [r3, #4]
        memory_allocator_, *subgraph->tensors()->Get(i), model->buffers(),
 800753a:	6a38      	ldr	r0, [r7, #32]
 800753c:	f7fe fd4a 	bl	8005fd4 <_ZNK6tflite8SubGraph7tensorsEv>
 8007540:	4603      	mov	r3, r0
 8007542:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007544:	4618      	mov	r0, r3
 8007546:	f000 fbc3 	bl	8007cd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 800754a:	4605      	mov	r5, r0
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 800754c:	68b8      	ldr	r0, [r7, #8]
 800754e:	f7fe fdc0 	bl	80060d2 <_ZNK6tflite5Model7buffersEv>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6899      	ldr	r1, [r3, #8]
        error_reporter_, &tensors[i]);
 8007556:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007558:	4613      	mov	r3, r2
 800755a:	005b      	lsls	r3, r3, #1
 800755c:	4413      	add	r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	461a      	mov	r2, r3
    TfLiteStatus status = internal::InitializeTfLiteEvalTensorFromFlatbuffer(
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	4413      	add	r3, r2
        error_reporter_, &tensors[i]);
 8007566:	9300      	str	r3, [sp, #0]
 8007568:	460b      	mov	r3, r1
 800756a:	4602      	mov	r2, r0
 800756c:	4629      	mov	r1, r5
 800756e:	4620      	mov	r0, r4
 8007570:	f7ff faf0 	bl	8006b54 <_ZN6tflite8internal40InitializeTfLiteEvalTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorERKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP16TfLiteEvalTensor>
 8007574:	4603      	mov	r3, r0
 8007576:	75fb      	strb	r3, [r7, #23]
    if (status != kTfLiteOk) {
 8007578:	7dfb      	ldrb	r3, [r7, #23]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d008      	beq.n	8007590 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xe0>
      TF_LITE_REPORT_ERROR(error_reporter_, "Failed to initialize tensor %d",
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	689b      	ldr	r3, [r3, #8]
 8007582:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007584:	4909      	ldr	r1, [pc, #36]	; (80075ac <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xfc>)
 8007586:	4618      	mov	r0, r3
 8007588:	f7fc ff80 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                           i);
      return kTfLiteError;
 800758c:	2301      	movs	r3, #1
 800758e:	e007      	b.n	80075a0 <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0xf0>
  for (size_t i = 0; i < alloc_count; ++i) {
 8007590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007592:	3301      	adds	r3, #1
 8007594:	627b      	str	r3, [r7, #36]	; 0x24
 8007596:	e7ca      	b.n	800752e <_ZN6tflite14MicroAllocator25AllocateTfLiteEvalTensorsEPKNS_5ModelEPP16TfLiteEvalTensor+0x7e>
    }
  }
  *eval_tensors = tensors;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	69ba      	ldr	r2, [r7, #24]
 800759c:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3728      	adds	r7, #40	; 0x28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bdb0      	pop	{r4, r5, r7, pc}
 80075a8:	08010b18 	.word	0x08010b18
 80075ac:	08010b60 	.word	0x08010b60

080075b0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor>:

TfLiteStatus MicroAllocator::AllocateVariables(const SubGraph* subgraph,
                                               TfLiteEvalTensor* eval_tensors) {
 80075b0:	b5b0      	push	{r4, r5, r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 80075bc:	2300      	movs	r3, #0
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	68b8      	ldr	r0, [r7, #8]
 80075c2:	f7fe fd07 	bl	8005fd4 <_ZNK6tflite8SubGraph7tensorsEv>
 80075c6:	4603      	mov	r3, r0
 80075c8:	4618      	mov	r0, r3
 80075ca:	f000 fb73 	bl	8007cb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80075ce:	4602      	mov	r2, r0
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	4293      	cmp	r3, r2
 80075d4:	bf34      	ite	cc
 80075d6:	2301      	movcc	r3, #1
 80075d8:	2300      	movcs	r3, #0
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d04f      	beq.n	8007680 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd0>
    auto* tensor = subgraph->tensors()->Get(i);
 80075e0:	68b8      	ldr	r0, [r7, #8]
 80075e2:	f7fe fcf7 	bl	8005fd4 <_ZNK6tflite8SubGraph7tensorsEv>
 80075e6:	4603      	mov	r3, r0
 80075e8:	69f9      	ldr	r1, [r7, #28]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 fb70 	bl	8007cd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80075f0:	61b8      	str	r0, [r7, #24]
    if (tensor->is_variable()) {
 80075f2:	69b8      	ldr	r0, [r7, #24]
 80075f4:	f7fe fca1 	bl	8005f3a <_ZNK6tflite6Tensor11is_variableEv>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d03c      	beq.n	8007678 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 80075fe:	69fa      	ldr	r2, [r7, #28]
 8007600:	4613      	mov	r3, r2
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	4413      	add	r3, r2
 8007606:	009b      	lsls	r3, r3, #2
 8007608:	461a      	mov	r2, r3
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4413      	add	r3, r2
 800760e:	f107 0210 	add.w	r2, r7, #16
 8007612:	4611      	mov	r1, r2
 8007614:	4618      	mov	r0, r3
 8007616:	f7fe fbfc 	bl	8005e12 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 800761a:	4603      	mov	r3, r0
 800761c:	75fb      	strb	r3, [r7, #23]
 800761e:	7dfb      	ldrb	r3, [r7, #23]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d001      	beq.n	8007628 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x78>
 8007624:	7dfb      	ldrb	r3, [r7, #23]
 8007626:	e02c      	b.n	8007682 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
          TfLiteEvalTensorByteLength(&eval_tensors[i], &buffer_size));

      eval_tensors[i].data.data =
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6858      	ldr	r0, [r3, #4]
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	330c      	adds	r3, #12
 8007634:	681d      	ldr	r5, [r3, #0]
 8007636:	6939      	ldr	r1, [r7, #16]
      eval_tensors[i].data.data =
 8007638:	69fa      	ldr	r2, [r7, #28]
 800763a:	4613      	mov	r3, r2
 800763c:	005b      	lsls	r3, r3, #1
 800763e:	4413      	add	r3, r2
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	461a      	mov	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	189c      	adds	r4, r3, r2
          memory_allocator_->AllocateFromTail(buffer_size, kBufferAlignment);
 8007648:	2210      	movs	r2, #16
 800764a:	47a8      	blx	r5
 800764c:	4603      	mov	r3, r0
      eval_tensors[i].data.data =
 800764e:	6023      	str	r3, [r4, #0]

      if (eval_tensors[i].data.data == nullptr) {
 8007650:	69fa      	ldr	r2, [r7, #28]
 8007652:	4613      	mov	r3, r2
 8007654:	005b      	lsls	r3, r3, #1
 8007656:	4413      	add	r3, r2
 8007658:	009b      	lsls	r3, r3, #2
 800765a:	461a      	mov	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	4413      	add	r3, r2
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2b00      	cmp	r3, #0
 8007664:	d108      	bne.n	8007678 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xc8>
        TF_LITE_REPORT_ERROR(error_reporter_,
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	689b      	ldr	r3, [r3, #8]
 800766a:	693a      	ldr	r2, [r7, #16]
 800766c:	4907      	ldr	r1, [pc, #28]	; (800768c <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xdc>)
 800766e:	4618      	mov	r0, r3
 8007670:	f7fc ff0c 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                             "Failed to allocate variable tensor of size %d",
                             buffer_size);
        return kTfLiteError;
 8007674:	2301      	movs	r3, #1
 8007676:	e004      	b.n	8007682 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0xd2>
  for (size_t i = 0; i < subgraph->tensors()->size(); ++i) {
 8007678:	69fb      	ldr	r3, [r7, #28]
 800767a:	3301      	adds	r3, #1
 800767c:	61fb      	str	r3, [r7, #28]
 800767e:	e79f      	b.n	80075c0 <_ZN6tflite14MicroAllocator17AllocateVariablesEPKNS_8SubGraphEP16TfLiteEvalTensor+0x10>
      }
    }
  }
  return kTfLiteOk;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3720      	adds	r7, #32
 8007686:	46bd      	mov	sp, r7
 8007688:	bdb0      	pop	{r4, r5, r7, pc}
 800768a:	bf00      	nop
 800768c:	08010b80 	.word	0x08010b80

08007690 <_ZN6tflite14MicroAllocator38AllocatePersistentTfLiteTensorInternalEPKNS_5ModelEP16TfLiteEvalTensori>:

TfLiteTensor* MicroAllocator::AllocatePersistentTfLiteTensorInternal(
    const Model* model, TfLiteEvalTensor* eval_tensors, int tensor_index) {
 8007690:	b580      	push	{r7, lr}
 8007692:	b084      	sub	sp, #16
 8007694:	af00      	add	r7, sp, #0
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	60b9      	str	r1, [r7, #8]
 800769a:	607a      	str	r2, [r7, #4]
 800769c:	603b      	str	r3, [r7, #0]
  return reinterpret_cast<TfLiteTensor*>(memory_allocator_->AllocateFromTail(
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6858      	ldr	r0, [r3, #4]
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	685b      	ldr	r3, [r3, #4]
      sizeof(TfLiteTensor), alignof(TfLiteTensor)));
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	330c      	adds	r3, #12
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2204      	movs	r2, #4
 80076ae:	2140      	movs	r1, #64	; 0x40
 80076b0:	4798      	blx	r3
 80076b2:	4603      	mov	r3, r0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <_ZN6tflite14MicroAllocator34PopulateTfLiteTensorFromFlatbufferEPKNS_5ModelEPKNS_8SubGraphEP12TfLiteTensorib>:

TfLiteStatus MicroAllocator::PopulateTfLiteTensorFromFlatbuffer(
    const Model* model, const SubGraph* subgraph, TfLiteTensor* tensor,
    int tensor_index, bool allocate_temp) {
 80076bc:	b5b0      	push	{r4, r5, r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	607a      	str	r2, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
  // TODO(b/162311891): This method serves as a stub to ensure quantized
  // allocations in the tail can be recorded. Once the interpreter has APIs for
  // accessing buffers on TfLiteEvalTensor this method can be dropped.
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	685c      	ldr	r4, [r3, #4]
      memory_allocator_, allocate_temp, *subgraph->tensors()->Get(tensor_index),
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f7fe fc80 	bl	8005fd4 <_ZNK6tflite8SubGraph7tensorsEv>
 80076d4:	4602      	mov	r2, r0
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f000 faf8 	bl	8007cd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 80076e0:	4605      	mov	r5, r0
  return internal::InitializeTfLiteTensorFromFlatbuffer(
 80076e2:	68b8      	ldr	r0, [r7, #8]
 80076e4:	f7fe fcf5 	bl	80060d2 <_ZNK6tflite5Model7buffersEv>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	689b      	ldr	r3, [r3, #8]
      model->buffers(), error_reporter_, tensor);
 80076ec:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	9201      	str	r2, [sp, #4]
 80076f4:	9300      	str	r3, [sp, #0]
 80076f6:	4603      	mov	r3, r0
 80076f8:	462a      	mov	r2, r5
 80076fa:	4620      	mov	r0, r4
 80076fc:	f7ff f8ce 	bl	800689c <_ZN6tflite8internal36InitializeTfLiteTensorFromFlatbufferEPNS_21SimpleMemoryAllocatorEbRKNS_6TensorEPKN11flatbuffers6VectorINS6_6OffsetINS_6BufferEEEEEPNS_13ErrorReporterEP12TfLiteTensor>
 8007700:	4603      	mov	r3, r0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800770c <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE>:

ErrorReporter* MicroAllocator::error_reporter() const {
  return error_reporter_;
}

const SubGraph* MicroAllocator::GetSubGraphFromModel(const Model* model) {
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
 8007714:	6039      	str	r1, [r7, #0]
  auto* subgraphs = model->subgraphs();
 8007716:	6838      	ldr	r0, [r7, #0]
 8007718:	f7fe fccd 	bl	80060b6 <_ZNK6tflite5Model9subgraphsEv>
 800771c:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 800771e:	68f8      	ldr	r0, [r7, #12]
 8007720:	f000 fb64 	bl	8007dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007724:	4603      	mov	r3, r0
 8007726:	2b01      	cmp	r3, #1
 8007728:	bf14      	ite	ne
 800772a:	2301      	movne	r3, #1
 800772c:	2300      	moveq	r3, #0
 800772e:	b2db      	uxtb	r3, r3
 8007730:	2b00      	cmp	r3, #0
 8007732:	d007      	beq.n	8007744 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x38>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	4907      	ldr	r1, [pc, #28]	; (8007758 <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x4c>)
 800773a:	4618      	mov	r0, r3
 800773c:	f7fc fea6 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    return nullptr;
 8007740:	2300      	movs	r3, #0
 8007742:	e004      	b.n	800774e <_ZN6tflite14MicroAllocator20GetSubGraphFromModelEPKNS_5ModelE+0x42>
  }
  return (*subgraphs)[0];
 8007744:	2100      	movs	r1, #0
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 fbec 	bl	8007f24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 800774c:	4603      	mov	r3, r0
}
 800774e:	4618      	mov	r0, r3
 8007750:	3710      	adds	r7, #16
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	08010bb0 	.word	0x08010bb0

0800775c <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE>:

TfLiteStatus MicroAllocator::CommitStaticMemoryPlan(
    const Model* model, const SubGraph* subgraph,
    TfLiteEvalTensor* eval_tensors,
    ScratchBufferHandle* scratch_buffer_handles) {
 800775c:	b590      	push	{r4, r7, lr}
 800775e:	b0a3      	sub	sp, #140	; 0x8c
 8007760:	af02      	add	r7, sp, #8
 8007762:	60f8      	str	r0, [r7, #12]
 8007764:	60b9      	str	r1, [r7, #8]
 8007766:	607a      	str	r2, [r7, #4]
 8007768:	603b      	str	r3, [r7, #0]
  size_t head_usage = 0;
 800776a:	2300      	movs	r3, #0
 800776c:	67fb      	str	r3, [r7, #124]	; 0x7c
  // Note that AllocationInfo is only needed for creating the plan. It will be
  // allocated from the temp section and cleaned up at the bottom of this
  // function.

  size_t allocation_info_count =
      subgraph->tensors()->size() + scratch_buffer_request_count_;
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7fe fc30 	bl	8005fd4 <_ZNK6tflite8SubGraph7tensorsEv>
 8007774:	4603      	mov	r3, r0
 8007776:	4618      	mov	r0, r3
 8007778:	f000 fa9c 	bl	8007cb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 800777c:	4602      	mov	r2, r0
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	4413      	add	r3, r2
 8007784:	67bb      	str	r3, [r7, #120]	; 0x78
  size_t bytes = sizeof(AllocationInfo) * allocation_info_count;
 8007786:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007788:	4613      	mov	r3, r2
 800778a:	005b      	lsls	r3, r3, #1
 800778c:	4413      	add	r3, r2
 800778e:	00db      	lsls	r3, r3, #3
 8007790:	677b      	str	r3, [r7, #116]	; 0x74

  // Allocate an array of AllocationInfo structs from the temp section. This
  // struct will be used by AllocationInfoBuilder to find buffer usage.
  AllocationInfo* allocation_info = reinterpret_cast<AllocationInfo*>(
      memory_allocator_->AllocateTemp(bytes, alignof(AllocationInfo)));
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6858      	ldr	r0, [r3, #4]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	685b      	ldr	r3, [r3, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	3310      	adds	r3, #16
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	2204      	movs	r2, #4
 80077a2:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80077a4:	4798      	blx	r3
 80077a6:	6738      	str	r0, [r7, #112]	; 0x70
  if (allocation_info == nullptr) {
 80077a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d108      	bne.n	80077c0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x64>
    TF_LITE_REPORT_ERROR(
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80077b4:	4983      	ldr	r1, [pc, #524]	; (80079c4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x268>)
 80077b6:	4618      	mov	r0, r3
 80077b8:	f7fc fe68 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to allocate memory for allocation_info, %d bytes required",
        bytes);
    return kTfLiteError;
 80077bc:	2401      	movs	r4, #1
 80077be:	e0fb      	b.n	80079b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
  }

  // Use the AllocationInfoBuilder class to help determine where buffers are
  // used in the subgraph.
  AllocationInfoBuilder builder(allocation_info, subgraph->tensors()->size(),
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7fe fc07 	bl	8005fd4 <_ZNK6tflite8SubGraph7tensorsEv>
 80077c6:	4603      	mov	r3, r0
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 fa73 	bl	8007cb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 80077ce:	4601      	mov	r1, r0
                                scratch_buffer_request_count_, error_reporter_);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	691a      	ldr	r2, [r3, #16]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	689b      	ldr	r3, [r3, #8]
 80077d8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80077dc:	9300      	str	r3, [sp, #0]
 80077de:	4613      	mov	r3, r2
 80077e0:	460a      	mov	r2, r1
 80077e2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80077e4:	f7fe fcf8 	bl	80061d8 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilderC1EPNS0_14AllocationInfoEjjPNS_13ErrorReporterE>

  const int32_t* offline_planner_offsets = nullptr;
 80077e8:	2300      	movs	r3, #0
 80077ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  TF_LITE_ENSURE_STATUS(
 80077ec:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80077f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80077f4:	68b9      	ldr	r1, [r7, #8]
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe febe 	bl	8006578 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder24GetOfflinePlannedOffsetsEPKNS_5ModelEPPKl>
 80077fc:	4603      	mov	r3, r0
 80077fe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007802:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007806:	2b00      	cmp	r3, #0
 8007808:	d002      	beq.n	8007810 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xb4>
 800780a:	f897 406f 	ldrb.w	r4, [r7, #111]	; 0x6f
 800780e:	e0d3      	b.n	80079b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
      builder.GetOfflinePlannedOffsets(model, &offline_planner_offsets));
  TF_LITE_ENSURE_STATUS(
 8007810:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007812:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	6879      	ldr	r1, [r7, #4]
 800781a:	f7fe fcf7 	bl	800620c <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder10AddTensorsEPKNS_8SubGraphEPKlP16TfLiteEvalTensor>
 800781e:	4603      	mov	r3, r0
 8007820:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8007824:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0xd6>
 800782c:	f897 406e 	ldrb.w	r4, [r7, #110]	; 0x6e
 8007830:	e0c2      	b.n	80079b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
      builder.AddTensors(subgraph, offline_planner_offsets, eval_tensors));

  internal::ScratchBufferRequest* scratch_buffer_requests =
      GetScratchBufferRequests();
 8007832:	68f8      	ldr	r0, [r7, #12]
 8007834:	f000 f911 	bl	8007a5a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>
 8007838:	66b8      	str	r0, [r7, #104]	; 0x68

  TF_LITE_ENSURE_STATUS(builder.AddScratchBuffers(scratch_buffer_requests,
 800783a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800783e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007842:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007844:	4618      	mov	r0, r3
 8007846:	f7fe ff13 	bl	8006670 <_ZN6tflite12_GLOBAL__N_121AllocationInfoBuilder17AddScratchBuffersEPNS_8internal20ScratchBufferRequestEPNS_19ScratchBufferHandleE>
 800784a:	4603      	mov	r3, r0
 800784c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007850:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007854:	2b00      	cmp	r3, #0
 8007856:	d002      	beq.n	800785e <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x102>
 8007858:	f897 4067 	ldrb.w	r4, [r7, #103]	; 0x67
 800785c:	e0ac      	b.n	80079b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
                                                  scratch_buffer_handles));

  // Remaining arena size that memory planner can use for calculating offsets.
  size_t remaining_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2110      	movs	r1, #16
 8007864:	4618      	mov	r0, r3
 8007866:	f002 f8a3 	bl	80099b0 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 800786a:	6638      	str	r0, [r7, #96]	; 0x60
  uint8_t* planner_arena =
      memory_allocator_->AllocateTemp(remaining_arena_size, kBufferAlignment);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6858      	ldr	r0, [r3, #4]
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	685b      	ldr	r3, [r3, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3310      	adds	r3, #16
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	2210      	movs	r2, #16
 800787c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800787e:	4798      	blx	r3
 8007880:	65f8      	str	r0, [r7, #92]	; 0x5c
  TF_LITE_ENSURE(error_reporter_, planner_arena != nullptr);
 8007882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007884:	2b00      	cmp	r3, #0
 8007886:	d10e      	bne.n	80078a6 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x14a>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6898      	ldr	r0, [r3, #8]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	6899      	ldr	r1, [r3, #8]
 8007890:	4b4d      	ldr	r3, [pc, #308]	; (80079c8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x26c>)
 8007892:	9301      	str	r3, [sp, #4]
 8007894:	f240 4333 	movw	r3, #1075	; 0x433
 8007898:	9300      	str	r3, [sp, #0]
 800789a:	4b4c      	ldr	r3, [pc, #304]	; (80079cc <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x270>)
 800789c:	4a4c      	ldr	r2, [pc, #304]	; (80079d0 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x274>)
 800789e:	f7fc fe0e 	bl	80044be <_ZN6tflite13ErrorReporter11ReportErrorEPvPKcz>
 80078a2:	2401      	movs	r4, #1
 80078a4:	e088      	b.n	80079b8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x25c>
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 80078a6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80078a8:	f107 0310 	add.w	r3, r7, #16
 80078ac:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80078ae:	4618      	mov	r0, r3
 80078b0:	f004 f9da 	bl	800bc68 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>
  TF_LITE_ENSURE_STATUS(CreatePlan(error_reporter_, &planner, allocation_info,
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6898      	ldr	r0, [r3, #8]
 80078b8:	f107 0110 	add.w	r1, r7, #16
 80078bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80078be:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80078c0:	f7fe ff21 	bl	8006706 <_ZN6tflite12_GLOBAL__N_110CreatePlanEPNS_13ErrorReporterEPNS_19GreedyMemoryPlannerEPKNS0_14AllocationInfoEj>
 80078c4:	4603      	mov	r3, r0
 80078c6:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
 80078ca:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d002      	beq.n	80078d8 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x17c>
 80078d2:	f897 405b 	ldrb.w	r4, [r7, #91]	; 0x5b
 80078d6:	e06a      	b.n	80079ae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
                                   allocation_info_count));

  // Reset all temp allocations used above:
  memory_allocator_->ResetTempAllocations();
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	685b      	ldr	r3, [r3, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	3314      	adds	r3, #20
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4610      	mov	r0, r2
 80078e8:	4798      	blx	r3

  size_t actual_available_arena_size =
      memory_allocator_->GetAvailableMemory(kBufferAlignment);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	2110      	movs	r1, #16
 80078f0:	4618      	mov	r0, r3
 80078f2:	f002 f85d 	bl	80099b0 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>
 80078f6:	6578      	str	r0, [r7, #84]	; 0x54

  // Make sure we have enough arena size.
  if (planner.GetMaximumMemorySize() > actual_available_arena_size) {
 80078f8:	f107 0310 	add.w	r3, r7, #16
 80078fc:	4618      	mov	r0, r3
 80078fe:	f004 fc6c 	bl	800c1da <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8007902:	4602      	mov	r2, r0
 8007904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007906:	4293      	cmp	r3, r2
 8007908:	bf34      	ite	cc
 800790a:	2301      	movcc	r3, #1
 800790c:	2300      	movcs	r3, #0
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b00      	cmp	r3, #0
 8007912:	d00e      	beq.n	8007932 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x1d6>
    TF_LITE_REPORT_ERROR(
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	689c      	ldr	r4, [r3, #8]
 8007918:	f107 0310 	add.w	r3, r7, #16
 800791c:	4618      	mov	r0, r3
 800791e:	f004 fc5c 	bl	800c1da <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8007922:	4602      	mov	r2, r0
 8007924:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007926:	492b      	ldr	r1, [pc, #172]	; (80079d4 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x278>)
 8007928:	4620      	mov	r0, r4
 800792a:	f7fc fdaf 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Arena size is too small for all buffers. Needed %u but only "
        "%u was available.",
        planner.GetMaximumMemorySize(), actual_available_arena_size);
    return kTfLiteError;
 800792e:	2401      	movs	r4, #1
 8007930:	e03d      	b.n	80079ae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
  }
  // Commit the plan.
  TF_LITE_ENSURE_STATUS(CommitPlan(error_reporter_, &planner,
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	689c      	ldr	r4, [r3, #8]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	685b      	ldr	r3, [r3, #4]
 800793a:	4618      	mov	r0, r3
 800793c:	f002 f82c 	bl	8009998 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8007940:	4602      	mov	r2, r0
 8007942:	f107 0110 	add.w	r1, r7, #16
 8007946:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007948:	9300      	str	r3, [sp, #0]
 800794a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800794c:	4620      	mov	r0, r4
 800794e:	f7fe ff34 	bl	80067ba <_ZN6tflite12_GLOBAL__N_110CommitPlanEPNS_13ErrorReporterEPNS_13MemoryPlannerEPhPKNS0_14AllocationInfoEj>
 8007952:	4603      	mov	r3, r0
 8007954:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
 8007958:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800795c:	2b00      	cmp	r3, #0
 800795e:	d002      	beq.n	8007966 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x20a>
 8007960:	f897 4053 	ldrb.w	r4, [r7, #83]	; 0x53
 8007964:	e023      	b.n	80079ae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
                                   memory_allocator_->GetHeadBuffer(),
                                   allocation_info, allocation_info_count));
  head_usage = planner.GetMaximumMemorySize();
 8007966:	f107 0310 	add.w	r3, r7, #16
 800796a:	4618      	mov	r0, r3
 800796c:	f004 fc35 	bl	800c1da <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>
 8007970:	67f8      	str	r0, [r7, #124]	; 0x7c
  // The head is used to store memory plans for one model at a time during the
  // model preparation stage, and is re-purposed to store scratch buffer handles
  // during model invocation. The head must be as large as the greater of the
  // largest model memory plan's size and the total space required for all
  // scratch buffer handles.
  if (max_head_buffer_usage_ < head_usage) {
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	695b      	ldr	r3, [r3, #20]
 8007976:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007978:	429a      	cmp	r2, r3
 800797a:	d902      	bls.n	8007982 <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x226>
    max_head_buffer_usage_ = head_usage;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007980:	615a      	str	r2, [r3, #20]
  }

  // The head is used for storing scratch buffer allocations before finalizing a
  // memory plan in this function. Ensure that the head is set to the largest
  // memory plan sent through the allocator:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6858      	ldr	r0, [r3, #4]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	3308      	adds	r3, #8
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	68fa      	ldr	r2, [r7, #12]
 8007992:	6951      	ldr	r1, [r2, #20]
 8007994:	2210      	movs	r2, #16
 8007996:	4798      	blx	r3
 8007998:	4603      	mov	r3, r0
 800799a:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 800799e:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d002      	beq.n	80079ac <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x250>
 80079a6:	f897 4052 	ldrb.w	r4, [r7, #82]	; 0x52
 80079aa:	e000      	b.n	80079ae <_ZN6tflite14MicroAllocator22CommitStaticMemoryPlanEPKNS_5ModelEPKNS_8SubGraphEP16TfLiteEvalTensorPNS_19ScratchBufferHandleE+0x252>
      max_head_buffer_usage_, kBufferAlignment));
  return kTfLiteOk;
 80079ac:	2400      	movs	r4, #0
  GreedyMemoryPlanner planner(planner_arena, remaining_arena_size);
 80079ae:	f107 0310 	add.w	r3, r7, #16
 80079b2:	4618      	mov	r0, r3
 80079b4:	f004 f9aa 	bl	800bd0c <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 80079b8:	4623      	mov	r3, r4
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	3784      	adds	r7, #132	; 0x84
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd90      	pop	{r4, r7, pc}
 80079c2:	bf00      	nop
 80079c4:	08010bdc 	.word	0x08010bdc
 80079c8:	08010c74 	.word	0x08010c74
 80079cc:	08010c20 	.word	0x08010c20
 80079d0:	08010c5c 	.word	0x08010c5c
 80079d4:	08010c90 	.word	0x08010c90

080079d8 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj>:

TfLiteStatus MicroAllocator::AllocateScratchBufferHandles(
    ScratchBufferHandle** scratch_buffer_handles, size_t handle_count) {
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(scratch_buffer_handles != nullptr);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x16>
 80079ea:	f004 fdb3 	bl	800c554 <abort>

  if (scratch_buffer_request_count_ == 0) {
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x22>
    // No scratch buffer requests were requested during model allocation.
    return kTfLiteOk;
 80079f6:	2300      	movs	r3, #0
 80079f8:	e00e      	b.n	8007a18 <_ZN6tflite14MicroAllocator28AllocateScratchBufferHandlesEPPNS_19ScratchBufferHandleEj+0x40>
  }

  // Allocate a consecutive block of memory store the scratch buffer handles.
  // This alignment ensures quick lookup during inference time for the model:
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
      memory_allocator_->AllocateFromTail(
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	6858      	ldr	r0, [r3, #4]
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	685b      	ldr	r3, [r3, #4]
          sizeof(ScratchBufferHandle) * handle_count,
          alignof(ScratchBufferHandle)));
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	330c      	adds	r3, #12
 8007a06:	681b      	ldr	r3, [r3, #0]
      memory_allocator_->AllocateFromTail(
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	0091      	lsls	r1, r2, #2
 8007a0c:	2204      	movs	r2, #4
 8007a0e:	4798      	blx	r3
 8007a10:	4602      	mov	r2, r0
  *scratch_buffer_handles = reinterpret_cast<ScratchBufferHandle*>(
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3710      	adds	r7, #16
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv>:

TfLiteStatus MicroAllocator::InitScratchBufferData() {
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  // A model is preparing to allocate resources, ensure that scratch buffer
  // request counter is cleared:
  scratch_buffer_request_count_ = 0;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	611a      	str	r2, [r3, #16]

  // All requests will be stored in the head section. Each kernel is allowed at
  // most kMaxScratchBuffersPerOp requests. Adjust the head to reserve at most
  // that many requests to begin:
  TF_LITE_ENSURE_STATUS(memory_allocator_->SetHeadBufferSize(
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6858      	ldr	r0, [r3, #4]
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	685b      	ldr	r3, [r3, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	3308      	adds	r3, #8
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	2140      	movs	r1, #64	; 0x40
 8007a40:	4798      	blx	r3
 8007a42:	4603      	mov	r3, r0
 8007a44:	73fb      	strb	r3, [r7, #15]
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x30>
 8007a4c:	7bfb      	ldrb	r3, [r7, #15]
 8007a4e:	e000      	b.n	8007a52 <_ZN6tflite14MicroAllocator21InitScratchBufferDataEv+0x32>
      sizeof(internal::ScratchBufferRequest) * kMaxScratchBuffersPerOp,
      alignof(internal::ScratchBufferRequest)));

  return kTfLiteOk;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3710      	adds	r7, #16
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <_ZN6tflite14MicroAllocator24GetScratchBufferRequestsEv>:

internal::ScratchBufferRequest* MicroAllocator::GetScratchBufferRequests() {
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  return reinterpret_cast<internal::ScratchBufferRequest*>(
      AlignPointerUp(memory_allocator_->GetHeadBuffer(),
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	685b      	ldr	r3, [r3, #4]
 8007a66:	4618      	mov	r0, r3
 8007a68:	f001 ff96 	bl	8009998 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>
 8007a6c:	4603      	mov	r3, r0
                     alignof(internal::ScratchBufferRequest)));
 8007a6e:	2104      	movs	r1, #4
 8007a70:	4618      	mov	r0, r3
 8007a72:	f7fe f8cc 	bl	8005c0e <_ZN6tflite14AlignPointerUpEPhj>
 8007a76:	4603      	mov	r3, r0
}
 8007a78:	4618      	mov	r0, r3
 8007a7a:	3708      	adds	r7, #8
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	bd80      	pop	{r7, pc}

08007a80 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007a80:	b580      	push	{r7, lr}
 8007a82:	b082      	sub	sp, #8
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
 8007a88:	460b      	mov	r3, r1
 8007a8a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007a8c:	887b      	ldrh	r3, [r7, #2]
 8007a8e:	4619      	mov	r1, r3
 8007a90:	6878      	ldr	r0, [r7, #4]
 8007a92:	f000 faaf 	bl	8007ff4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>
 8007a96:	4603      	mov	r3, r0
  }
 8007a98:	4618      	mov	r0, r3
 8007a9a:	3708      	adds	r7, #8
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	bd80      	pop	{r7, pc}

08007aa0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b082      	sub	sp, #8
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	460b      	mov	r3, r1
 8007aaa:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007aac:	887b      	ldrh	r3, [r7, #2]
 8007aae:	4619      	mov	r1, r3
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f000 fabf 	bl	8008034 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>
 8007ab6:	4603      	mov	r3, r0
  }
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3708      	adds	r7, #8
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b082      	sub	sp, #8
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	6078      	str	r0, [r7, #4]
 8007ac8:	460b      	mov	r3, r1
 8007aca:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007acc:	887b      	ldrh	r3, [r7, #2]
 8007ace:	4619      	mov	r1, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f000 facf 	bl	8008074 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>
 8007ad6:	4603      	mov	r3, r0
  }
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3708      	adds	r7, #8
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}

08007ae0 <_ZNK11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b082      	sub	sp, #8
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	460b      	mov	r3, r1
 8007aea:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007aec:	887b      	ldrh	r3, [r7, #2]
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f000 fadf 	bl	80080b4 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>
 8007af6:	4603      	mov	r3, r0
  }
 8007af8:	4618      	mov	r0, r3
 8007afa:	3708      	adds	r7, #8
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	460b      	mov	r3, r1
 8007b0a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007b0c:	887b      	ldrh	r3, [r7, #2]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 faef 	bl	80080f4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>
 8007b16:	4603      	mov	r3, r0
  }
 8007b18:	4618      	mov	r0, r3
 8007b1a:	3708      	adds	r7, #8
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	bd80      	pop	{r7, pc}

08007b20 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	460b      	mov	r3, r1
 8007b2a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007b2c:	887b      	ldrh	r3, [r7, #2]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 faff 	bl	8008134 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>
 8007b36:	4603      	mov	r3, r0
  }
 8007b38:	4618      	mov	r0, r3
 8007b3a:	3708      	adds	r7, #8
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	bd80      	pop	{r7, pc}

08007b40 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007b40:	b580      	push	{r7, lr}
 8007b42:	b082      	sub	sp, #8
 8007b44:	af00      	add	r7, sp, #0
 8007b46:	6078      	str	r0, [r7, #4]
 8007b48:	460b      	mov	r3, r1
 8007b4a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007b4c:	887b      	ldrh	r3, [r7, #2]
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f000 fb0f 	bl	8008174 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>
 8007b56:	4603      	mov	r3, r0
  }
 8007b58:	4618      	mov	r0, r3
 8007b5a:	3708      	adds	r7, #8
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b082      	sub	sp, #8
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007b6c:	887b      	ldrh	r3, [r7, #2]
 8007b6e:	4619      	mov	r1, r3
 8007b70:	6878      	ldr	r0, [r7, #4]
 8007b72:	f000 fb1f 	bl	80081b4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>
 8007b76:	4603      	mov	r3, r0
  }
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3708      	adds	r7, #8
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	460b      	mov	r3, r1
 8007b8a:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007b8c:	887b      	ldrh	r3, [r7, #2]
 8007b8e:	4619      	mov	r1, r3
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f000 fb2f 	bl	80081f4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>
 8007b96:	4603      	mov	r3, r0
  }
 8007b98:	4618      	mov	r0, r3
 8007b9a:	3708      	adds	r7, #8
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <_ZNK11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) const {
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b082      	sub	sp, #8
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
 8007ba8:	460b      	mov	r3, r1
 8007baa:	807b      	strh	r3, [r7, #2]
    return const_cast<Table *>(this)->GetPointer<P>(field);
 8007bac:	887b      	ldrh	r3, [r7, #2]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f000 fb3f 	bl	8008234 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>
 8007bb6:	4603      	mov	r3, r0
  }
 8007bb8:	4618      	mov	r0, r3
 8007bba:	3708      	adds	r7, #8
 8007bbc:	46bd      	mov	sp, r7
 8007bbe:	bd80      	pop	{r7, pc}

08007bc0 <_ZNK11flatbuffers6VectorIhE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b082      	sub	sp, #8
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4618      	mov	r0, r3
 8007bce:	f7f9 fe03 	bl	80017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3708      	adds	r7, #8
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	bd80      	pop	{r7, pc}

08007bdc <_ZNK11flatbuffers6VectorIfE4sizeEv>:
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b082      	sub	sp, #8
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f7f9 fdf5 	bl	80017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3708      	adds	r7, #8
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <_ZNK11flatbuffers6VectorIfE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007bf8:	b580      	push	{r7, lr}
 8007bfa:	b082      	sub	sp, #8
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff ffea 	bl	8007bdc <_ZNK11flatbuffers6VectorIfE4sizeEv>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	683b      	ldr	r3, [r7, #0]
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d306      	bcc.n	8007c1e <_ZNK11flatbuffers6VectorIfE3GetEm+0x26>
 8007c10:	4b0a      	ldr	r3, [pc, #40]	; (8007c3c <_ZNK11flatbuffers6VectorIfE3GetEm+0x44>)
 8007c12:	4a0b      	ldr	r2, [pc, #44]	; (8007c40 <_ZNK11flatbuffers6VectorIfE3GetEm+0x48>)
 8007c14:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007c18:	480a      	ldr	r0, [pc, #40]	; (8007c44 <_ZNK11flatbuffers6VectorIfE3GetEm+0x4c>)
 8007c1a:	f004 fca3 	bl	800c564 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f000 fb4a 	bl	80082b8 <_ZNK11flatbuffers6VectorIfE4DataEv>
 8007c24:	4603      	mov	r3, r0
 8007c26:	6839      	ldr	r1, [r7, #0]
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f000 fb2f 	bl	800828c <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>
 8007c2e:	eef0 7a40 	vmov.f32	s15, s0
  }
 8007c32:	eeb0 0a67 	vmov.f32	s0, s15
 8007c36:	3708      	adds	r7, #8
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	08010ce0 	.word	0x08010ce0
 8007c40:	0801256c 	.word	0x0801256c
 8007c44:	08010cec 	.word	0x08010cec

08007c48 <_ZNK11flatbuffers6VectorIxE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4618      	mov	r0, r3
 8007c56:	f7f9 fdbf 	bl	80017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}

08007c64 <_ZNK11flatbuffers6VectorIxE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007c64:	b590      	push	{r4, r7, lr}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
 8007c6c:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f7ff ffea 	bl	8007c48 <_ZNK11flatbuffers6VectorIxE4sizeEv>
 8007c74:	4602      	mov	r2, r0
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d306      	bcc.n	8007c8a <_ZNK11flatbuffers6VectorIxE3GetEm+0x26>
 8007c7c:	4b0a      	ldr	r3, [pc, #40]	; (8007ca8 <_ZNK11flatbuffers6VectorIxE3GetEm+0x44>)
 8007c7e:	4a0b      	ldr	r2, [pc, #44]	; (8007cac <_ZNK11flatbuffers6VectorIxE3GetEm+0x48>)
 8007c80:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007c84:	480a      	ldr	r0, [pc, #40]	; (8007cb0 <_ZNK11flatbuffers6VectorIxE3GetEm+0x4c>)
 8007c86:	f004 fc6d 	bl	800c564 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fb36 	bl	80082fc <_ZNK11flatbuffers6VectorIxE4DataEv>
 8007c90:	4603      	mov	r3, r0
 8007c92:	6839      	ldr	r1, [r7, #0]
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 fb1b 	bl	80082d0 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	460c      	mov	r4, r1
  }
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd90      	pop	{r4, r7, pc}
 8007ca8:	08010ce0 	.word	0x08010ce0
 8007cac:	08012634 	.word	0x08012634
 8007cb0:	08010cec 	.word	0x08010cec

08007cb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b082      	sub	sp, #8
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7f9 fd89 	bl	80017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}

08007cd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007cd0:	b580      	push	{r7, lr}
 8007cd2:	b082      	sub	sp, #8
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f7ff ffea 	bl	8007cb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d306      	bcc.n	8007cf6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x26>
 8007ce8:	4b09      	ldr	r3, [pc, #36]	; (8007d10 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x40>)
 8007cea:	4a0a      	ldr	r2, [pc, #40]	; (8007d14 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x44>)
 8007cec:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007cf0:	4809      	ldr	r0, [pc, #36]	; (8007d18 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm+0x48>)
 8007cf2:	f004 fc37 	bl	800c564 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007cf6:	6878      	ldr	r0, [r7, #4]
 8007cf8:	f000 fb20 	bl	800833c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>
 8007cfc:	4603      	mov	r3, r0
 8007cfe:	6839      	ldr	r1, [r7, #0]
 8007d00:	4618      	mov	r0, r3
 8007d02:	f000 fb07 	bl	8008314 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>
 8007d06:	4603      	mov	r3, r0
  }
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3708      	adds	r7, #8
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}
 8007d10:	08010ce0 	.word	0x08010ce0
 8007d14:	08012378 	.word	0x08012378
 8007d18:	08010cec 	.word	0x08010cec

08007d1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7f9 fd55 	bl	80017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	4618      	mov	r0, r3
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b082      	sub	sp, #8
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
 8007d40:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7ff ffea 	bl	8007d1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8007d48:	4602      	mov	r2, r0
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d306      	bcc.n	8007d5e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x26>
 8007d50:	4b09      	ldr	r3, [pc, #36]	; (8007d78 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x40>)
 8007d52:	4a0a      	ldr	r2, [pc, #40]	; (8007d7c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x44>)
 8007d54:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007d58:	4809      	ldr	r0, [pc, #36]	; (8007d80 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE3GetEm+0x48>)
 8007d5a:	f004 fc03 	bl	800c564 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fb0c 	bl	800837c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>
 8007d64:	4603      	mov	r3, r0
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 faf3 	bl	8008354 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>
 8007d6e:	4603      	mov	r3, r0
  }
 8007d70:	4618      	mov	r0, r3
 8007d72:	3708      	adds	r7, #8
 8007d74:	46bd      	mov	sp, r7
 8007d76:	bd80      	pop	{r7, pc}
 8007d78:	08010ce0 	.word	0x08010ce0
 8007d7c:	08012470 	.word	0x08012470
 8007d80:	08010cec 	.word	0x08010cec

08007d84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7f9 fd21 	bl	80017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007d96:	4603      	mov	r3, r0
 8007d98:	4618      	mov	r0, r3
 8007d9a:	3708      	adds	r7, #8
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b082      	sub	sp, #8
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f7ff ffea 	bl	8007d84 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4sizeEv>
 8007db0:	4602      	mov	r2, r0
 8007db2:	683b      	ldr	r3, [r7, #0]
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d306      	bcc.n	8007dc6 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x26>
 8007db8:	4b09      	ldr	r3, [pc, #36]	; (8007de0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x40>)
 8007dba:	4a0a      	ldr	r2, [pc, #40]	; (8007de4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x44>)
 8007dbc:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007dc0:	4809      	ldr	r0, [pc, #36]	; (8007de8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm+0x48>)
 8007dc2:	f004 fbcf 	bl	800c564 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 faf8 	bl	80083bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	6839      	ldr	r1, [r7, #0]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f000 fadf 	bl	8008394 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>
 8007dd6:	4603      	mov	r3, r0
  }
 8007dd8:	4618      	mov	r0, r3
 8007dda:	3708      	adds	r7, #8
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}
 8007de0:	08010ce0 	.word	0x08010ce0
 8007de4:	0801270c 	.word	0x0801270c
 8007de8:	08010cec 	.word	0x08010cec

08007dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4618      	mov	r0, r3
 8007dfa:	f7f9 fced 	bl	80017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007dfe:	4603      	mov	r3, r0
 8007e00:	4618      	mov	r0, r3
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}

08007e08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
 8007e10:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7ff ffea 	bl	8007dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 8007e18:	4602      	mov	r2, r0
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d306      	bcc.n	8007e2e <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x26>
 8007e20:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x40>)
 8007e22:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x44>)
 8007e24:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007e28:	4809      	ldr	r0, [pc, #36]	; (8007e50 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm+0x48>)
 8007e2a:	f004 fb9b 	bl	800c564 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fae4 	bl	80083fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>
 8007e34:	4603      	mov	r3, r0
 8007e36:	6839      	ldr	r1, [r7, #0]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 facb 	bl	80083d4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>
 8007e3e:	4603      	mov	r3, r0
  }
 8007e40:	4618      	mov	r0, r3
 8007e42:	3708      	adds	r7, #8
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	08010ce0 	.word	0x08010ce0
 8007e4c:	08012184 	.word	0x08012184
 8007e50:	08010cec 	.word	0x08010cec

08007e54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4618      	mov	r0, r3
 8007e62:	f7f9 fcb9 	bl	80017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007e66:	4603      	mov	r3, r0
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3708      	adds	r7, #8
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b082      	sub	sp, #8
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff ffea 	bl	8007e54 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4sizeEv>
 8007e80:	4602      	mov	r2, r0
 8007e82:	683b      	ldr	r3, [r7, #0]
 8007e84:	4293      	cmp	r3, r2
 8007e86:	d306      	bcc.n	8007e96 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x26>
 8007e88:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x40>)
 8007e8a:	4a0a      	ldr	r2, [pc, #40]	; (8007eb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x44>)
 8007e8c:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007e90:	4809      	ldr	r0, [pc, #36]	; (8007eb8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm+0x48>)
 8007e92:	f004 fb67 	bl	800c564 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f000 fad0 	bl	800843c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>
 8007e9c:	4603      	mov	r3, r0
 8007e9e:	6839      	ldr	r1, [r7, #0]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 fab7 	bl	8008414 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>
 8007ea6:	4603      	mov	r3, r0
  }
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3708      	adds	r7, #8
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}
 8007eb0:	08010ce0 	.word	0x08010ce0
 8007eb4:	08012280 	.word	0x08012280
 8007eb8:	08010cec 	.word	0x08010cec

08007ebc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>:
  uoffset_t size() const { return EndianScalar(length_); }
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b082      	sub	sp, #8
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7f9 fc85 	bl	80017d8 <_ZN11flatbuffers12EndianScalarImEET_S1_>
 8007ece:	4603      	mov	r3, r0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3708      	adds	r7, #8
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm>:
  return_type Get(uoffset_t i) const {
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b082      	sub	sp, #8
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	6039      	str	r1, [r7, #0]
    FLATBUFFERS_ASSERT(i < size());
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7ff ffea 	bl	8007ebc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4sizeEv>
 8007ee8:	4602      	mov	r2, r0
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	4293      	cmp	r3, r2
 8007eee:	d306      	bcc.n	8007efe <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x26>
 8007ef0:	4b09      	ldr	r3, [pc, #36]	; (8007f18 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x40>)
 8007ef2:	4a0a      	ldr	r2, [pc, #40]	; (8007f1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x44>)
 8007ef4:	f44f 7183 	mov.w	r1, #262	; 0x106
 8007ef8:	4809      	ldr	r0, [pc, #36]	; (8007f20 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE3GetEm+0x48>)
 8007efa:	f004 fb33 	bl	800c564 <__assert_func>
    return IndirectHelper<T>::Read(Data(), i);
 8007efe:	6878      	ldr	r0, [r7, #4]
 8007f00:	f000 fabc 	bl	800847c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>
 8007f04:	4603      	mov	r3, r0
 8007f06:	6839      	ldr	r1, [r7, #0]
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f000 faa3 	bl	8008454 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>
 8007f0e:	4603      	mov	r3, r0
  }
 8007f10:	4618      	mov	r0, r3
 8007f12:	3708      	adds	r7, #8
 8007f14:	46bd      	mov	sp, r7
 8007f16:	bd80      	pop	{r7, pc}
 8007f18:	08010ce0 	.word	0x08010ce0
 8007f1c:	08012088 	.word	0x08012088
 8007f20:	08010cec 	.word	0x08010cec

08007f24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8007f24:	b580      	push	{r7, lr}
 8007f26:	b082      	sub	sp, #8
 8007f28:	af00      	add	r7, sp, #0
 8007f2a:	6078      	str	r0, [r7, #4]
 8007f2c:	6039      	str	r1, [r7, #0]
 8007f2e:	6839      	ldr	r1, [r7, #0]
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff ff69 	bl	8007e08 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE3GetEm>
 8007f36:	4603      	mov	r3, r0
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3708      	adds	r7, #8
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}

08007f40 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEEixEm>:
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
 8007f48:	6039      	str	r1, [r7, #0]
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f7ff ff8f 	bl	8007e70 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE3GetEm>
 8007f52:	4603      	mov	r3, r0
 8007f54:	4618      	mov	r0, r3
 8007f56:	3708      	adds	r7, #8
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <_ZNK11flatbuffers6VectorIhE4dataEv>:
  const T *data() const { return reinterpret_cast<const T *>(Data()); }
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b082      	sub	sp, #8
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 f985 	bl	8008274 <_ZNK11flatbuffers6VectorIhE4DataEv>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3708      	adds	r7, #8
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b084      	sub	sp, #16
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	60f8      	str	r0, [r7, #12]
 8007f7c:	60b9      	str	r1, [r7, #8]
 8007f7e:	607a      	str	r2, [r7, #4]
 8007f80:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d101      	bne.n	8007f8c <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8007f88:	f004 fae4 	bl	800c554 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d101      	bne.n	8007f96 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIl14TfLiteIntArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8007f92:	f004 fadf 	bl	800c554 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8007f9c:	2300      	movs	r3, #0
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3710      	adds	r7, #16
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}

08007fa6 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_>:
TfLiteStatus FlatBufferVectorToTfLiteTypeArray(
 8007fa6:	b580      	push	{r7, lr}
 8007fa8:	b084      	sub	sp, #16
 8007faa:	af00      	add	r7, sp, #0
 8007fac:	60f8      	str	r0, [r7, #12]
 8007fae:	60b9      	str	r1, [r7, #8]
 8007fb0:	607a      	str	r2, [r7, #4]
 8007fb2:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(error_reporter != nullptr);
 8007fb4:	68bb      	ldr	r3, [r7, #8]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d101      	bne.n	8007fbe <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x18>
 8007fba:	f004 facb 	bl	800c554 <abort>
  TFLITE_DCHECK(flatbuffer_array != nullptr);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d101      	bne.n	8007fc8 <_ZN6tflite8internal33FlatBufferVectorToTfLiteTypeArrayIf16TfLiteFloatArrayEE12TfLiteStatusPNS_21SimpleMemoryAllocatorEPNS_13ErrorReporterEPKN11flatbuffers6VectorIT_EEPPT0_+0x22>
 8007fc4:	f004 fac6 	bl	800c554 <abort>
    *result = const_cast<kTfLiteArrayType*>(
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8007fce:	2300      	movs	r3, #0
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3710      	adds	r7, #16
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd80      	pop	{r7, pc}

08007fd8 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEixEm>:
  return_type operator[](uoffset_t i) const { return Get(i); }
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
 8007fe2:	6839      	ldr	r1, [r7, #0]
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f7ff fedb 	bl	8007da0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE3GetEm>
 8007fea:	4603      	mov	r3, r0
 8007fec:	4618      	mov	r0, r3
 8007fee:	3708      	adds	r7, #8
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b084      	sub	sp, #16
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	460b      	mov	r3, r1
 8007ffe:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008000:	887b      	ldrh	r3, [r7, #2]
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7f9 f875 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800800a:	4603      	mov	r3, r0
 800800c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	89fb      	ldrh	r3, [r7, #14]
 8008012:	4413      	add	r3, r2
 8008014:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008016:	89fb      	ldrh	r3, [r7, #14]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d006      	beq.n	800802a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x36>
 800801c:	68b8      	ldr	r0, [r7, #8]
 800801e:	f7f9 fbf4 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008022:	4602      	mov	r2, r0
 8008024:	68bb      	ldr	r3, [r7, #8]
 8008026:	4413      	add	r3, r2
                        : nullptr;
 8008028:	e000      	b.n	800802c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIhEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800802a:	2300      	movs	r3, #0
  }
 800802c:	4618      	mov	r0, r3
 800802e:	3710      	adds	r7, #16
 8008030:	46bd      	mov	sp, r7
 8008032:	bd80      	pop	{r7, pc}

08008034 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008034:	b580      	push	{r7, lr}
 8008036:	b084      	sub	sp, #16
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	460b      	mov	r3, r1
 800803e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008040:	887b      	ldrh	r3, [r7, #2]
 8008042:	4619      	mov	r1, r3
 8008044:	6878      	ldr	r0, [r7, #4]
 8008046:	f7f9 f855 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800804a:	4603      	mov	r3, r0
 800804c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	89fb      	ldrh	r3, [r7, #14]
 8008052:	4413      	add	r3, r2
 8008054:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008056:	89fb      	ldrh	r3, [r7, #14]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d006      	beq.n	800806a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x36>
 800805c:	68b8      	ldr	r0, [r7, #8]
 800805e:	f7f9 fbd4 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008062:	4602      	mov	r2, r0
 8008064:	68bb      	ldr	r3, [r7, #8]
 8008066:	4413      	add	r3, r2
                        : nullptr;
 8008068:	e000      	b.n	800806c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIfEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800806a:	2300      	movs	r3, #0
  }
 800806c:	4618      	mov	r0, r3
 800806e:	3710      	adds	r7, #16
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}

08008074 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
 800807c:	460b      	mov	r3, r1
 800807e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008080:	887b      	ldrh	r3, [r7, #2]
 8008082:	4619      	mov	r1, r3
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	f7f9 f835 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800808a:	4603      	mov	r3, r0
 800808c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	89fb      	ldrh	r3, [r7, #14]
 8008092:	4413      	add	r3, r2
 8008094:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008096:	89fb      	ldrh	r3, [r7, #14]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d006      	beq.n	80080aa <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x36>
 800809c:	68b8      	ldr	r0, [r7, #8]
 800809e:	f7f9 fbb4 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80080a2:	4602      	mov	r2, r0
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	4413      	add	r3, r2
                        : nullptr;
 80080a8:	e000      	b.n	80080ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorIxEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80080aa:	2300      	movs	r3, #0
  }
 80080ac:	4618      	mov	r0, r3
 80080ae:	3710      	adds	r7, #16
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b084      	sub	sp, #16
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80080c0:	887b      	ldrh	r3, [r7, #2]
 80080c2:	4619      	mov	r1, r3
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f7f9 f815 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80080ca:	4603      	mov	r3, r0
 80080cc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80080ce:	687a      	ldr	r2, [r7, #4]
 80080d0:	89fb      	ldrh	r3, [r7, #14]
 80080d2:	4413      	add	r3, r2
 80080d4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80080d6:	89fb      	ldrh	r3, [r7, #14]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d006      	beq.n	80080ea <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x36>
 80080dc:	68b8      	ldr	r0, [r7, #8]
 80080de:	f7f9 fb94 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80080e2:	4602      	mov	r2, r0
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	4413      	add	r3, r2
                        : nullptr;
 80080e8:	e000      	b.n	80080ec <_ZN11flatbuffers5Table10GetPointerIPKN6tflite22QuantizationParametersEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80080ea:	2300      	movs	r3, #0
  }
 80080ec:	4618      	mov	r0, r3
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	460b      	mov	r3, r1
 80080fe:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008100:	887b      	ldrh	r3, [r7, #2]
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f7f8 fff5 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800810a:	4603      	mov	r3, r0
 800810c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800810e:	687a      	ldr	r2, [r7, #4]
 8008110:	89fb      	ldrh	r3, [r7, #14]
 8008112:	4413      	add	r3, r2
 8008114:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008116:	89fb      	ldrh	r3, [r7, #14]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d006      	beq.n	800812a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x36>
 800811c:	68b8      	ldr	r0, [r7, #8]
 800811e:	f7f9 fb74 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008122:	4602      	mov	r2, r0
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	4413      	add	r3, r2
                        : nullptr;
 8008128:	e000      	b.n	800812c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6TensorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800812a:	2300      	movs	r3, #0
  }
 800812c:	4618      	mov	r0, r3
 800812e:	3710      	adds	r7, #16
 8008130:	46bd      	mov	sp, r7
 8008132:	bd80      	pop	{r7, pc}

08008134 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008134:	b580      	push	{r7, lr}
 8008136:	b084      	sub	sp, #16
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	460b      	mov	r3, r1
 800813e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008140:	887b      	ldrh	r3, [r7, #2]
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f7f8 ffd5 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800814a:	4603      	mov	r3, r0
 800814c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	89fb      	ldrh	r3, [r7, #14]
 8008152:	4413      	add	r3, r2
 8008154:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008156:	89fb      	ldrh	r3, [r7, #14]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d006      	beq.n	800816a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x36>
 800815c:	68b8      	ldr	r0, [r7, #8]
 800815e:	f7f9 fb54 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008162:	4602      	mov	r2, r0
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	4413      	add	r3, r2
                        : nullptr;
 8008168:	e000      	b.n	800816c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8OperatorEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800816a:	2300      	movs	r3, #0
  }
 800816c:	4618      	mov	r0, r3
 800816e:	3710      	adds	r7, #16
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008180:	887b      	ldrh	r3, [r7, #2]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f7f8 ffb5 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800818a:	4603      	mov	r3, r0
 800818c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800818e:	687a      	ldr	r2, [r7, #4]
 8008190:	89fb      	ldrh	r3, [r7, #14]
 8008192:	4413      	add	r3, r2
 8008194:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008196:	89fb      	ldrh	r3, [r7, #14]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d006      	beq.n	80081aa <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x36>
 800819c:	68b8      	ldr	r0, [r7, #8]
 800819e:	f7f9 fb34 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80081a2:	4602      	mov	r2, r0
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	4413      	add	r3, r2
                        : nullptr;
 80081a8:	e000      	b.n	80081ac <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite12OperatorCodeEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80081aa:	2300      	movs	r3, #0
  }
 80081ac:	4618      	mov	r0, r3
 80081ae:	3710      	adds	r7, #16
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b084      	sub	sp, #16
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	460b      	mov	r3, r1
 80081be:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 80081c0:	887b      	ldrh	r3, [r7, #2]
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7f8 ff95 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 80081ca:	4603      	mov	r3, r0
 80081cc:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	89fb      	ldrh	r3, [r7, #14]
 80081d2:	4413      	add	r3, r2
 80081d4:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80081d6:	89fb      	ldrh	r3, [r7, #14]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d006      	beq.n	80081ea <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x36>
 80081dc:	68b8      	ldr	r0, [r7, #8]
 80081de:	f7f9 fb14 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80081e2:	4602      	mov	r2, r0
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	4413      	add	r3, r2
                        : nullptr;
 80081e8:	e000      	b.n	80081ec <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8SubGraphEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 80081ea:	2300      	movs	r3, #0
  }
 80081ec:	4618      	mov	r0, r3
 80081ee:	3710      	adds	r7, #16
 80081f0:	46bd      	mov	sp, r7
 80081f2:	bd80      	pop	{r7, pc}

080081f4 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
 80081fc:	460b      	mov	r3, r1
 80081fe:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008200:	887b      	ldrh	r3, [r7, #2]
 8008202:	4619      	mov	r1, r3
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f7f8 ff75 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800820a:	4603      	mov	r3, r0
 800820c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800820e:	687a      	ldr	r2, [r7, #4]
 8008210:	89fb      	ldrh	r3, [r7, #14]
 8008212:	4413      	add	r3, r2
 8008214:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008216:	89fb      	ldrh	r3, [r7, #14]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d006      	beq.n	800822a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x36>
 800821c:	68b8      	ldr	r0, [r7, #8]
 800821e:	f7f9 faf4 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008222:	4602      	mov	r2, r0
 8008224:	68bb      	ldr	r3, [r7, #8]
 8008226:	4413      	add	r3, r2
                        : nullptr;
 8008228:	e000      	b.n	800822c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite6BufferEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800822a:	2300      	movs	r3, #0
  }
 800822c:	4618      	mov	r0, r3
 800822e:	3710      	adds	r7, #16
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t>:
  template<typename P> P GetPointer(voffset_t field) {
 8008234:	b580      	push	{r7, lr}
 8008236:	b084      	sub	sp, #16
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
 800823c:	460b      	mov	r3, r1
 800823e:	807b      	strh	r3, [r7, #2]
    auto field_offset = GetOptionalFieldOffset(field);
 8008240:	887b      	ldrh	r3, [r7, #2]
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f7f8 ff55 	bl	80010f4 <_ZNK11flatbuffers5Table22GetOptionalFieldOffsetEt>
 800824a:	4603      	mov	r3, r0
 800824c:	81fb      	strh	r3, [r7, #14]
    auto p = data_ + field_offset;
 800824e:	687a      	ldr	r2, [r7, #4]
 8008250:	89fb      	ldrh	r3, [r7, #14]
 8008252:	4413      	add	r3, r2
 8008254:	60bb      	str	r3, [r7, #8]
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 8008256:	89fb      	ldrh	r3, [r7, #14]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d006      	beq.n	800826a <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x36>
 800825c:	68b8      	ldr	r0, [r7, #8]
 800825e:	f7f9 fad4 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 8008262:	4602      	mov	r2, r0
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	4413      	add	r3, r2
                        : nullptr;
 8008268:	e000      	b.n	800826c <_ZN11flatbuffers5Table10GetPointerIPKNS_6VectorINS_6OffsetIN6tflite8MetadataEEEEEEET_t+0x38>
    return field_offset ? reinterpret_cast<P>(p + ReadScalar<uoffset_t>(p))
 800826a:	2300      	movs	r3, #0
  }
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <_ZNK11flatbuffers6VectorIhE4DataEv>:
  const uint8_t *Data() const {
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	3304      	adds	r3, #4
  }
 8008280:	4618      	mov	r0, r3
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <_ZN11flatbuffers14IndirectHelperIfE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 800828c:	b580      	push	{r7, lr}
 800828e:	b082      	sub	sp, #8
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 8008296:	683b      	ldr	r3, [r7, #0]
 8008298:	009b      	lsls	r3, r3, #2
 800829a:	687a      	ldr	r2, [r7, #4]
 800829c:	4413      	add	r3, r2
 800829e:	edd3 7a00 	vldr	s15, [r3]
 80082a2:	eeb0 0a67 	vmov.f32	s0, s15
 80082a6:	f7fc fd93 	bl	8004dd0 <_ZN11flatbuffers12EndianScalarIfEET_S1_>
 80082aa:	eef0 7a40 	vmov.f32	s15, s0
  }
 80082ae:	eeb0 0a67 	vmov.f32	s0, s15
 80082b2:	3708      	adds	r7, #8
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}

080082b8 <_ZNK11flatbuffers6VectorIfE4DataEv>:
  const uint8_t *Data() const {
 80082b8:	b480      	push	{r7}
 80082ba:	b083      	sub	sp, #12
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	3304      	adds	r3, #4
  }
 80082c4:	4618      	mov	r0, r3
 80082c6:	370c      	adds	r7, #12
 80082c8:	46bd      	mov	sp, r7
 80082ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ce:	4770      	bx	lr

080082d0 <_ZN11flatbuffers14IndirectHelperIxE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80082d0:	b590      	push	{r4, r7, lr}
 80082d2:	b083      	sub	sp, #12
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
 80082d8:	6039      	str	r1, [r7, #0]
    return EndianScalar((reinterpret_cast<const T *>(p))[i]);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	00db      	lsls	r3, r3, #3
 80082de:	687a      	ldr	r2, [r7, #4]
 80082e0:	4413      	add	r3, r2
 80082e2:	e9d3 3400 	ldrd	r3, r4, [r3]
 80082e6:	4618      	mov	r0, r3
 80082e8:	4621      	mov	r1, r4
 80082ea:	f000 f8d3 	bl	8008494 <_ZN11flatbuffers12EndianScalarIxEET_S1_>
 80082ee:	4603      	mov	r3, r0
 80082f0:	460c      	mov	r4, r1
  }
 80082f2:	4618      	mov	r0, r3
 80082f4:	4621      	mov	r1, r4
 80082f6:	370c      	adds	r7, #12
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd90      	pop	{r4, r7, pc}

080082fc <_ZNK11flatbuffers6VectorIxE4DataEv>:
  const uint8_t *Data() const {
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	3304      	adds	r3, #4
  }
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6TensorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008314:	b580      	push	{r7, lr}
 8008316:	b082      	sub	sp, #8
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	009b      	lsls	r3, r3, #2
 8008322:	687a      	ldr	r2, [r7, #4]
 8008324:	4413      	add	r3, r2
 8008326:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f7f9 fa6e 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800832e:	4602      	mov	r2, r0
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	4413      	add	r3, r2
  }
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4DataEv>:
  const uint8_t *Data() const {
 800833c:	b480      	push	{r7}
 800833e:	b083      	sub	sp, #12
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	3304      	adds	r3, #4
  }
 8008348:	4618      	mov	r0, r3
 800834a:	370c      	adds	r7, #12
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr

08008354 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8OperatorEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008354:	b580      	push	{r7, lr}
 8008356:	b082      	sub	sp, #8
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
 800835c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800835e:	683b      	ldr	r3, [r7, #0]
 8008360:	009b      	lsls	r3, r3, #2
 8008362:	687a      	ldr	r2, [r7, #4]
 8008364:	4413      	add	r3, r2
 8008366:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f7f9 fa4e 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800836e:	4602      	mov	r2, r0
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	4413      	add	r3, r2
  }
 8008374:	4618      	mov	r0, r3
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}

0800837c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4DataEv>:
  const uint8_t *Data() const {
 800837c:	b480      	push	{r7}
 800837e:	b083      	sub	sp, #12
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	3304      	adds	r3, #4
  }
 8008388:	4618      	mov	r0, r3
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite12OperatorCodeEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	009b      	lsls	r3, r3, #2
 80083a2:	687a      	ldr	r2, [r7, #4]
 80083a4:	4413      	add	r3, r2
 80083a6:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7f9 fa2e 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80083ae:	4602      	mov	r2, r0
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4413      	add	r3, r2
  }
 80083b4:	4618      	mov	r0, r3
 80083b6:	3708      	adds	r7, #8
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite12OperatorCodeEEEE4DataEv>:
  const uint8_t *Data() const {
 80083bc:	b480      	push	{r7}
 80083be:	b083      	sub	sp, #12
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	3304      	adds	r3, #4
  }
 80083c8:	4618      	mov	r0, r3
 80083ca:	370c      	adds	r7, #12
 80083cc:	46bd      	mov	sp, r7
 80083ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d2:	4770      	bx	lr

080083d4 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8SubGraphEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b082      	sub	sp, #8
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
 80083dc:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	009b      	lsls	r3, r3, #2
 80083e2:	687a      	ldr	r2, [r7, #4]
 80083e4:	4413      	add	r3, r2
 80083e6:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f7f9 fa0e 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 80083ee:	4602      	mov	r2, r0
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	4413      	add	r3, r2
  }
 80083f4:	4618      	mov	r0, r3
 80083f6:	3708      	adds	r7, #8
 80083f8:	46bd      	mov	sp, r7
 80083fa:	bd80      	pop	{r7, pc}

080083fc <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4DataEv>:
  const uint8_t *Data() const {
 80083fc:	b480      	push	{r7}
 80083fe:	b083      	sub	sp, #12
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	3304      	adds	r3, #4
  }
 8008408:	4618      	mov	r0, r3
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite6BufferEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008414:	b580      	push	{r7, lr}
 8008416:	b082      	sub	sp, #8
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
 800841c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800841e:	683b      	ldr	r3, [r7, #0]
 8008420:	009b      	lsls	r3, r3, #2
 8008422:	687a      	ldr	r2, [r7, #4]
 8008424:	4413      	add	r3, r2
 8008426:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7f9 f9ee 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800842e:	4602      	mov	r2, r0
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4413      	add	r3, r2
  }
 8008434:	4618      	mov	r0, r3
 8008436:	3708      	adds	r7, #8
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6BufferEEEE4DataEv>:
  const uint8_t *Data() const {
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	3304      	adds	r3, #4
  }
 8008448:	4618      	mov	r0, r3
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <_ZN11flatbuffers14IndirectHelperINS_6OffsetIN6tflite8MetadataEEEE4ReadEPKhm>:
  static return_type Read(const uint8_t *p, uoffset_t i) {
 8008454:	b580      	push	{r7, lr}
 8008456:	b082      	sub	sp, #8
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
    p += i * sizeof(uoffset_t);
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	4413      	add	r3, r2
 8008466:	607b      	str	r3, [r7, #4]
    return reinterpret_cast<return_type>(p + ReadScalar<uoffset_t>(p));
 8008468:	6878      	ldr	r0, [r7, #4]
 800846a:	f7f9 f9ce 	bl	800180a <_ZN11flatbuffers10ReadScalarImEET_PKv>
 800846e:	4602      	mov	r2, r0
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	4413      	add	r3, r2
  }
 8008474:	4618      	mov	r0, r3
 8008476:	3708      	adds	r7, #8
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8MetadataEEEE4DataEv>:
  const uint8_t *Data() const {
 800847c:	b480      	push	{r7}
 800847e:	b083      	sub	sp, #12
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
    return reinterpret_cast<const uint8_t *>(&length_ + 1);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	3304      	adds	r3, #4
  }
 8008488:	4618      	mov	r0, r3
 800848a:	370c      	adds	r7, #12
 800848c:	46bd      	mov	sp, r7
 800848e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008492:	4770      	bx	lr

08008494 <_ZN11flatbuffers12EndianScalarIxEET_S1_>:
template<typename T> T EndianScalar(T t) {
 8008494:	b490      	push	{r4, r7}
 8008496:	b082      	sub	sp, #8
 8008498:	af00      	add	r7, sp, #0
 800849a:	e9c7 0100 	strd	r0, r1, [r7]
    return t;
 800849e:	e9d7 3400 	ldrd	r3, r4, [r7]
}
 80084a2:	4618      	mov	r0, r3
 80084a4:	4621      	mov	r1, r4
 80084a6:	3708      	adds	r7, #8
 80084a8:	46bd      	mov	sp, r7
 80084aa:	bc90      	pop	{r4, r7}
 80084ac:	4770      	bx	lr
	...

080084b0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>:
class MicroBuiltinDataAllocator : public BuiltinDataAllocator {
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	4a05      	ldr	r2, [pc, #20]	; (80084d0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev+0x20>)
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	601a      	str	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f7fd fe23 	bl	800610c <_ZN6tflite20BuiltinDataAllocatorD1Ev>
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	4618      	mov	r0, r3
 80084ca:	3708      	adds	r7, #8
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	08012020 	.word	0x08012020

080084d4 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD0Ev>:
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b082      	sub	sp, #8
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7ff ffe7 	bl	80084b0 <_ZN6tflite12_GLOBAL__N_125MicroBuiltinDataAllocatorD1Ev>
 80084e2:	2108      	movs	r1, #8
 80084e4:	6878      	ldr	r0, [r7, #4]
 80084e6:	f003 ff51 	bl	800c38c <_ZdlPvj>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	4618      	mov	r0, r3
 80084ee:	3708      	adds	r7, #8
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}

080084f4 <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list>:
#include "tensorflow/lite/micro/micro_string.h"
#endif

namespace tflite {

int MicroErrorReporter::Report(const char* format, va_list args) {
 80084f4:	b580      	push	{r7, lr}
 80084f6:	b0c4      	sub	sp, #272	; 0x110
 80084f8:	af00      	add	r7, sp, #0
 80084fa:	f107 030c 	add.w	r3, r7, #12
 80084fe:	6018      	str	r0, [r3, #0]
 8008500:	f107 0308 	add.w	r3, r7, #8
 8008504:	6019      	str	r1, [r3, #0]
 8008506:	1d3b      	adds	r3, r7, #4
 8008508:	601a      	str	r2, [r3, #0]
  // Only pulling in the implementation of this function for builds where we
  // expect to make use of it to be extra cautious about not increasing the code
  // size.
  static constexpr int kMaxLogLen = 256;
  char log_buffer[kMaxLogLen];
  MicroVsnprintf(log_buffer, kMaxLogLen, format, args);
 800850a:	1d3b      	adds	r3, r7, #4
 800850c:	f107 0208 	add.w	r2, r7, #8
 8008510:	f107 0010 	add.w	r0, r7, #16
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	6812      	ldr	r2, [r2, #0]
 8008518:	f44f 7180 	mov.w	r1, #256	; 0x100
 800851c:	f000 ffa0 	bl	8009460 <MicroVsnprintf>
  DebugLog(log_buffer);
 8008520:	f107 0310 	add.w	r3, r7, #16
 8008524:	4618      	mov	r0, r3
 8008526:	f7f9 f93f 	bl	80017a8 <DebugLog>
  DebugLog("\r\n");
 800852a:	4804      	ldr	r0, [pc, #16]	; (800853c <_ZN6tflite18MicroErrorReporter6ReportEPKcSt9__va_list+0x48>)
 800852c:	f7f9 f93c 	bl	80017a8 <DebugLog>
#endif
  return 0;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	f507 7788 	add.w	r7, r7, #272	; 0x110
 8008538:	46bd      	mov	sp, r7
 800853a:	bd80      	pop	{r7, pc}
 800853c:	08010d60 	.word	0x08010d60

08008540 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>:
  // comes from.
  virtual uint32_t BeginEvent(const char* tag, EventType event_type,
                              int64_t event_metadata1,
                              int64_t event_metadata2) = 0;
  // Similar w/ the above, but `event_metadata2` defaults to 0.
  uint32_t BeginEvent(const char* tag, EventType event_type,
 8008540:	b5b0      	push	{r4, r5, r7, lr}
 8008542:	b088      	sub	sp, #32
 8008544:	af04      	add	r7, sp, #16
 8008546:	60f8      	str	r0, [r7, #12]
 8008548:	60b9      	str	r1, [r7, #8]
 800854a:	607a      	str	r2, [r7, #4]
                      int64_t event_metadata) {
    return BeginEvent(tag, event_type, event_metadata, /*event_metadata2*/ 0);
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3308      	adds	r3, #8
 8008552:	681d      	ldr	r5, [r3, #0]
 8008554:	f04f 0300 	mov.w	r3, #0
 8008558:	f04f 0400 	mov.w	r4, #0
 800855c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008560:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8008564:	e9cd 3400 	strd	r3, r4, [sp]
 8008568:	687a      	ldr	r2, [r7, #4]
 800856a:	68b9      	ldr	r1, [r7, #8]
 800856c:	68f8      	ldr	r0, [r7, #12]
 800856e:	47a8      	blx	r5
 8008570:	4603      	mov	r3, r0
  }
 8008572:	4618      	mov	r0, r3
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bdb0      	pop	{r4, r5, r7, pc}

0800857a <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>:
// of the object and ends when the object goes out of scope.
// The lifetime of tag should be at least the lifetime of `profiler`.
// `profiler` may be null, in which case nothing is profiled.
class ScopedProfile {
 public:
  ScopedProfile(Profiler* profiler, const char* tag,
 800857a:	b590      	push	{r4, r7, lr}
 800857c:	b087      	sub	sp, #28
 800857e:	af02      	add	r7, sp, #8
 8008580:	60f8      	str	r0, [r7, #12]
 8008582:	60b9      	str	r1, [r7, #8]
 8008584:	607a      	str	r2, [r7, #4]
 8008586:	603b      	str	r3, [r7, #0]
                Profiler::EventType event_type = Profiler::EventType::DEFAULT,
                int64_t event_metadata = 0)
      : profiler_(profiler), event_handle_(0) {
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	68ba      	ldr	r2, [r7, #8]
 800858c:	601a      	str	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	605a      	str	r2, [r3, #4]
    if (profiler) {
 8008594:	68bb      	ldr	r3, [r7, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d00c      	beq.n	80085b4 <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx+0x3a>
      event_handle_ = profiler_->BeginEvent(tag, event_type, event_metadata);
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80085a2:	e9cd 3400 	strd	r3, r4, [sp]
 80085a6:	683a      	ldr	r2, [r7, #0]
 80085a8:	6879      	ldr	r1, [r7, #4]
 80085aa:	f7ff ffc9 	bl	8008540 <_ZN6tflite8Profiler10BeginEventEPKcNS0_9EventTypeEx>
 80085ae:	4602      	mov	r2, r0
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	605a      	str	r2, [r3, #4]
    }
  }
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	4618      	mov	r0, r3
 80085b8:	3714      	adds	r7, #20
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd90      	pop	{r4, r7, pc}

080085be <_ZN6tflite13ScopedProfileD1Ev>:

  ~ScopedProfile() {
 80085be:	b580      	push	{r7, lr}
 80085c0:	b082      	sub	sp, #8
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
    if (profiler_) {
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d00a      	beq.n	80085e4 <_ZN6tflite13ScopedProfileD1Ev+0x26>
      profiler_->EndEvent(event_handle_);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6818      	ldr	r0, [r3, #0]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	3310      	adds	r3, #16
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	6852      	ldr	r2, [r2, #4]
 80085e0:	4611      	mov	r1, r2
 80085e2:	4798      	blx	r3
    }
  }
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}

080085ee <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>:
  uint32_t event_handle_;
};

class ScopedOperatorProfile : public ScopedProfile {
 public:
  ScopedOperatorProfile(Profiler* profiler, const char* tag, int node_index)
 80085ee:	b590      	push	{r4, r7, lr}
 80085f0:	b087      	sub	sp, #28
 80085f2:	af02      	add	r7, sp, #8
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	607a      	str	r2, [r7, #4]
 80085fa:	603b      	str	r3, [r7, #0]
      : ScopedProfile(profiler, tag, Profiler::EventType::OPERATOR_INVOKE_EVENT,
                      static_cast<uint32_t>(node_index)) {}
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	f04f 0400 	mov.w	r4, #0
 8008604:	e9cd 3400 	strd	r3, r4, [sp]
 8008608:	2302      	movs	r3, #2
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	68b9      	ldr	r1, [r7, #8]
 800860e:	f7ff ffb4 	bl	800857a <_ZN6tflite13ScopedProfileC1EPNS_8ProfilerEPKcNS1_9EventTypeEx>
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	4618      	mov	r0, r3
 8008616:	3714      	adds	r7, #20
 8008618:	46bd      	mov	sp, r7
 800861a:	bd90      	pop	{r4, r7, pc}

0800861c <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* input(size_t index);
  size_t inputs_size() const { return subgraph_->inputs()->Length(); }
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008628:	4618      	mov	r0, r3
 800862a:	f7fd fce1 	bl	8005ff0 <_ZNK6tflite8SubGraph6inputsEv>
 800862e:	4603      	mov	r3, r0
 8008630:	4618      	mov	r0, r3
 8008632:	f7fd fc2e 	bl	8005e92 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8008636:	4603      	mov	r3, r0
 8008638:	4618      	mov	r0, r3
 800863a:	3708      	adds	r7, #8
 800863c:	46bd      	mov	sp, r7
 800863e:	bd80      	pop	{r7, pc}

08008640 <_ZNK6tflite16MicroInterpreter6inputsEv>:
  const flatbuffers::Vector<int32_t>& inputs() const {
 8008640:	b580      	push	{r7, lr}
 8008642:	b082      	sub	sp, #8
 8008644:	af00      	add	r7, sp, #0
 8008646:	6078      	str	r0, [r7, #4]
    return *subgraph_->inputs();
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800864c:	4618      	mov	r0, r3
 800864e:	f7fd fccf 	bl	8005ff0 <_ZNK6tflite8SubGraph6inputsEv>
 8008652:	4603      	mov	r3, r0
  }
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>:
    }
    return nullptr;
  }

  TfLiteTensor* output(size_t index);
  size_t outputs_size() const { return subgraph_->outputs()->Length(); }
 800865c:	b580      	push	{r7, lr}
 800865e:	b082      	sub	sp, #8
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008668:	4618      	mov	r0, r3
 800866a:	f7fd fccf 	bl	800600c <_ZNK6tflite8SubGraph7outputsEv>
 800866e:	4603      	mov	r3, r0
 8008670:	4618      	mov	r0, r3
 8008672:	f7fd fc0e 	bl	8005e92 <_ZNK11flatbuffers6VectorIlE6LengthEv>
 8008676:	4603      	mov	r3, r0
 8008678:	4618      	mov	r0, r3
 800867a:	3708      	adds	r7, #8
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}

08008680 <_ZNK6tflite16MicroInterpreter7outputsEv>:
  const flatbuffers::Vector<int32_t>& outputs() const {
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
 8008686:	6078      	str	r0, [r7, #4]
    return *subgraph_->outputs();
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800868c:	4618      	mov	r0, r3
 800868e:	f7fd fcbd 	bl	800600c <_ZNK6tflite8SubGraph7outputsEv>
 8008692:	4603      	mov	r3, r0
  }
 8008694:	4618      	mov	r0, r3
 8008696:	3708      	adds	r7, #8
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}

0800869c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>:

namespace tflite {
namespace {

#ifndef TF_LITE_STRIP_ERROR_STRINGS
const char* OpNameFromRegistration(const TfLiteRegistration* registration) {
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
 80086a2:	6078      	str	r0, [r7, #4]
  if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	695b      	ldr	r3, [r3, #20]
 80086a8:	2b20      	cmp	r3, #32
 80086aa:	d102      	bne.n	80086b2 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x16>
    return registration->custom_name;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	699b      	ldr	r3, [r3, #24]
 80086b0:	e006      	b.n	80086c0 <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration+0x24>
  } else {
    return EnumNameBuiltinOperator(BuiltinOperator(registration->builtin_code));
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	695b      	ldr	r3, [r3, #20]
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	4618      	mov	r0, r3
 80086ba:	f7fc fcd7 	bl	800506c <_ZN6tflite23EnumNameBuiltinOperatorENS_15BuiltinOperatorE>
 80086be:	4603      	mov	r3, r0
  }
}
 80086c0:	4618      	mov	r0, r3
 80086c2:	3708      	adds	r7, #8
 80086c4:	46bd      	mov	sp, r7
 80086c6:	bd80      	pop	{r7, pc}

080086c8 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorEPKNS_5ModelE>:

}  // namespace

namespace internal {

ContextHelper::ContextHelper(ErrorReporter* error_reporter,
 80086c8:	b480      	push	{r7}
 80086ca:	b085      	sub	sp, #20
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	60f8      	str	r0, [r7, #12]
 80086d0:	60b9      	str	r1, [r7, #8]
 80086d2:	607a      	str	r2, [r7, #4]
 80086d4:	603b      	str	r3, [r7, #0]
                             MicroAllocator* allocator, const Model* model)
    : allocator_(allocator), error_reporter_(error_reporter), model_(model) {}
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	601a      	str	r2, [r3, #0]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	68ba      	ldr	r2, [r7, #8]
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	683a      	ldr	r2, [r7, #0]
 80086e6:	609a      	str	r2, [r3, #8]
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	2200      	movs	r2, #0
 80086ec:	60da      	str	r2, [r3, #12]
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	2200      	movs	r2, #0
 80086f2:	611a      	str	r2, [r3, #16]
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	4618      	mov	r0, r3
 80086f8:	3714      	adds	r7, #20
 80086fa:	46bd      	mov	sp, r7
 80086fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008700:	4770      	bx	lr

08008702 <_ZN6tflite8internal13ContextHelper24AllocatePersistentBufferEP13TfLiteContextj>:

void* ContextHelper::AllocatePersistentBuffer(TfLiteContext* ctx,
                                              size_t bytes) {
 8008702:	b580      	push	{r7, lr}
 8008704:	b082      	sub	sp, #8
 8008706:	af00      	add	r7, sp, #0
 8008708:	6078      	str	r0, [r7, #4]
 800870a:	6039      	str	r1, [r7, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes);
 8008710:	681a      	ldr	r2, [r3, #0]
  return reinterpret_cast<ContextHelper*>(ctx->impl_)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	68db      	ldr	r3, [r3, #12]
      ->allocator_->AllocatePersistentBuffer(bytes);
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	330c      	adds	r3, #12
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	4610      	mov	r0, r2
 8008722:	4798      	blx	r3
 8008724:	4603      	mov	r3, r0
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}

0800872e <_ZN6tflite8internal13ContextHelper27RequestScratchBufferInArenaEP13TfLiteContextjPi>:

TfLiteStatus ContextHelper::RequestScratchBufferInArena(TfLiteContext* ctx,
                                                        size_t bytes,
                                                        int* buffer_idx) {
 800872e:	b580      	push	{r7, lr}
 8008730:	b086      	sub	sp, #24
 8008732:	af00      	add	r7, sp, #0
 8008734:	60f8      	str	r0, [r7, #12]
 8008736:	60b9      	str	r1, [r7, #8]
 8008738:	607a      	str	r2, [r7, #4]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	617b      	str	r3, [r7, #20]
  return helper->allocator_->RequestScratchBufferInArena(bytes, buffer_idx);
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	687a      	ldr	r2, [r7, #4]
 8008746:	68b9      	ldr	r1, [r7, #8]
 8008748:	4618      	mov	r0, r3
 800874a:	f7fe fbaf 	bl	8006eac <_ZN6tflite14MicroAllocator27RequestScratchBufferInArenaEjPi>
 800874e:	4603      	mov	r3, r0
}
 8008750:	4618      	mov	r0, r3
 8008752:	3718      	adds	r7, #24
 8008754:	46bd      	mov	sp, r7
 8008756:	bd80      	pop	{r7, pc}

08008758 <_ZN6tflite8internal13ContextHelper16GetScratchBufferEP13TfLiteContexti>:

void* ContextHelper::GetScratchBuffer(TfLiteContext* ctx, int buffer_idx) {
 8008758:	b480      	push	{r7}
 800875a:	b085      	sub	sp, #20
 800875c:	af00      	add	r7, sp, #0
 800875e:	6078      	str	r0, [r7, #4]
 8008760:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(ctx->impl_);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	68db      	ldr	r3, [r3, #12]
 8008766:	60fb      	str	r3, [r7, #12]
  ScratchBufferHandle* handle = helper->scratch_buffer_handles_ + buffer_idx;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	691a      	ldr	r2, [r3, #16]
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	009b      	lsls	r3, r3, #2
 8008770:	4413      	add	r3, r2
 8008772:	60bb      	str	r3, [r7, #8]
  return handle->data;
 8008774:	68bb      	ldr	r3, [r7, #8]
 8008776:	681b      	ldr	r3, [r3, #0]
}
 8008778:	4618      	mov	r0, r3
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <_ZN6tflite8internal13ContextHelper13ReportOpErrorEP13TfLiteContextPKcz>:

void ContextHelper::ReportOpError(struct TfLiteContext* context,
                                  const char* format, ...) {
 8008784:	b40e      	push	{r1, r2, r3}
 8008786:	b580      	push	{r7, lr}
 8008788:	b085      	sub	sp, #20
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
#ifndef TF_LITE_STRIP_ERROR_STRINGS
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	68db      	ldr	r3, [r3, #12]
 8008792:	60fb      	str	r3, [r7, #12]
  va_list args;
  va_start(args, format);
 8008794:	f107 0320 	add.w	r3, r7, #32
 8008798:	60bb      	str	r3, [r7, #8]
  TF_LITE_REPORT_ERROR(helper->error_reporter_, format, args);
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6858      	ldr	r0, [r3, #4]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3308      	adds	r3, #8
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68ba      	ldr	r2, [r7, #8]
 80087aa:	69f9      	ldr	r1, [r7, #28]
 80087ac:	4798      	blx	r3
  va_end(args);
#endif
}
 80087ae:	bf00      	nop
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087b8:	b003      	add	sp, #12
 80087ba:	4770      	bx	lr

080087bc <_ZN6tflite8internal13ContextHelper9GetTensorEPK13TfLiteContexti>:

TfLiteTensor* ContextHelper::GetTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
 80087bc:	b590      	push	{r4, r7, lr}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = static_cast<ContextHelper*>(context->impl_);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	68db      	ldr	r3, [r3, #12]
 80087ca:	60fb      	str	r3, [r7, #12]
  return helper->allocator_->AllocateTempTfLiteTensor(
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	6818      	ldr	r0, [r3, #0]
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	681b      	ldr	r3, [r3, #0]
      helper->model_, helper->eval_tensors_, tensor_idx);
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	3304      	adds	r3, #4
 80087d8:	681c      	ldr	r4, [r3, #0]
  return helper->allocator_->AllocateTempTfLiteTensor(
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6899      	ldr	r1, [r3, #8]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	68da      	ldr	r2, [r3, #12]
      helper->model_, helper->eval_tensors_, tensor_idx);
 80087e2:	683b      	ldr	r3, [r7, #0]
 80087e4:	47a0      	blx	r4
 80087e6:	4603      	mov	r3, r0
}
 80087e8:	4618      	mov	r0, r3
 80087ea:	3714      	adds	r7, #20
 80087ec:	46bd      	mov	sp, r7
 80087ee:	bd90      	pop	{r4, r7, pc}

080087f0 <_ZN6tflite8internal13ContextHelper13GetEvalTensorEPK13TfLiteContexti>:

TfLiteEvalTensor* ContextHelper::GetEvalTensor(
    const struct TfLiteContext* context, int tensor_idx) {
 80087f0:	b480      	push	{r7}
 80087f2:	b085      	sub	sp, #20
 80087f4:	af00      	add	r7, sp, #0
 80087f6:	6078      	str	r0, [r7, #4]
 80087f8:	6039      	str	r1, [r7, #0]
  ContextHelper* helper = reinterpret_cast<ContextHelper*>(context->impl_);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	68db      	ldr	r3, [r3, #12]
 80087fe:	60fb      	str	r3, [r7, #12]
  return &helper->eval_tensors_[tensor_idx];
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	68d9      	ldr	r1, [r3, #12]
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	4613      	mov	r3, r2
 8008808:	005b      	lsls	r3, r3, #1
 800880a:	4413      	add	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	440b      	add	r3, r1
}
 8008810:	4618      	mov	r0, r3
 8008812:	3714      	adds	r7, #20
 8008814:	46bd      	mov	sp, r7
 8008816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881a:	4770      	bx	lr

0800881c <_ZN6tflite8internal13ContextHelper20SetTfLiteEvalTensorsEP16TfLiteEvalTensor>:

void ContextHelper::SetTfLiteEvalTensors(TfLiteEvalTensor* eval_tensors) {
 800881c:	b480      	push	{r7}
 800881e:	b083      	sub	sp, #12
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
 8008824:	6039      	str	r1, [r7, #0]
  eval_tensors_ = eval_tensors;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	683a      	ldr	r2, [r7, #0]
 800882a:	60da      	str	r2, [r3, #12]
}
 800882c:	bf00      	nop
 800882e:	370c      	adds	r7, #12
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <_ZN6tflite8internal13ContextHelper23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>:

void ContextHelper::SetScratchBufferHandles(
    ScratchBufferHandle* scratch_buffer_handles) {
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  scratch_buffer_handles_ = scratch_buffer_handles;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	683a      	ldr	r2, [r7, #0]
 8008846:	611a      	str	r2, [r3, #16]
}
 8008848:	bf00      	nop
 800884a:	370c      	adds	r7, #12
 800884c:	46bd      	mov	sp, r7
 800884e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008852:	4770      	bx	lr

08008854 <_ZN6tflite16MicroInterpreterC1EPKNS_5ModelERKNS_15MicroOpResolverEPhjPNS_13ErrorReporterEPNS_8ProfilerE>:

}  // namespace internal

MicroInterpreter::MicroInterpreter(const Model* model,
 8008854:	b580      	push	{r7, lr}
 8008856:	b084      	sub	sp, #16
 8008858:	af00      	add	r7, sp, #0
 800885a:	60f8      	str	r0, [r7, #12]
 800885c:	60b9      	str	r1, [r7, #8]
 800885e:	607a      	str	r2, [r7, #4]
 8008860:	603b      	str	r3, [r7, #0]
      tensors_allocated_(false),
      initialization_status_(kTfLiteError),
      eval_tensors_(nullptr),
      context_helper_(error_reporter_, &allocator_, model),
      input_tensor_(nullptr),
      output_tensor_(nullptr) {
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	2200      	movs	r2, #0
 8008866:	601a      	str	r2, [r3, #0]
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	68ba      	ldr	r2, [r7, #8]
 800886c:	605a      	str	r2, [r3, #4]
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	609a      	str	r2, [r3, #8]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	60da      	str	r2, [r3, #12]
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	3310      	adds	r3, #16
 800887e:	2258      	movs	r2, #88	; 0x58
 8008880:	2100      	movs	r1, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f003 ff02 	bl	800c68c <memset>
      allocator_(*MicroAllocator::Create(tensor_arena, tensor_arena_size,
 8008888:	69fa      	ldr	r2, [r7, #28]
 800888a:	69b9      	ldr	r1, [r7, #24]
 800888c:	6838      	ldr	r0, [r7, #0]
 800888e:	f7fe f9f1 	bl	8006c74 <_ZN6tflite14MicroAllocator6CreateEPhjPNS_13ErrorReporterE>
 8008892:	4602      	mov	r2, r0
      output_tensor_(nullptr) {
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	669a      	str	r2, [r3, #104]	; 0x68
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2200      	movs	r2, #0
 800889c:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2201      	movs	r2, #1
 80088a4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	671a      	str	r2, [r3, #112]	; 0x70
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2200      	movs	r2, #0
 80088b2:	675a      	str	r2, [r3, #116]	; 0x74
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	2200      	movs	r2, #0
 80088b8:	679a      	str	r2, [r3, #120]	; 0x78
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	68d9      	ldr	r1, [r3, #12]
      context_helper_(error_reporter_, &allocator_, model),
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6e9a      	ldr	r2, [r3, #104]	; 0x68
      output_tensor_(nullptr) {
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	f7ff fefd 	bl	80086c8 <_ZN6tflite8internal13ContextHelperC1EPNS_13ErrorReporterEPNS_14MicroAllocatorEPKNS_5ModelE>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  Init(profiler);
 80088de:	6a39      	ldr	r1, [r7, #32]
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f84d 	bl	8008980 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>
}
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4618      	mov	r0, r3
 80088ea:	3710      	adds	r7, #16
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <_ZN6tflite16MicroInterpreterD1Ev>:
      input_tensor_(nullptr),
      output_tensor_(nullptr) {
  Init(profiler);
}

MicroInterpreter::~MicroInterpreter() {
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b086      	sub	sp, #24
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  if (node_and_registrations_ != nullptr) {
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d03a      	beq.n	8008976 <_ZN6tflite16MicroInterpreterD1Ev+0x86>
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008900:	2300      	movs	r3, #0
 8008902:	617b      	str	r3, [r7, #20]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008908:	4618      	mov	r0, r3
 800890a:	f7fd fb8d 	bl	8006028 <_ZNK6tflite8SubGraph9operatorsEv>
 800890e:	4603      	mov	r3, r0
 8008910:	4618      	mov	r0, r3
 8008912:	f7ff fa03 	bl	8007d1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008916:	4602      	mov	r2, r0
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	4293      	cmp	r3, r2
 800891c:	bf34      	ite	cc
 800891e:	2301      	movcc	r3, #1
 8008920:	2300      	movcs	r3, #0
 8008922:	b2db      	uxtb	r3, r3
 8008924:	2b00      	cmp	r3, #0
 8008926:	d026      	beq.n	8008976 <_ZN6tflite16MicroInterpreterD1Ev+0x86>
      TfLiteNode* node = &(node_and_registrations_[i].node);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6819      	ldr	r1, [r3, #0]
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	4613      	mov	r3, r2
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	00db      	lsls	r3, r3, #3
 8008936:	440b      	add	r3, r1
 8008938:	613b      	str	r3, [r7, #16]
      const TfLiteRegistration* registration =
          node_and_registrations_[i].registration;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6819      	ldr	r1, [r3, #0]
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	4613      	mov	r3, r2
 8008942:	009b      	lsls	r3, r3, #2
 8008944:	4413      	add	r3, r2
 8008946:	00db      	lsls	r3, r3, #3
 8008948:	440b      	add	r3, r1
      const TfLiteRegistration* registration =
 800894a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800894c:	60fb      	str	r3, [r7, #12]
      // registration is allocated outside the interpreter, so double check to
      // make sure it's not nullptr;
      if (registration != nullptr && registration->free != nullptr) {
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00c      	beq.n	800896e <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d008      	beq.n	800896e <_ZN6tflite16MicroInterpreterD1Ev+0x7e>
        registration->free(&context_, node->user_data);
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	f102 0010 	add.w	r0, r2, #16
 8008966:	693a      	ldr	r2, [r7, #16]
 8008968:	6912      	ldr	r2, [r2, #16]
 800896a:	4611      	mov	r1, r2
 800896c:	4798      	blx	r3
    for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	3301      	adds	r3, #1
 8008972:	617b      	str	r3, [r7, #20]
 8008974:	e7c6      	b.n	8008904 <_ZN6tflite16MicroInterpreterD1Ev+0x14>
      }
    }
  }
}
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	4618      	mov	r0, r3
 800897a:	3718      	adds	r7, #24
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE>:

void MicroInterpreter::Init(tflite::Profiler* profiler) {
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	6039      	str	r1, [r7, #0]
  const flatbuffers::Vector<flatbuffers::Offset<SubGraph>>* subgraphs =
      model_->subgraphs();
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	685b      	ldr	r3, [r3, #4]
 800898e:	4618      	mov	r0, r3
 8008990:	f7fd fb91 	bl	80060b6 <_ZNK6tflite5Model9subgraphsEv>
 8008994:	60f8      	str	r0, [r7, #12]
  if (subgraphs->size() != 1) {
 8008996:	68f8      	ldr	r0, [r7, #12]
 8008998:	f7ff fa28 	bl	8007dec <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEE4sizeEv>
 800899c:	4603      	mov	r3, r0
 800899e:	2b01      	cmp	r3, #1
 80089a0:	bf14      	ite	ne
 80089a2:	2301      	movne	r3, #1
 80089a4:	2300      	moveq	r3, #0
 80089a6:	b2db      	uxtb	r3, r3
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d00a      	beq.n	80089c2 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x42>
    TF_LITE_REPORT_ERROR(error_reporter_,
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	4915      	ldr	r1, [pc, #84]	; (8008a08 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x88>)
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fb fd6a 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Only 1 subgraph is currently supported.\n");
    initialization_status_ = kTfLiteError;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return;
 80089c0:	e01e      	b.n	8008a00 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x80>
  }
  subgraph_ = (*subgraphs)[0];
 80089c2:	2100      	movs	r1, #0
 80089c4:	68f8      	ldr	r0, [r7, #12]
 80089c6:	f7ff faad 	bl	8007f24 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8SubGraphEEEEixEm>
 80089ca:	4602      	mov	r2, r0
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	671a      	str	r2, [r3, #112]	; 0x70

  context_.impl_ = static_cast<void*>(&context_helper_);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	61da      	str	r2, [r3, #28]
  context_.ReportError = context_helper_.ReportOpError;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	4a0b      	ldr	r2, [pc, #44]	; (8008a0c <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x8c>)
 80089de:	625a      	str	r2, [r3, #36]	; 0x24
  context_.GetTensor = context_helper_.GetTensor;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4a0b      	ldr	r2, [pc, #44]	; (8008a10 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x90>)
 80089e4:	661a      	str	r2, [r3, #96]	; 0x60
  context_.GetEvalTensor = context_helper_.GetEvalTensor;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4a0a      	ldr	r2, [pc, #40]	; (8008a14 <_ZN6tflite16MicroInterpreter4InitEPNS_8ProfilerE+0x94>)
 80089ea:	665a      	str	r2, [r3, #100]	; 0x64
  context_.recommended_num_threads = 1;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	635a      	str	r2, [r3, #52]	; 0x34
  context_.profiler = profiler;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	645a      	str	r2, [r3, #68]	; 0x44

  initialization_status_ = kTfLiteOk;
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2200      	movs	r2, #0
 80089fc:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	08011384 	.word	0x08011384
 8008a0c:	08008785 	.word	0x08008785
 8008a10:	080087bd 	.word	0x080087bd
 8008a14:	080087f1 	.word	0x080087f1

08008a18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>:
  for (int32_t i = 0; i < size; ++i) {
    data[i] = flatbuffers::EndianScalar(data[i]);
  }
}

TfLiteStatus MicroInterpreter::AllocateTensors() {
 8008a18:	b590      	push	{r4, r7, lr}
 8008a1a:	b091      	sub	sp, #68	; 0x44
 8008a1c:	af02      	add	r7, sp, #8
 8008a1e:	6078      	str	r0, [r7, #4]
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	6859      	ldr	r1, [r3, #4]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	689a      	ldr	r2, [r3, #8]
 8008a2c:	687c      	ldr	r4, [r7, #4]
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	3374      	adds	r3, #116	; 0x74
 8008a32:	9300      	str	r3, [sp, #0]
 8008a34:	4623      	mov	r3, r4
 8008a36:	f7fe f96d 	bl	8006d14 <_ZN6tflite14MicroAllocator20StartModelAllocationEPKNS_5ModelERKNS_15MicroOpResolverEPPNS_19NodeAndRegistrationEPP16TfLiteEvalTensor>
 8008a3a:	4603      	mov	r3, r0
                                      &node_and_registrations_,
                                      &eval_tensors_) != kTfLiteOk) {
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	bf14      	ite	ne
 8008a40:	2301      	movne	r3, #1
 8008a42:	2300      	moveq	r3, #0
 8008a44:	b2db      	uxtb	r3, r3
  if (allocator_.StartModelAllocation(model_, op_resolver_,
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d00b      	beq.n	8008a62 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x4a>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	68db      	ldr	r3, [r3, #12]
 8008a4e:	497f      	ldr	r1, [pc, #508]	; (8008c4c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x234>)
 8008a50:	4618      	mov	r0, r3
 8008a52:	f7fb fd1b 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed starting model allocation.\n");
    initialization_status_ = kTfLiteError;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	2201      	movs	r2, #1
 8008a5a:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
    return kTfLiteError;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	e0f0      	b.n	8008c44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>

  // Update the pointer now that TfLiteEvalTensor allocation has completed on
  // the context helper.
  // TODO(b/16157777): This call would not be needed if ContextHelper rolled
  // into the interpreter.
  context_helper_.SetTfLiteEvalTensors(eval_tensors_);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008a6c:	4619      	mov	r1, r3
 8008a6e:	4610      	mov	r0, r2
 8008a70:	f7ff fed4 	bl	800881c <_ZN6tflite8internal13ContextHelper20SetTfLiteEvalTensorsEP16TfLiteEvalTensor>
  context_.tensors_size = subgraph_->tensors()->size();
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a78:	4618      	mov	r0, r3
 8008a7a:	f7fd faab 	bl	8005fd4 <_ZNK6tflite8SubGraph7tensorsEv>
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f7ff f917 	bl	8007cb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008a86:	4602      	mov	r2, r0
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	611a      	str	r2, [r3, #16]
      }
    }
  }

  // Only allow AllocatePersistentBuffer in Init stage.
  context_.AllocatePersistentBuffer = context_helper_.AllocatePersistentBuffer;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4a70      	ldr	r2, [pc, #448]	; (8008c50 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x238>)
 8008a90:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2200      	movs	r2, #0
 8008a96:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = nullptr;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	655a      	str	r2, [r3, #84]	; 0x54

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	637b      	str	r3, [r7, #52]	; 0x34
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	f7fd fabe 	bl	8006028 <_ZNK6tflite8SubGraph9operatorsEv>
 8008aac:	4603      	mov	r3, r0
 8008aae:	4618      	mov	r0, r3
 8008ab0:	f7ff f934 	bl	8007d1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008ab4:	4602      	mov	r2, r0
 8008ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	bf34      	ite	cc
 8008abc:	2301      	movcc	r3, #1
 8008abe:	2300      	movcs	r3, #0
 8008ac0:	b2db      	uxtb	r3, r3
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d035      	beq.n	8008b32 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x11a>
    auto* node = &(node_and_registrations_[i].node);
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6819      	ldr	r1, [r3, #0]
 8008aca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008acc:	4613      	mov	r3, r2
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	4413      	add	r3, r2
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	440b      	add	r3, r1
 8008ad6:	617b      	str	r3, [r7, #20]
    auto* registration = node_and_registrations_[i].registration;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	6819      	ldr	r1, [r3, #0]
 8008adc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	00db      	lsls	r3, r3, #3
 8008ae6:	440b      	add	r3, r1
 8008ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aea:	613b      	str	r3, [r7, #16]
    size_t init_data_size;
    const char* init_data;
    if (registration->builtin_code == BuiltinOperator_CUSTOM) {
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	695b      	ldr	r3, [r3, #20]
 8008af0:	2b20      	cmp	r3, #32
 8008af2:	d106      	bne.n	8008b02 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xea>
      init_data = reinterpret_cast<const char*>(node->custom_initial_data);
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	699b      	ldr	r3, [r3, #24]
 8008af8:	62fb      	str	r3, [r7, #44]	; 0x2c
      init_data_size = node->custom_initial_data_size;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	69db      	ldr	r3, [r3, #28]
 8008afe:	633b      	str	r3, [r7, #48]	; 0x30
 8008b00:	e004      	b.n	8008b0c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0xf4>
    } else {
      init_data = reinterpret_cast<const char*>(node->builtin_data);
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	695b      	ldr	r3, [r3, #20]
 8008b06:	62fb      	str	r3, [r7, #44]	; 0x2c
      init_data_size = 0;
 8008b08:	2300      	movs	r3, #0
 8008b0a:	633b      	str	r3, [r7, #48]	; 0x30
    }
    if (registration->init) {
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00a      	beq.n	8008b2a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x112>
      node->user_data =
          registration->init(&context_, init_data, init_data_size);
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	f102 0010 	add.w	r0, r2, #16
 8008b1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008b20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b22:	4798      	blx	r3
 8008b24:	4602      	mov	r2, r0
      node->user_data =
 8008b26:	697b      	ldr	r3, [r7, #20]
 8008b28:	611a      	str	r2, [r3, #16]
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008b2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008b30:	e7b7      	b.n	8008aa2 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x8a>
    }
  }

  // Both AllocatePersistentBuffer and RequestScratchBufferInArena is
  // available in Prepare stage.
  context_.RequestScratchBufferInArena =
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4a47      	ldr	r2, [pc, #284]	; (8008c54 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x23c>)
 8008b36:	651a      	str	r2, [r3, #80]	; 0x50
      context_helper_.RequestScratchBufferInArena;
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008b38:	2300      	movs	r3, #0
 8008b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fd fa71 	bl	8006028 <_ZNK6tflite8SubGraph9operatorsEv>
 8008b46:	4603      	mov	r3, r0
 8008b48:	4618      	mov	r0, r3
 8008b4a:	f7ff f8e7 	bl	8007d1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008b4e:	4602      	mov	r2, r0
 8008b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b52:	4293      	cmp	r3, r2
 8008b54:	bf34      	ite	cc
 8008b56:	2301      	movcc	r3, #1
 8008b58:	2300      	movcs	r3, #0
 8008b5a:	b2db      	uxtb	r3, r3
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d03c      	beq.n	8008bda <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1c2>
    auto* node = &(node_and_registrations_[i].node);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	6819      	ldr	r1, [r3, #0]
 8008b64:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b66:	4613      	mov	r3, r2
 8008b68:	009b      	lsls	r3, r3, #2
 8008b6a:	4413      	add	r3, r2
 8008b6c:	00db      	lsls	r3, r3, #3
 8008b6e:	440b      	add	r3, r1
 8008b70:	623b      	str	r3, [r7, #32]
    auto* registration = node_and_registrations_[i].registration;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6819      	ldr	r1, [r3, #0]
 8008b76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008b78:	4613      	mov	r3, r2
 8008b7a:	009b      	lsls	r3, r3, #2
 8008b7c:	4413      	add	r3, r2
 8008b7e:	00db      	lsls	r3, r3, #3
 8008b80:	440b      	add	r3, r1
 8008b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b84:	61fb      	str	r3, [r7, #28]
    if (registration->prepare) {
 8008b86:	69fb      	ldr	r3, [r7, #28]
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d01a      	beq.n	8008bc4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
      TfLiteStatus prepare_status = registration->prepare(&context_, node);
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	689b      	ldr	r3, [r3, #8]
 8008b92:	687a      	ldr	r2, [r7, #4]
 8008b94:	3210      	adds	r2, #16
 8008b96:	6a39      	ldr	r1, [r7, #32]
 8008b98:	4610      	mov	r0, r2
 8008b9a:	4798      	blx	r3
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	76fb      	strb	r3, [r7, #27]
      if (prepare_status != kTfLiteOk) {
 8008ba0:	7efb      	ldrb	r3, [r7, #27]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d00e      	beq.n	8008bc4 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1ac>
        TF_LITE_REPORT_ERROR(
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	68dc      	ldr	r4, [r3, #12]
 8008baa:	69f8      	ldr	r0, [r7, #28]
 8008bac:	f7ff fd76 	bl	800869c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	7efb      	ldrb	r3, [r7, #27]
 8008bb4:	9300      	str	r3, [sp, #0]
 8008bb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb8:	4927      	ldr	r1, [pc, #156]	; (8008c58 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x240>)
 8008bba:	4620      	mov	r0, r4
 8008bbc:	f7fb fc66 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %df) failed to prepare with status %d",
            OpNameFromRegistration(registration), i, prepare_status);
        return kTfLiteError;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e03f      	b.n	8008c44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>
      }
    }
    allocator_.FinishPrepareNodeAllocations(/*node_id=*/i);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008bc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bca:	4611      	mov	r1, r2
 8008bcc:	4618      	mov	r0, r3
 8008bce:	f7fe f9bf 	bl	8006f50 <_ZN6tflite14MicroAllocator28FinishPrepareNodeAllocationsEi>
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008bd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd4:	3301      	adds	r3, #1
 8008bd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bd8:	e7b0      	b.n	8008b3c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x124>
  }

  // Prepare is done, we're ready for Invoke. Memory allocation is no longer
  // allowed. Kernels can only fetch scratch buffers via GetScratchBuffer.
  context_.AllocatePersistentBuffer = nullptr;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	649a      	str	r2, [r3, #72]	; 0x48
  context_.RequestScratchBufferInArena = nullptr;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	651a      	str	r2, [r3, #80]	; 0x50
  context_.GetScratchBuffer = context_helper_.GetScratchBuffer;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	4a1c      	ldr	r2, [pc, #112]	; (8008c5c <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x244>)
 8008bea:	655a      	str	r2, [r3, #84]	; 0x54

  TF_LITE_ENSURE_OK(&context_,
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6e98      	ldr	r0, [r3, #104]	; 0x68
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6859      	ldr	r1, [r3, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	3378      	adds	r3, #120	; 0x78
 8008bfc:	f7fe f8e6 	bl	8006dcc <_ZN6tflite14MicroAllocator21FinishModelAllocationEPKNS_5ModelEP16TfLiteEvalTensorPPNS_19ScratchBufferHandleE>
 8008c00:	4603      	mov	r3, r0
 8008c02:	73fb      	strb	r3, [r7, #15]
 8008c04:	7bfb      	ldrb	r3, [r7, #15]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x1f6>
 8008c0a:	7bfb      	ldrb	r3, [r7, #15]
 8008c0c:	e01a      	b.n	8008c44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>
                    allocator_.FinishModelAllocation(model_, eval_tensors_,
                                                     &scratch_buffer_handles_));
  // TODO(b/16157777): Remove this when ContextHelper is rolled into this class.
  context_helper_.SetScratchBufferHandles(scratch_buffer_handles_);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008c18:	4619      	mov	r1, r3
 8008c1a:	4610      	mov	r0, r2
 8008c1c:	f7ff fe0c 	bl	8008838 <_ZN6tflite8internal13ContextHelper23SetScratchBufferHandlesEPNS_19ScratchBufferHandleE>

  TF_LITE_ENSURE_STATUS(ResetVariableTensors());
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f995 	bl	8008f50 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>
 8008c26:	4603      	mov	r3, r0
 8008c28:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d002      	beq.n	8008c3a <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x222>
 8008c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008c38:	e004      	b.n	8008c44 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv+0x22c>

  tensors_allocated_ = true;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
  return kTfLiteOk;
 8008c42:	2300      	movs	r3, #0
}
 8008c44:	4618      	mov	r0, r3
 8008c46:	373c      	adds	r7, #60	; 0x3c
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	bd90      	pop	{r4, r7, pc}
 8008c4c:	080113b0 	.word	0x080113b0
 8008c50:	08008703 	.word	0x08008703
 8008c54:	0800872f 	.word	0x0800872f
 8008c58:	080113d4 	.word	0x080113d4
 8008c5c:	08008759 	.word	0x08008759

08008c60 <_ZN6tflite21ScopedOperatorProfileD1Ev>:
class ScopedOperatorProfile : public ScopedProfile {
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b082      	sub	sp, #8
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7ff fca7 	bl	80085be <_ZN6tflite13ScopedProfileD1Ev>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
	...

08008c7c <_ZN6tflite16MicroInterpreter6InvokeEv>:

TfLiteStatus MicroInterpreter::Invoke() {
 8008c7c:	b5b0      	push	{r4, r5, r7, lr}
 8008c7e:	b08c      	sub	sp, #48	; 0x30
 8008c80:	af02      	add	r7, sp, #8
 8008c82:	6078      	str	r0, [r7, #4]
  if (initialization_status_ != kTfLiteOk) {
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 306d 	ldrb.w	r3, [r3, #109]	; 0x6d
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d007      	beq.n	8008c9e <_ZN6tflite16MicroInterpreter6InvokeEv+0x22>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	68db      	ldr	r3, [r3, #12]
 8008c92:	4947      	ldr	r1, [pc, #284]	; (8008db0 <_ZN6tflite16MicroInterpreter6InvokeEv+0x134>)
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7fb fbf9 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Invoke() called after initialization failed\n");
    return kTfLiteError;
 8008c9a:	2401      	movs	r4, #1
 8008c9c:	e082      	b.n	8008da4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>
  }

  // Ensure tensors are allocated before the interpreter is invoked to avoid
  // difficult to debug segfaults.
  if (!tensors_allocated_) {
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8008ca4:	f083 0301 	eor.w	r3, r3, #1
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d009      	beq.n	8008cc2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
    TF_LITE_ENSURE_OK(&context_, AllocateTensors());
 8008cae:	6878      	ldr	r0, [r7, #4]
 8008cb0:	f7ff feb2 	bl	8008a18 <_ZN6tflite16MicroInterpreter15AllocateTensorsEv>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	75bb      	strb	r3, [r7, #22]
 8008cb8:	7dbb      	ldrb	r3, [r7, #22]
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d001      	beq.n	8008cc2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x46>
 8008cbe:	7dbc      	ldrb	r4, [r7, #22]
 8008cc0:	e070      	b.n	8008da4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>
  }

  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	627b      	str	r3, [r7, #36]	; 0x24
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cca:	4618      	mov	r0, r3
 8008ccc:	f7fd f9ac 	bl	8006028 <_ZNK6tflite8SubGraph9operatorsEv>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	f7ff f822 	bl	8007d1c <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite8OperatorEEEE4sizeEv>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cdc:	4293      	cmp	r3, r2
 8008cde:	bf34      	ite	cc
 8008ce0:	2301      	movcc	r3, #1
 8008ce2:	2300      	movcs	r3, #0
 8008ce4:	b2db      	uxtb	r3, r3
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d05b      	beq.n	8008da2 <_ZN6tflite16MicroInterpreter6InvokeEv+0x126>
    auto* node = &(node_and_registrations_[i].node);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6819      	ldr	r1, [r3, #0]
 8008cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	00db      	lsls	r3, r3, #3
 8008cf8:	440b      	add	r3, r1
 8008cfa:	623b      	str	r3, [r7, #32]
    auto* registration = node_and_registrations_[i].registration;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6819      	ldr	r1, [r3, #0]
 8008d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d02:	4613      	mov	r3, r2
 8008d04:	009b      	lsls	r3, r3, #2
 8008d06:	4413      	add	r3, r2
 8008d08:	00db      	lsls	r3, r3, #3
 8008d0a:	440b      	add	r3, r1
 8008d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d0e:	61fb      	str	r3, [r7, #28]

    if (registration->invoke) {
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d040      	beq.n	8008d9a <_ZN6tflite16MicroInterpreter6InvokeEv+0x11e>
      TfLiteStatus invoke_status;
#ifndef NDEBUG  // Omit profiler overhead from release builds.
      // The case where profiler == nullptr is handled by
      // ScopedOperatorProfile.
      tflite::Profiler* profiler =
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d1c:	61bb      	str	r3, [r7, #24]
          reinterpret_cast<tflite::Profiler*>(context_.profiler);
      ScopedOperatorProfile scoped_profiler(
          profiler, OpNameFromRegistration(registration), i);
 8008d1e:	69f8      	ldr	r0, [r7, #28]
 8008d20:	f7ff fcbc 	bl	800869c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8008d24:	4602      	mov	r2, r0
 8008d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d28:	f107 000c 	add.w	r0, r7, #12
 8008d2c:	69b9      	ldr	r1, [r7, #24]
 8008d2e:	f7ff fc5e 	bl	80085ee <_ZN6tflite21ScopedOperatorProfileC1EPNS_8ProfilerEPKci>
#endif
      invoke_status = registration->invoke(&context_, node);
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	68db      	ldr	r3, [r3, #12]
 8008d36:	687a      	ldr	r2, [r7, #4]
 8008d38:	3210      	adds	r2, #16
 8008d3a:	6a39      	ldr	r1, [r7, #32]
 8008d3c:	4610      	mov	r0, r2
 8008d3e:	4798      	blx	r3
 8008d40:	4603      	mov	r3, r0
 8008d42:	75fb      	strb	r3, [r7, #23]

      // All TfLiteTensor structs used in the kernel are allocated from temp
      // memory in the allocator. This creates a chain of allocations in the
      // temp section. The call below resets the chain of allocations to
      // prepare for the next call.
      allocator_.ResetTempAllocations();
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	3308      	adds	r3, #8
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	4610      	mov	r0, r2
 8008d54:	4798      	blx	r3

      if (invoke_status == kTfLiteError) {
 8008d56:	7dfb      	ldrb	r3, [r7, #23]
 8008d58:	2b01      	cmp	r3, #1
 8008d5a:	d10f      	bne.n	8008d7c <_ZN6tflite16MicroInterpreter6InvokeEv+0x100>
        TF_LITE_REPORT_ERROR(
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	68dc      	ldr	r4, [r3, #12]
 8008d60:	69f8      	ldr	r0, [r7, #28]
 8008d62:	f7ff fc9b 	bl	800869c <_ZN6tflite12_GLOBAL__N_122OpNameFromRegistrationEPK18TfLiteRegistration>
 8008d66:	4602      	mov	r2, r0
 8008d68:	7dfb      	ldrb	r3, [r7, #23]
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6e:	4911      	ldr	r1, [pc, #68]	; (8008db4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x138>)
 8008d70:	4620      	mov	r0, r4
 8008d72:	f7fb fb8b 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
            error_reporter_,
            "Node %s (number %d) failed to invoke with status %d",
            OpNameFromRegistration(registration), i, invoke_status);
        return kTfLiteError;
 8008d76:	2401      	movs	r4, #1
 8008d78:	2500      	movs	r5, #0
 8008d7a:	e006      	b.n	8008d8a <_ZN6tflite16MicroInterpreter6InvokeEv+0x10e>
      } else if (invoke_status != kTfLiteOk) {
 8008d7c:	7dfb      	ldrb	r3, [r7, #23]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <_ZN6tflite16MicroInterpreter6InvokeEv+0x10c>
        return invoke_status;
 8008d82:	7dfc      	ldrb	r4, [r7, #23]
 8008d84:	2500      	movs	r5, #0
 8008d86:	e000      	b.n	8008d8a <_ZN6tflite16MicroInterpreter6InvokeEv+0x10e>
 8008d88:	2501      	movs	r5, #1
 8008d8a:	f107 030c 	add.w	r3, r7, #12
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7ff ff66 	bl	8008c60 <_ZN6tflite21ScopedOperatorProfileD1Ev>
 8008d94:	2d01      	cmp	r5, #1
 8008d96:	d105      	bne.n	8008da4 <_ZN6tflite16MicroInterpreter6InvokeEv+0x128>
          profiler, OpNameFromRegistration(registration), i);
 8008d98:	bf00      	nop
  for (size_t i = 0; i < subgraph_->operators()->size(); ++i) {
 8008d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	627b      	str	r3, [r7, #36]	; 0x24
 8008da0:	e791      	b.n	8008cc6 <_ZN6tflite16MicroInterpreter6InvokeEv+0x4a>
      }
    }
  }
  return kTfLiteOk;
 8008da2:	2400      	movs	r4, #0
 8008da4:	4623      	mov	r3, r4
}
 8008da6:	4618      	mov	r0, r3
 8008da8:	3728      	adds	r7, #40	; 0x28
 8008daa:	46bd      	mov	sp, r7
 8008dac:	bdb0      	pop	{r4, r5, r7, pc}
 8008dae:	bf00      	nop
 8008db0:	0801140c 	.word	0x0801140c
 8008db4:	0801143c 	.word	0x0801143c

08008db8 <_ZN6tflite16MicroInterpreter5inputEj>:

TfLiteTensor* MicroInterpreter::input(size_t index) {
 8008db8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008dba:	b087      	sub	sp, #28
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	60f8      	str	r0, [r7, #12]
 8008dc0:	60b9      	str	r1, [r7, #8]
  const size_t length = inputs_size();
 8008dc2:	68f8      	ldr	r0, [r7, #12]
 8008dc4:	f7ff fc2a 	bl	800861c <_ZNK6tflite16MicroInterpreter11inputs_sizeEv>
 8008dc8:	6178      	str	r0, [r7, #20]
  if (index >= length) {
 8008dca:	68ba      	ldr	r2, [r7, #8]
 8008dcc:	697b      	ldr	r3, [r7, #20]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d308      	bcc.n	8008de4 <_ZN6tflite16MicroInterpreter5inputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	68d8      	ldr	r0, [r3, #12]
 8008dd6:	697b      	ldr	r3, [r7, #20]
 8008dd8:	68ba      	ldr	r2, [r7, #8]
 8008dda:	4928      	ldr	r1, [pc, #160]	; (8008e7c <_ZN6tflite16MicroInterpreter5inputEj+0xc4>)
 8008ddc:	f7fb fb56 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Input index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8008de0:	2300      	movs	r3, #0
 8008de2:	e046      	b.n	8008e72 <_ZN6tflite16MicroInterpreter5inputEj+0xba>
  }
  if (index != 0) {
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d01f      	beq.n	8008e2a <_ZN6tflite16MicroInterpreter5inputEj+0x72>
    TF_LITE_REPORT_ERROR(
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	68db      	ldr	r3, [r3, #12]
 8008dee:	4924      	ldr	r1, [pc, #144]	; (8008e80 <_ZN6tflite16MicroInterpreter5inputEj+0xc8>)
 8008df0:	4618      	mov	r0, r3
 8008df2:	f7fb fb4b 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Input tensors not at index 0 are allocated from the "
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                                     inputs().Get(index));
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681c      	ldr	r4, [r3, #0]
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	685e      	ldr	r6, [r3, #4]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e0a:	607b      	str	r3, [r7, #4]
                                                     inputs().Get(index));
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f7ff fc17 	bl	8008640 <_ZNK6tflite16MicroInterpreter6inputsEv>
 8008e12:	4603      	mov	r3, r0
 8008e14:	68b9      	ldr	r1, [r7, #8]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fb fe1e 	bl	8004a58 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	687a      	ldr	r2, [r7, #4]
 8008e20:	4631      	mov	r1, r6
 8008e22:	4628      	mov	r0, r5
 8008e24:	47a0      	blx	r4
 8008e26:	4603      	mov	r3, r0
 8008e28:	e023      	b.n	8008e72 <_ZN6tflite16MicroInterpreter5inputEj+0xba>
  }
  if (input_tensor_ == nullptr) {
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d11b      	bne.n	8008e6c <_ZN6tflite16MicroInterpreter5inputEj+0xb4>
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, eval_tensors_, inputs().Get(index));
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	681c      	ldr	r4, [r3, #0]
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	685e      	ldr	r6, [r3, #4]
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e48:	607b      	str	r3, [r7, #4]
        model_, eval_tensors_, inputs().Get(index));
 8008e4a:	68f8      	ldr	r0, [r7, #12]
 8008e4c:	f7ff fbf8 	bl	8008640 <_ZNK6tflite16MicroInterpreter6inputsEv>
 8008e50:	4603      	mov	r3, r0
 8008e52:	68b9      	ldr	r1, [r7, #8]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f7fb fdff 	bl	8004a58 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008e5a:	4603      	mov	r3, r0
    input_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	4631      	mov	r1, r6
 8008e60:	4628      	mov	r0, r5
 8008e62:	47a0      	blx	r4
 8008e64:	4602      	mov	r2, r0
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
  return input_tensor_;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	371c      	adds	r7, #28
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	08011470 	.word	0x08011470
 8008e80:	0801149c 	.word	0x0801149c

08008e84 <_ZN6tflite16MicroInterpreter6outputEj>:

TfLiteTensor* MicroInterpreter::output(size_t index) {
 8008e84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008e86:	b087      	sub	sp, #28
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
  const size_t length = outputs_size();
 8008e8e:	68f8      	ldr	r0, [r7, #12]
 8008e90:	f7ff fbe4 	bl	800865c <_ZNK6tflite16MicroInterpreter12outputs_sizeEv>
 8008e94:	6178      	str	r0, [r7, #20]
  if (index >= length) {
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d308      	bcc.n	8008eb0 <_ZN6tflite16MicroInterpreter6outputEj+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter_,
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	68d8      	ldr	r0, [r3, #12]
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	68ba      	ldr	r2, [r7, #8]
 8008ea6:	4928      	ldr	r1, [pc, #160]	; (8008f48 <_ZN6tflite16MicroInterpreter6outputEj+0xc4>)
 8008ea8:	f7fb faf0 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Output index %d out of range (length is %d)", index,
                         length);
    return nullptr;
 8008eac:	2300      	movs	r3, #0
 8008eae:	e046      	b.n	8008f3e <_ZN6tflite16MicroInterpreter6outputEj+0xba>
  }
  if (index != 0) {
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d01f      	beq.n	8008ef6 <_ZN6tflite16MicroInterpreter6outputEj+0x72>
    TF_LITE_REPORT_ERROR(
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	4924      	ldr	r1, [pc, #144]	; (8008f4c <_ZN6tflite16MicroInterpreter6outputEj+0xc8>)
 8008ebc:	4618      	mov	r0, r3
 8008ebe:	f7fb fae5 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Output tensors not at index 0 are allocated from the "
        "persistent memory arena. Repeat calls will cause excess "
        "allocation!");
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                                                     outputs().Get(index));
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	681c      	ldr	r4, [r3, #0]
    return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	685e      	ldr	r6, [r3, #4]
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ed6:	607b      	str	r3, [r7, #4]
                                                     outputs().Get(index));
 8008ed8:	68f8      	ldr	r0, [r7, #12]
 8008eda:	f7ff fbd1 	bl	8008680 <_ZNK6tflite16MicroInterpreter7outputsEv>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	68b9      	ldr	r1, [r7, #8]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f7fb fdb8 	bl	8004a58 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	687a      	ldr	r2, [r7, #4]
 8008eec:	4631      	mov	r1, r6
 8008eee:	4628      	mov	r0, r5
 8008ef0:	47a0      	blx	r4
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	e023      	b.n	8008f3e <_ZN6tflite16MicroInterpreter6outputEj+0xba>
  }
  if (output_tensor_ == nullptr) {
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d11b      	bne.n	8008f38 <_ZN6tflite16MicroInterpreter6outputEj+0xb4>
    // TODO(b/162311891): Drop these allocations when the interpreter supports
    // handling buffers from TfLiteEvalTensor.
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	6e9d      	ldr	r5, [r3, #104]	; 0x68
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6e9b      	ldr	r3, [r3, #104]	; 0x68
        model_, eval_tensors_, outputs().Get(index));
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681c      	ldr	r4, [r3, #0]
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	685e      	ldr	r6, [r3, #4]
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f14:	607b      	str	r3, [r7, #4]
        model_, eval_tensors_, outputs().Get(index));
 8008f16:	68f8      	ldr	r0, [r7, #12]
 8008f18:	f7ff fbb2 	bl	8008680 <_ZNK6tflite16MicroInterpreter7outputsEv>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	68b9      	ldr	r1, [r7, #8]
 8008f20:	4618      	mov	r0, r3
 8008f22:	f7fb fd99 	bl	8004a58 <_ZNK11flatbuffers6VectorIlE3GetEm>
 8008f26:	4603      	mov	r3, r0
    output_tensor_ = allocator_.AllocatePersistentTfLiteTensor(
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4628      	mov	r0, r5
 8008f2e:	47a0      	blx	r4
 8008f30:	4602      	mov	r2, r0
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }
  return output_tensor_;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
}
 8008f3e:	4618      	mov	r0, r3
 8008f40:	371c      	adds	r7, #28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f46:	bf00      	nop
 8008f48:	08011514 	.word	0x08011514
 8008f4c:	08011540 	.word	0x08011540

08008f50 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv>:
  }
  return allocator_.AllocatePersistentTfLiteTensor(model_, eval_tensors_,
                                                   index);
}

TfLiteStatus MicroInterpreter::ResetVariableTensors() {
 8008f50:	b590      	push	{r4, r7, lr}
 8008f52:	b089      	sub	sp, #36	; 0x24
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	6078      	str	r0, [r7, #4]
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 8008f58:	2300      	movs	r3, #0
 8008f5a:	61fb      	str	r3, [r7, #28]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f60:	4618      	mov	r0, r3
 8008f62:	f7fd f837 	bl	8005fd4 <_ZNK6tflite8SubGraph7tensorsEv>
 8008f66:	4603      	mov	r3, r0
 8008f68:	4618      	mov	r0, r3
 8008f6a:	f7fe fea3 	bl	8007cb4 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE4sizeEv>
 8008f6e:	4602      	mov	r2, r0
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	4293      	cmp	r3, r2
 8008f74:	bf34      	ite	cc
 8008f76:	2301      	movcc	r3, #1
 8008f78:	2300      	movcs	r3, #0
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d053      	beq.n	8009028 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xd8>
    auto* tensor = subgraph_->tensors()->Get(i);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f84:	4618      	mov	r0, r3
 8008f86:	f7fd f825 	bl	8005fd4 <_ZNK6tflite8SubGraph7tensorsEv>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	69f9      	ldr	r1, [r7, #28]
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f7fe fe9e 	bl	8007cd0 <_ZNK11flatbuffers6VectorINS_6OffsetIN6tflite6TensorEEEE3GetEm>
 8008f94:	6178      	str	r0, [r7, #20]
    if (tensor->is_variable()) {
 8008f96:	6978      	ldr	r0, [r7, #20]
 8008f98:	f7fc ffcf 	bl	8005f3a <_ZNK6tflite6Tensor11is_variableEv>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d03e      	beq.n	8009020 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xd0>
      size_t buffer_size;
      TF_LITE_ENSURE_STATUS(
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8008fa6:	69fa      	ldr	r2, [r7, #28]
 8008fa8:	4613      	mov	r3, r2
 8008faa:	005b      	lsls	r3, r3, #1
 8008fac:	4413      	add	r3, r2
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	440b      	add	r3, r1
 8008fb2:	f107 020c 	add.w	r2, r7, #12
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	4618      	mov	r0, r3
 8008fba:	f7fc ff2a 	bl	8005e12 <_ZN6tflite26TfLiteEvalTensorByteLengthEPK16TfLiteEvalTensorPj>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	74fb      	strb	r3, [r7, #19]
 8008fc2:	7cfb      	ldrb	r3, [r7, #19]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d001      	beq.n	8008fcc <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0x7c>
 8008fc8:	7cfb      	ldrb	r3, [r7, #19]
 8008fca:	e02e      	b.n	800902a <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xda>
          TfLiteEvalTensorByteLength(&eval_tensors_[i], &buffer_size));

      int value = 0;
 8008fcc:	2300      	movs	r3, #0
 8008fce:	61bb      	str	r3, [r7, #24]
      if (tensor->type() == tflite::TensorType_INT8) {
 8008fd0:	6978      	ldr	r0, [r7, #20]
 8008fd2:	f7fc fd51 	bl	8005a78 <_ZNK6tflite6Tensor4typeEv>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	2b09      	cmp	r3, #9
 8008fda:	bf0c      	ite	eq
 8008fdc:	2301      	moveq	r3, #1
 8008fde:	2300      	movne	r3, #0
 8008fe0:	b2db      	uxtb	r3, r3
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d00e      	beq.n	8009004 <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xb4>
        value = tensor->quantization()->zero_point()->Get(0);
 8008fe6:	6978      	ldr	r0, [r7, #20]
 8008fe8:	f7fc ff99 	bl	8005f1e <_ZNK6tflite6Tensor12quantizationEv>
 8008fec:	4603      	mov	r3, r0
 8008fee:	4618      	mov	r0, r3
 8008ff0:	f7fc ff69 	bl	8005ec6 <_ZNK6tflite22QuantizationParameters10zero_pointEv>
 8008ff4:	4603      	mov	r3, r0
 8008ff6:	2100      	movs	r1, #0
 8008ff8:	4618      	mov	r0, r3
 8008ffa:	f7fe fe33 	bl	8007c64 <_ZNK11flatbuffers6VectorIxE3GetEm>
 8008ffe:	4603      	mov	r3, r0
 8009000:	460c      	mov	r4, r1
 8009002:	61bb      	str	r3, [r7, #24]
      }
      memset(eval_tensors_[i].data.raw, value, buffer_size);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6f59      	ldr	r1, [r3, #116]	; 0x74
 8009008:	69fa      	ldr	r2, [r7, #28]
 800900a:	4613      	mov	r3, r2
 800900c:	005b      	lsls	r3, r3, #1
 800900e:	4413      	add	r3, r2
 8009010:	009b      	lsls	r3, r3, #2
 8009012:	440b      	add	r3, r1
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	68fa      	ldr	r2, [r7, #12]
 8009018:	69b9      	ldr	r1, [r7, #24]
 800901a:	4618      	mov	r0, r3
 800901c:	f003 fb36 	bl	800c68c <memset>
  for (size_t i = 0; i < subgraph_->tensors()->size(); ++i) {
 8009020:	69fb      	ldr	r3, [r7, #28]
 8009022:	3301      	adds	r3, #1
 8009024:	61fb      	str	r3, [r7, #28]
 8009026:	e799      	b.n	8008f5c <_ZN6tflite16MicroInterpreter20ResetVariableTensorsEv+0xc>
    }
  }

  return kTfLiteOk;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	3724      	adds	r7, #36	; 0x24
 800902e:	46bd      	mov	sp, r7
 8009030:	bd90      	pop	{r4, r7, pc}

08009032 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>:

// All input buffers to the number conversion functions must be this long.
const int kFastToBufferSize = 48;

// Reverses a zero-terminated string in-place.
char* ReverseStringInPlace(char* start, char* end) {
 8009032:	b480      	push	{r7}
 8009034:	b087      	sub	sp, #28
 8009036:	af00      	add	r7, sp, #0
 8009038:	6078      	str	r0, [r7, #4]
 800903a:	6039      	str	r1, [r7, #0]
  char* p1 = start;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	617b      	str	r3, [r7, #20]
  char* p2 = end - 1;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	3b01      	subs	r3, #1
 8009044:	613b      	str	r3, [r7, #16]
  while (p1 < p2) {
 8009046:	697a      	ldr	r2, [r7, #20]
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	429a      	cmp	r2, r3
 800904c:	d20e      	bcs.n	800906c <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x3a>
    char tmp = *p1;
 800904e:	697b      	ldr	r3, [r7, #20]
 8009050:	781b      	ldrb	r3, [r3, #0]
 8009052:	73fb      	strb	r3, [r7, #15]
    *p1++ = *p2;
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	1c5a      	adds	r2, r3, #1
 8009058:	617a      	str	r2, [r7, #20]
 800905a:	693a      	ldr	r2, [r7, #16]
 800905c:	7812      	ldrb	r2, [r2, #0]
 800905e:	701a      	strb	r2, [r3, #0]
    *p2-- = tmp;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	1e5a      	subs	r2, r3, #1
 8009064:	613a      	str	r2, [r7, #16]
 8009066:	7bfa      	ldrb	r2, [r7, #15]
 8009068:	701a      	strb	r2, [r3, #0]
  while (p1 < p2) {
 800906a:	e7ec      	b.n	8009046 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_+0x14>
  }
  return start;
 800906c:	687b      	ldr	r3, [r7, #4]
}
 800906e:	4618      	mov	r0, r3
 8009070:	371c      	adds	r7, #28
 8009072:	46bd      	mov	sp, r7
 8009074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009078:	4770      	bx	lr

0800907a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>:

// Appends a string to a string, in-place. You need to pass in the maximum
// string length as the second argument.
char* StrCatStr(char* main, int main_max_length, const char* to_append) {
 800907a:	b480      	push	{r7}
 800907c:	b087      	sub	sp, #28
 800907e:	af00      	add	r7, sp, #0
 8009080:	60f8      	str	r0, [r7, #12]
 8009082:	60b9      	str	r1, [r7, #8]
 8009084:	607a      	str	r2, [r7, #4]
  char* current = main;
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x20>
    ++current;
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	3301      	adds	r3, #1
 8009096:	617b      	str	r3, [r7, #20]
  while (*current != 0) {
 8009098:	e7f7      	b.n	800908a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x10>
  }
  char* current_end = main + (main_max_length - 1);
 800909a:	68bb      	ldr	r3, [r7, #8]
 800909c:	3b01      	subs	r3, #1
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	4413      	add	r3, r2
 80090a2:	613b      	str	r3, [r7, #16]
  while ((*to_append != 0) && (current < current_end)) {
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	781b      	ldrb	r3, [r3, #0]
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d00e      	beq.n	80090ca <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d20a      	bcs.n	80090ca <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x50>
    *current = *to_append;
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	781a      	ldrb	r2, [r3, #0]
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	701a      	strb	r2, [r3, #0]
    ++current;
 80090bc:	697b      	ldr	r3, [r7, #20]
 80090be:	3301      	adds	r3, #1
 80090c0:	617b      	str	r3, [r7, #20]
    ++to_append;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	3301      	adds	r3, #1
 80090c6:	607b      	str	r3, [r7, #4]
  while ((*to_append != 0) && (current < current_end)) {
 80090c8:	e7ec      	b.n	80090a4 <_ZN12_GLOBAL__N_19StrCatStrEPciPKc+0x2a>
  }
  *current = 0;
 80090ca:	697b      	ldr	r3, [r7, #20]
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]
  return current;
 80090d0:	697b      	ldr	r3, [r7, #20]
}
 80090d2:	4618      	mov	r0, r3
 80090d4:	371c      	adds	r7, #28
 80090d6:	46bd      	mov	sp, r7
 80090d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090dc:	4770      	bx	lr

080090de <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastUInt32ToBufferLeft(uint32_t i, char* buffer, int base) {
 80090de:	b580      	push	{r7, lr}
 80090e0:	b088      	sub	sp, #32
 80090e2:	af00      	add	r7, sp, #0
 80090e4:	60f8      	str	r0, [r7, #12]
 80090e6:	60b9      	str	r1, [r7, #8]
 80090e8:	607a      	str	r2, [r7, #4]
  char* start = buffer;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	61bb      	str	r3, [r7, #24]
  do {
    int32_t digit = i % base;
 80090ee:	687a      	ldr	r2, [r7, #4]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80090f6:	fb02 f201 	mul.w	r2, r2, r1
 80090fa:	1a9b      	subs	r3, r3, r2
 80090fc:	617b      	str	r3, [r7, #20]
    char character;
    if (digit < 10) {
 80090fe:	697b      	ldr	r3, [r7, #20]
 8009100:	2b09      	cmp	r3, #9
 8009102:	dc04      	bgt.n	800910e <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x30>
      character = '0' + digit;
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	b2db      	uxtb	r3, r3
 8009108:	3330      	adds	r3, #48	; 0x30
 800910a:	77fb      	strb	r3, [r7, #31]
 800910c:	e003      	b.n	8009116 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x38>
    } else {
      character = 'a' + (digit - 10);
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	b2db      	uxtb	r3, r3
 8009112:	3357      	adds	r3, #87	; 0x57
 8009114:	77fb      	strb	r3, [r7, #31]
    }
    *buffer++ = character;
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	1c5a      	adds	r2, r3, #1
 800911a:	60ba      	str	r2, [r7, #8]
 800911c:	7ffa      	ldrb	r2, [r7, #31]
 800911e:	701a      	strb	r2, [r3, #0]
    i /= base;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68fa      	ldr	r2, [r7, #12]
 8009124:	fbb2 f3f3 	udiv	r3, r2, r3
 8009128:	60fb      	str	r3, [r7, #12]
  } while (i > 0);
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	2b00      	cmp	r3, #0
 800912e:	d000      	beq.n	8009132 <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x54>
  do {
 8009130:	e7dd      	b.n	80090ee <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci+0x10>
  *buffer = 0;
 8009132:	68bb      	ldr	r3, [r7, #8]
 8009134:	2200      	movs	r2, #0
 8009136:	701a      	strb	r2, [r3, #0]
  ReverseStringInPlace(start, buffer);
 8009138:	68b9      	ldr	r1, [r7, #8]
 800913a:	69b8      	ldr	r0, [r7, #24]
 800913c:	f7ff ff79 	bl	8009032 <_ZN12_GLOBAL__N_120ReverseStringInPlaceEPcS0_>
  return buffer;
 8009140:	68bb      	ldr	r3, [r7, #8]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3720      	adds	r7, #32
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}

0800914a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>:

// Populates the provided buffer with an ASCII representation of the number.
char* FastInt32ToBufferLeft(int32_t i, char* buffer) {
 800914a:	b580      	push	{r7, lr}
 800914c:	b084      	sub	sp, #16
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
 8009152:	6039      	str	r1, [r7, #0]
  uint32_t u = i;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	60fb      	str	r3, [r7, #12]
  if (i < 0) {
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2b00      	cmp	r3, #0
 800915c:	da07      	bge.n	800916e <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc+0x24>
    *buffer++ = '-';
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	1c5a      	adds	r2, r3, #1
 8009162:	603a      	str	r2, [r7, #0]
 8009164:	222d      	movs	r2, #45	; 0x2d
 8009166:	701a      	strb	r2, [r3, #0]
    u = -u;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	425b      	negs	r3, r3
 800916c:	60fb      	str	r3, [r7, #12]
  }
  return FastUInt32ToBufferLeft(u, buffer, 10);
 800916e:	220a      	movs	r2, #10
 8009170:	6839      	ldr	r1, [r7, #0]
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f7ff ffb3 	bl	80090de <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8009178:	4603      	mov	r3, r0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>:

// Converts a number to a string and appends it to another.
char* StrCatInt32(char* main, int main_max_length, int32_t number) {
 8009182:	b580      	push	{r7, lr}
 8009184:	b090      	sub	sp, #64	; 0x40
 8009186:	af00      	add	r7, sp, #0
 8009188:	60f8      	str	r0, [r7, #12]
 800918a:	60b9      	str	r1, [r7, #8]
 800918c:	607a      	str	r2, [r7, #4]
  char number_string[kFastToBufferSize];
  FastInt32ToBufferLeft(number, number_string);
 800918e:	f107 0310 	add.w	r3, r7, #16
 8009192:	4619      	mov	r1, r3
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f7ff ffd8 	bl	800914a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
  return StrCatStr(main, main_max_length, number_string);
 800919a:	f107 0310 	add.w	r3, r7, #16
 800919e:	461a      	mov	r2, r3
 80091a0:	68b9      	ldr	r1, [r7, #8]
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f7ff ff69 	bl	800907a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80091a8:	4603      	mov	r3, r0
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3740      	adds	r7, #64	; 0x40
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>:

// Converts a number to a string and appends it to another.
char* StrCatUInt32(char* main, int main_max_length, uint32_t number, int base) {
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b090      	sub	sp, #64	; 0x40
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	60f8      	str	r0, [r7, #12]
 80091ba:	60b9      	str	r1, [r7, #8]
 80091bc:	607a      	str	r2, [r7, #4]
 80091be:	603b      	str	r3, [r7, #0]
  char number_string[kFastToBufferSize];
  FastUInt32ToBufferLeft(number, number_string, base);
 80091c0:	f107 0310 	add.w	r3, r7, #16
 80091c4:	683a      	ldr	r2, [r7, #0]
 80091c6:	4619      	mov	r1, r3
 80091c8:	6878      	ldr	r0, [r7, #4]
 80091ca:	f7ff ff88 	bl	80090de <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
  return StrCatStr(main, main_max_length, number_string);
 80091ce:	f107 0310 	add.w	r3, r7, #16
 80091d2:	461a      	mov	r2, r3
 80091d4:	68b9      	ldr	r1, [r7, #8]
 80091d6:	68f8      	ldr	r0, [r7, #12]
 80091d8:	f7ff ff4f 	bl	800907a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 80091dc:	4603      	mov	r3, r0
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3740      	adds	r7, #64	; 0x40
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
	...

080091e8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>:

// Populates the provided buffer with ASCII representation of the float number.
// Avoids the use of any floating point instructions (since these aren't
// supported on many microcontrollers) and as a consequence prints values with
// power-of-two exponents.
char* FastFloatToBufferLeft(float f, char* buffer) {
 80091e8:	b590      	push	{r4, r7, lr}
 80091ea:	b09b      	sub	sp, #108	; 0x6c
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	ed87 0a01 	vstr	s0, [r7, #4]
 80091f2:	6038      	str	r0, [r7, #0]
  char* current = buffer;
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	667b      	str	r3, [r7, #100]	; 0x64
  char* current_end = buffer + (kFastToBufferSize - 1);
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	332f      	adds	r3, #47	; 0x2f
 80091fc:	653b      	str	r3, [r7, #80]	; 0x50
  // Access the bit fields of the floating point value to avoid requiring any
  // float instructions. These constants are derived from IEEE 754.
  const uint32_t sign_mask = 0x80000000;
 80091fe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009202:	64fb      	str	r3, [r7, #76]	; 0x4c
  const uint32_t exponent_mask = 0x7f800000;
 8009204:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 8009208:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t exponent_shift = 23;
 800920a:	2317      	movs	r3, #23
 800920c:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t exponent_bias = 127;
 800920e:	237f      	movs	r3, #127	; 0x7f
 8009210:	643b      	str	r3, [r7, #64]	; 0x40
  const uint32_t fraction_mask = 0x007fffff;
 8009212:	4b6a      	ldr	r3, [pc, #424]	; (80093bc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d4>)
 8009214:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t u;
  memcpy(&u, &f, sizeof(int32_t));
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	61fb      	str	r3, [r7, #28]
  const int32_t exponent =
      ((u & exponent_mask) >> exponent_shift) - exponent_bias;
 800921a:	69fb      	ldr	r3, [r7, #28]
 800921c:	0ddb      	lsrs	r3, r3, #23
 800921e:	b2db      	uxtb	r3, r3
 8009220:	3b7f      	subs	r3, #127	; 0x7f
  const int32_t exponent =
 8009222:	63bb      	str	r3, [r7, #56]	; 0x38
  const uint32_t fraction = (u & fraction_mask);
 8009224:	69fb      	ldr	r3, [r7, #28]
 8009226:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800922a:	637b      	str	r3, [r7, #52]	; 0x34
  // Expect ~0x2B1B9D3 for fraction.
  if (u & sign_mask) {
 800922c:	69fb      	ldr	r3, [r7, #28]
 800922e:	2b00      	cmp	r3, #0
 8009230:	da05      	bge.n	800923e <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x56>
    *current = '-';
 8009232:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009234:	222d      	movs	r2, #45	; 0x2d
 8009236:	701a      	strb	r2, [r3, #0]
    current += 1;
 8009238:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800923a:	3301      	adds	r3, #1
 800923c:	667b      	str	r3, [r7, #100]	; 0x64
  }
  *current = 0;
 800923e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009240:	2200      	movs	r2, #0
 8009242:	701a      	strb	r2, [r3, #0]
  // These are special cases for infinities and not-a-numbers.
  if (exponent == 128) {
 8009244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009246:	2b80      	cmp	r3, #128	; 0x80
 8009248:	d118      	bne.n	800927c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x94>
    if (fraction == 0) {
 800924a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800924c:	2b00      	cmp	r3, #0
 800924e:	d10a      	bne.n	8009266 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x7e>
      current = StrCatStr(current, (current_end - current), "Inf");
 8009250:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009252:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009254:	1ad3      	subs	r3, r2, r3
 8009256:	4a5a      	ldr	r2, [pc, #360]	; (80093c0 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1d8>)
 8009258:	4619      	mov	r1, r3
 800925a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800925c:	f7ff ff0d 	bl	800907a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8009260:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 8009262:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009264:	e0a5      	b.n	80093b2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
    } else {
      current = StrCatStr(current, (current_end - current), "NaN");
 8009266:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009268:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800926a:	1ad3      	subs	r3, r2, r3
 800926c:	4a55      	ldr	r2, [pc, #340]	; (80093c4 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1dc>)
 800926e:	4619      	mov	r1, r3
 8009270:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009272:	f7ff ff02 	bl	800907a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 8009276:	6678      	str	r0, [r7, #100]	; 0x64
      return current;
 8009278:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800927a:	e09a      	b.n	80093b2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  // correct decimal digits we need to scale our value before passing it to the
  // conversion function. This scale should be 10000000/8388608 = 1.1920928955.
  // We can approximate this using multiply-adds and right-shifts using the
  // values in this array. The 1. portion of the number string is printed out
  // in a fixed way before the fraction, below.
  const int32_t scale_shifts_size = 13;
 800927c:	230d      	movs	r3, #13
 800927e:	633b      	str	r3, [r7, #48]	; 0x30
  const int8_t scale_shifts[13] = {3,  4,  8,  11, 13, 14, 17,
 8009280:	4b51      	ldr	r3, [pc, #324]	; (80093c8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e0>)
 8009282:	f107 040c 	add.w	r4, r7, #12
 8009286:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8009288:	c407      	stmia	r4!, {r0, r1, r2}
 800928a:	7023      	strb	r3, [r4, #0]
                                   18, 19, 20, 21, 22, 23};
  uint32_t scaled_fraction = fraction;
 800928c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800928e:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 8009290:	2300      	movs	r3, #0
 8009292:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009296:	2b0c      	cmp	r3, #12
 8009298:	dc0f      	bgt.n	80092ba <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xd2>
    scaled_fraction += (fraction >> scale_shifts[i]);
 800929a:	f107 020c 	add.w	r2, r7, #12
 800929e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092a0:	4413      	add	r3, r2
 80092a2:	f993 3000 	ldrsb.w	r3, [r3]
 80092a6:	461a      	mov	r2, r3
 80092a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092aa:	40d3      	lsrs	r3, r2
 80092ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80092ae:	4413      	add	r3, r2
 80092b0:	663b      	str	r3, [r7, #96]	; 0x60
  for (int i = 0; i < scale_shifts_size; ++i) {
 80092b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80092b4:	3301      	adds	r3, #1
 80092b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80092b8:	e7ec      	b.n	8009294 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0xac>
  }
  *current = '1';
 80092ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092bc:	2231      	movs	r2, #49	; 0x31
 80092be:	701a      	strb	r2, [r3, #0]
  current += 1;
 80092c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092c2:	3301      	adds	r3, #1
 80092c4:	667b      	str	r3, [r7, #100]	; 0x64
  *current = '.';
 80092c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092c8:	222e      	movs	r2, #46	; 0x2e
 80092ca:	701a      	strb	r2, [r3, #0]
  current += 1;
 80092cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092ce:	3301      	adds	r3, #1
 80092d0:	667b      	str	r3, [r7, #100]	; 0x64
  *current = 0;
 80092d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092d4:	2200      	movs	r2, #0
 80092d6:	701a      	strb	r2, [r3, #0]

  // Prepend leading zeros to fill in all 7 bytes of the fraction. Truncate
  // zeros off the end of the fraction. Every fractional value takes 7 bytes.
  // For example, 2500 would be written into the buffer as 0002500 since it
  // represents .00025.
  constexpr int kMaxFractionalDigits = 7;
 80092d8:	2307      	movs	r3, #7
 80092da:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Abort early if there is not enough space in the buffer.
  if (current_end - current <= kMaxFractionalDigits) {
 80092dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092e0:	1ad3      	subs	r3, r2, r3
 80092e2:	2b07      	cmp	r3, #7
 80092e4:	dc01      	bgt.n	80092ea <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x102>
    return current;
 80092e6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80092e8:	e063      	b.n	80093b2 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1ca>
  }

  // Pre-fill buffer with zeros to ensure zero-truncation works properly.
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 80092ea:	2301      	movs	r3, #1
 80092ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80092ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092f0:	2b06      	cmp	r3, #6
 80092f2:	dc08      	bgt.n	8009306 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x11e>
    *(current + i) = '0';
 80092f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80092f6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80092f8:	4413      	add	r3, r2
 80092fa:	2230      	movs	r2, #48	; 0x30
 80092fc:	701a      	strb	r2, [r3, #0]
  for (int i = 1; i < kMaxFractionalDigits; i++) {
 80092fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009300:	3301      	adds	r3, #1
 8009302:	65bb      	str	r3, [r7, #88]	; 0x58
 8009304:	e7f3      	b.n	80092ee <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x106>
  }

  // Track how large the fraction is to add leading zeros.
  char* previous = current;
 8009306:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009308:	62bb      	str	r3, [r7, #40]	; 0x28
  current = StrCatUInt32(current, (current_end - current), scaled_fraction, 10);
 800930a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800930c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800930e:	1ad1      	subs	r1, r2, r3
 8009310:	230a      	movs	r3, #10
 8009312:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009314:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009316:	f7ff ff4c 	bl	80091b2 <_ZN12_GLOBAL__N_112StrCatUInt32EPcimi>
 800931a:	6678      	str	r0, [r7, #100]	; 0x64
  int fraction_digits = current - previous;
 800931c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800931e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009320:	1ad3      	subs	r3, r2, r3
 8009322:	627b      	str	r3, [r7, #36]	; 0x24
  int leading_zeros = kMaxFractionalDigits - fraction_digits;
 8009324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009326:	f1c3 0307 	rsb	r3, r3, #7
 800932a:	623b      	str	r3, [r7, #32]

  // Overwrite the null terminator from StrCatUInt32 to ensure zero-trunctaion
  // works properly.
  *current = '0';
 800932c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800932e:	2230      	movs	r2, #48	; 0x30
 8009330:	701a      	strb	r2, [r3, #0]

  // Shift fraction values and prepend zeros if necessary.
  if (leading_zeros != 0) {
 8009332:	6a3b      	ldr	r3, [r7, #32]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d018      	beq.n	800936a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
    for (int i = 0; i < fraction_digits; i++) {
 8009338:	2300      	movs	r3, #0
 800933a:	657b      	str	r3, [r7, #84]	; 0x54
 800933c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	429a      	cmp	r2, r3
 8009342:	da0f      	bge.n	8009364 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x17c>
      current--;
 8009344:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009346:	3b01      	subs	r3, #1
 8009348:	667b      	str	r3, [r7, #100]	; 0x64
      *(current + leading_zeros) = *current;
 800934a:	6a3b      	ldr	r3, [r7, #32]
 800934c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800934e:	4413      	add	r3, r2
 8009350:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009352:	7812      	ldrb	r2, [r2, #0]
 8009354:	701a      	strb	r2, [r3, #0]
      *current = '0';
 8009356:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009358:	2230      	movs	r2, #48	; 0x30
 800935a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < fraction_digits; i++) {
 800935c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800935e:	3301      	adds	r3, #1
 8009360:	657b      	str	r3, [r7, #84]	; 0x54
 8009362:	e7eb      	b.n	800933c <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x154>
    }
    current += kMaxFractionalDigits;
 8009364:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009366:	3307      	adds	r3, #7
 8009368:	667b      	str	r3, [r7, #100]	; 0x64
  }

  // Truncate trailing zeros for cleaner logs. Ensure we leave at least one
  // fractional character for the case when scaled_fraction is 0.
  while (*(current - 1) == '0' && (current - 1) > previous) {
 800936a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800936c:	3b01      	subs	r3, #1
 800936e:	781b      	ldrb	r3, [r3, #0]
 8009370:	2b30      	cmp	r3, #48	; 0x30
 8009372:	d108      	bne.n	8009386 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
 8009374:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009376:	3b01      	subs	r3, #1
 8009378:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800937a:	429a      	cmp	r2, r3
 800937c:	d203      	bcs.n	8009386 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x19e>
    current--;
 800937e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009380:	3b01      	subs	r3, #1
 8009382:	667b      	str	r3, [r7, #100]	; 0x64
  while (*(current - 1) == '0' && (current - 1) > previous) {
 8009384:	e7f1      	b.n	800936a <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x182>
  }
  *current = 0;
 8009386:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009388:	2200      	movs	r2, #0
 800938a:	701a      	strb	r2, [r3, #0]
  current = StrCatStr(current, (current_end - current), "*2^");
 800938c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800938e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	4a0e      	ldr	r2, [pc, #56]	; (80093cc <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc+0x1e4>)
 8009394:	4619      	mov	r1, r3
 8009396:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8009398:	f7ff fe6f 	bl	800907a <_ZN12_GLOBAL__N_19StrCatStrEPciPKc>
 800939c:	6678      	str	r0, [r7, #100]	; 0x64
  current = StrCatInt32(current, (current_end - current), exponent);
 800939e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80093a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80093a6:	4619      	mov	r1, r3
 80093a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80093aa:	f7ff feea 	bl	8009182 <_ZN12_GLOBAL__N_111StrCatInt32EPcil>
 80093ae:	6678      	str	r0, [r7, #100]	; 0x64
  return current;
 80093b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	376c      	adds	r7, #108	; 0x6c
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd90      	pop	{r4, r7, pc}
 80093ba:	bf00      	nop
 80093bc:	007fffff 	.word	0x007fffff
 80093c0:	08011668 	.word	0x08011668
 80093c4:	0801166c 	.word	0x0801166c
 80093c8:	08011674 	.word	0x08011674
 80093cc:	08011670 	.word	0x08011670

080093d0 <_ZN12_GLOBAL__N_111FormatInt32EPcl>:

int FormatInt32(char* output, int32_t i) {
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastInt32ToBufferLeft(i, output) - output);
 80093da:	6879      	ldr	r1, [r7, #4]
 80093dc:	6838      	ldr	r0, [r7, #0]
 80093de:	f7ff feb4 	bl	800914a <_ZN12_GLOBAL__N_121FastInt32ToBufferLeftElPc>
 80093e2:	4603      	mov	r3, r0
 80093e4:	461a      	mov	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	1ad3      	subs	r3, r2, r3
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>:

int FormatUInt32(char* output, uint32_t i) {
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
 80093fa:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 10) - output);
 80093fc:	220a      	movs	r2, #10
 80093fe:	6879      	ldr	r1, [r7, #4]
 8009400:	6838      	ldr	r0, [r7, #0]
 8009402:	f7ff fe6c 	bl	80090de <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 8009406:	4603      	mov	r3, r0
 8009408:	461a      	mov	r2, r3
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	1ad3      	subs	r3, r2, r3
}
 800940e:	4618      	mov	r0, r3
 8009410:	3708      	adds	r7, #8
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <_ZN12_GLOBAL__N_19FormatHexEPcm>:

int FormatHex(char* output, uint32_t i) {
 8009416:	b580      	push	{r7, lr}
 8009418:	b082      	sub	sp, #8
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
 800941e:	6039      	str	r1, [r7, #0]
  return static_cast<int>(FastUInt32ToBufferLeft(i, output, 16) - output);
 8009420:	2210      	movs	r2, #16
 8009422:	6879      	ldr	r1, [r7, #4]
 8009424:	6838      	ldr	r0, [r7, #0]
 8009426:	f7ff fe5a 	bl	80090de <_ZN12_GLOBAL__N_122FastUInt32ToBufferLeftEmPci>
 800942a:	4603      	mov	r3, r0
 800942c:	461a      	mov	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	1ad3      	subs	r3, r2, r3
}
 8009432:	4618      	mov	r0, r3
 8009434:	3708      	adds	r7, #8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}

0800943a <_ZN12_GLOBAL__N_111FormatFloatEPcf>:

int FormatFloat(char* output, float i) {
 800943a:	b580      	push	{r7, lr}
 800943c:	b082      	sub	sp, #8
 800943e:	af00      	add	r7, sp, #0
 8009440:	6078      	str	r0, [r7, #4]
 8009442:	ed87 0a00 	vstr	s0, [r7]
  return static_cast<int>(FastFloatToBufferLeft(i, output) - output);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	ed97 0a00 	vldr	s0, [r7]
 800944c:	f7ff fecc 	bl	80091e8 <_ZN12_GLOBAL__N_121FastFloatToBufferLeftEfPc>
 8009450:	4603      	mov	r3, r0
 8009452:	461a      	mov	r2, r3
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	1ad3      	subs	r3, r2, r3
}
 8009458:	4618      	mov	r0, r3
 800945a:	3708      	adds	r7, #8
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}

08009460 <MicroVsnprintf>:

}  // namespace

extern "C" int MicroVsnprintf(char* output, int len, const char* format,
                              va_list args) {
 8009460:	b5b0      	push	{r4, r5, r7, lr}
 8009462:	b08a      	sub	sp, #40	; 0x28
 8009464:	af00      	add	r7, sp, #0
 8009466:	60f8      	str	r0, [r7, #12]
 8009468:	60b9      	str	r1, [r7, #8]
 800946a:	607a      	str	r2, [r7, #4]
 800946c:	603b      	str	r3, [r7, #0]
  int output_index = 0;
 800946e:	2300      	movs	r3, #0
 8009470:	627b      	str	r3, [r7, #36]	; 0x24
  const char* current = format;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	623b      	str	r3, [r7, #32]
  // One extra character must be left for the null terminator.
  const int usable_length = len - 1;
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	3b01      	subs	r3, #1
 800947a:	61bb      	str	r3, [r7, #24]
  while (*current != '\0' && output_index < usable_length) {
 800947c:	6a3b      	ldr	r3, [r7, #32]
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2b00      	cmp	r3, #0
 8009482:	f000 8109 	beq.w	8009698 <MicroVsnprintf+0x238>
 8009486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009488:	69bb      	ldr	r3, [r7, #24]
 800948a:	429a      	cmp	r2, r3
 800948c:	f280 8104 	bge.w	8009698 <MicroVsnprintf+0x238>
    if (*current == '%') {
 8009490:	6a3b      	ldr	r3, [r7, #32]
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	2b25      	cmp	r3, #37	; 0x25
 8009496:	f040 80f3 	bne.w	8009680 <MicroVsnprintf+0x220>
      current++;
 800949a:	6a3b      	ldr	r3, [r7, #32]
 800949c:	3301      	adds	r3, #1
 800949e:	623b      	str	r3, [r7, #32]
      switch (*current) {
 80094a0:	6a3b      	ldr	r3, [r7, #32]
 80094a2:	781b      	ldrb	r3, [r3, #0]
 80094a4:	2b66      	cmp	r3, #102	; 0x66
 80094a6:	f000 8083 	beq.w	80095b0 <MicroVsnprintf+0x150>
 80094aa:	2b66      	cmp	r3, #102	; 0x66
 80094ac:	dc05      	bgt.n	80094ba <MicroVsnprintf+0x5a>
 80094ae:	2b25      	cmp	r3, #37	; 0x25
 80094b0:	f000 80b4 	beq.w	800961c <MicroVsnprintf+0x1bc>
 80094b4:	2b64      	cmp	r3, #100	; 0x64
 80094b6:	d008      	beq.n	80094ca <MicroVsnprintf+0x6a>
 80094b8:	e0ed      	b.n	8009696 <MicroVsnprintf+0x236>
 80094ba:	2b75      	cmp	r3, #117	; 0x75
 80094bc:	d026      	beq.n	800950c <MicroVsnprintf+0xac>
 80094be:	2b78      	cmp	r3, #120	; 0x78
 80094c0:	d045      	beq.n	800954e <MicroVsnprintf+0xee>
 80094c2:	2b73      	cmp	r3, #115	; 0x73
 80094c4:	f000 80b6 	beq.w	8009634 <MicroVsnprintf+0x1d4>
 80094c8:	e0e5      	b.n	8009696 <MicroVsnprintf+0x236>
        case 'd':
          // Cut off log message if format could exceed log buffer length.
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 80094ca:	69ba      	ldr	r2, [r7, #24]
 80094cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ce:	1ad3      	subs	r3, r2, r3
 80094d0:	2b0a      	cmp	r3, #10
 80094d2:	dc09      	bgt.n	80094e8 <MicroVsnprintf+0x88>
            output[output_index++] = '\0';
 80094d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094d6:	1c5a      	adds	r2, r3, #1
 80094d8:	627a      	str	r2, [r7, #36]	; 0x24
 80094da:	461a      	mov	r2, r3
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	4413      	add	r3, r2
 80094e0:	2200      	movs	r2, #0
 80094e2:	701a      	strb	r2, [r3, #0]
            return output_index;
 80094e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094e6:	e0e0      	b.n	80096aa <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatInt32(&output[output_index], va_arg(args, int32_t));
 80094e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	18d0      	adds	r0, r2, r3
 80094ee:	683b      	ldr	r3, [r7, #0]
 80094f0:	1d1a      	adds	r2, r3, #4
 80094f2:	603a      	str	r2, [r7, #0]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4619      	mov	r1, r3
 80094f8:	f7ff ff6a 	bl	80093d0 <_ZN12_GLOBAL__N_111FormatInt32EPcl>
 80094fc:	4602      	mov	r2, r0
          output_index +=
 80094fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009500:	4413      	add	r3, r2
 8009502:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8009504:	6a3b      	ldr	r3, [r7, #32]
 8009506:	3301      	adds	r3, #1
 8009508:	623b      	str	r3, [r7, #32]
          break;
 800950a:	e0c4      	b.n	8009696 <MicroVsnprintf+0x236>
        case 'u':
          if (usable_length - output_index < kMaxIntCharsNeeded) {
 800950c:	69ba      	ldr	r2, [r7, #24]
 800950e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009510:	1ad3      	subs	r3, r2, r3
 8009512:	2b0a      	cmp	r3, #10
 8009514:	dc09      	bgt.n	800952a <MicroVsnprintf+0xca>
            output[output_index++] = '\0';
 8009516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009518:	1c5a      	adds	r2, r3, #1
 800951a:	627a      	str	r2, [r7, #36]	; 0x24
 800951c:	461a      	mov	r2, r3
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	4413      	add	r3, r2
 8009522:	2200      	movs	r2, #0
 8009524:	701a      	strb	r2, [r3, #0]
            return output_index;
 8009526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009528:	e0bf      	b.n	80096aa <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatUInt32(&output[output_index], va_arg(args, uint32_t));
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	68fa      	ldr	r2, [r7, #12]
 800952e:	18d0      	adds	r0, r2, r3
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	1d1a      	adds	r2, r3, #4
 8009534:	603a      	str	r2, [r7, #0]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	4619      	mov	r1, r3
 800953a:	f7ff ff5a 	bl	80093f2 <_ZN12_GLOBAL__N_112FormatUInt32EPcm>
 800953e:	4602      	mov	r2, r0
          output_index +=
 8009540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009542:	4413      	add	r3, r2
 8009544:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8009546:	6a3b      	ldr	r3, [r7, #32]
 8009548:	3301      	adds	r3, #1
 800954a:	623b      	str	r3, [r7, #32]
          break;
 800954c:	e0a3      	b.n	8009696 <MicroVsnprintf+0x236>
        case 'x':
          if (usable_length - output_index < kMaxHexCharsNeeded) {
 800954e:	69ba      	ldr	r2, [r7, #24]
 8009550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009552:	1ad3      	subs	r3, r2, r3
 8009554:	2b09      	cmp	r3, #9
 8009556:	dc09      	bgt.n	800956c <MicroVsnprintf+0x10c>
            output[output_index++] = '\0';
 8009558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800955a:	1c5a      	adds	r2, r3, #1
 800955c:	627a      	str	r2, [r7, #36]	; 0x24
 800955e:	461a      	mov	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	4413      	add	r3, r2
 8009564:	2200      	movs	r2, #0
 8009566:	701a      	strb	r2, [r3, #0]
            return output_index;
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	e09e      	b.n	80096aa <MicroVsnprintf+0x24a>
          }
          output[output_index++] = '0';
 800956c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956e:	1c5a      	adds	r2, r3, #1
 8009570:	627a      	str	r2, [r7, #36]	; 0x24
 8009572:	461a      	mov	r2, r3
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	4413      	add	r3, r2
 8009578:	2230      	movs	r2, #48	; 0x30
 800957a:	701a      	strb	r2, [r3, #0]
          output[output_index++] = 'x';
 800957c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800957e:	1c5a      	adds	r2, r3, #1
 8009580:	627a      	str	r2, [r7, #36]	; 0x24
 8009582:	461a      	mov	r2, r3
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	4413      	add	r3, r2
 8009588:	2278      	movs	r2, #120	; 0x78
 800958a:	701a      	strb	r2, [r3, #0]
          output_index +=
              FormatHex(&output[output_index], va_arg(args, uint32_t));
 800958c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800958e:	68fa      	ldr	r2, [r7, #12]
 8009590:	18d0      	adds	r0, r2, r3
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	1d1a      	adds	r2, r3, #4
 8009596:	603a      	str	r2, [r7, #0]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	4619      	mov	r1, r3
 800959c:	f7ff ff3b 	bl	8009416 <_ZN12_GLOBAL__N_19FormatHexEPcm>
 80095a0:	4602      	mov	r2, r0
          output_index +=
 80095a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095a4:	4413      	add	r3, r2
 80095a6:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	3301      	adds	r3, #1
 80095ac:	623b      	str	r3, [r7, #32]
          break;
 80095ae:	e072      	b.n	8009696 <MicroVsnprintf+0x236>
        case 'f':
          if (usable_length - output_index < kMaxFloatCharsNeeded) {
 80095b0:	69ba      	ldr	r2, [r7, #24]
 80095b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095b4:	1ad3      	subs	r3, r2, r3
 80095b6:	ee07 3a90 	vmov	s15, r3
 80095ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80095be:	eeb2 7a0c 	vmov.f32	s14, #44	; 0x41600000  14.0
 80095c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095ca:	d509      	bpl.n	80095e0 <MicroVsnprintf+0x180>
            output[output_index++] = '\0';
 80095cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095ce:	1c5a      	adds	r2, r3, #1
 80095d0:	627a      	str	r2, [r7, #36]	; 0x24
 80095d2:	461a      	mov	r2, r3
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	4413      	add	r3, r2
 80095d8:	2200      	movs	r2, #0
 80095da:	701a      	strb	r2, [r3, #0]
            return output_index;
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	e064      	b.n	80096aa <MicroVsnprintf+0x24a>
          }
          output_index +=
              FormatFloat(&output[output_index], va_arg(args, double));
 80095e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095e2:	68fa      	ldr	r2, [r7, #12]
 80095e4:	18d5      	adds	r5, r2, r3
 80095e6:	683b      	ldr	r3, [r7, #0]
 80095e8:	3307      	adds	r3, #7
 80095ea:	f023 0307 	bic.w	r3, r3, #7
 80095ee:	f103 0208 	add.w	r2, r3, #8
 80095f2:	603a      	str	r2, [r7, #0]
 80095f4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80095f8:	4618      	mov	r0, r3
 80095fa:	4621      	mov	r1, r4
 80095fc:	f7f7 fae4 	bl	8000bc8 <__aeabi_d2f>
 8009600:	4603      	mov	r3, r0
 8009602:	ee00 3a10 	vmov	s0, r3
 8009606:	4628      	mov	r0, r5
 8009608:	f7ff ff17 	bl	800943a <_ZN12_GLOBAL__N_111FormatFloatEPcf>
 800960c:	4602      	mov	r2, r0
          output_index +=
 800960e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009610:	4413      	add	r3, r2
 8009612:	627b      	str	r3, [r7, #36]	; 0x24
          current++;
 8009614:	6a3b      	ldr	r3, [r7, #32]
 8009616:	3301      	adds	r3, #1
 8009618:	623b      	str	r3, [r7, #32]
          break;
 800961a:	e03c      	b.n	8009696 <MicroVsnprintf+0x236>
        case '%':
          output[output_index++] = *current++;
 800961c:	6a3b      	ldr	r3, [r7, #32]
 800961e:	1c5a      	adds	r2, r3, #1
 8009620:	623a      	str	r2, [r7, #32]
 8009622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009624:	1c51      	adds	r1, r2, #1
 8009626:	6279      	str	r1, [r7, #36]	; 0x24
 8009628:	4611      	mov	r1, r2
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	440a      	add	r2, r1
 800962e:	781b      	ldrb	r3, [r3, #0]
 8009630:	7013      	strb	r3, [r2, #0]
          break;
 8009632:	e030      	b.n	8009696 <MicroVsnprintf+0x236>
        case 's':
          char* string = va_arg(args, char*);
 8009634:	683b      	ldr	r3, [r7, #0]
 8009636:	1d1a      	adds	r2, r3, #4
 8009638:	603a      	str	r2, [r7, #0]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	617b      	str	r3, [r7, #20]
          int string_idx = 0;
 800963e:	2300      	movs	r3, #0
 8009640:	61fb      	str	r3, [r7, #28]
          while (string_idx + output_index < usable_length &&
 8009642:	69fa      	ldr	r2, [r7, #28]
 8009644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009646:	4413      	add	r3, r2
 8009648:	69ba      	ldr	r2, [r7, #24]
 800964a:	429a      	cmp	r2, r3
 800964c:	dd14      	ble.n	8009678 <MicroVsnprintf+0x218>
                 string[string_idx] != '\0') {
 800964e:	69fb      	ldr	r3, [r7, #28]
 8009650:	697a      	ldr	r2, [r7, #20]
 8009652:	4413      	add	r3, r2
 8009654:	781b      	ldrb	r3, [r3, #0]
          while (string_idx + output_index < usable_length &&
 8009656:	2b00      	cmp	r3, #0
 8009658:	d00e      	beq.n	8009678 <MicroVsnprintf+0x218>
            output[output_index++] = string[string_idx++];
 800965a:	69fb      	ldr	r3, [r7, #28]
 800965c:	1c5a      	adds	r2, r3, #1
 800965e:	61fa      	str	r2, [r7, #28]
 8009660:	461a      	mov	r2, r3
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	441a      	add	r2, r3
 8009666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009668:	1c59      	adds	r1, r3, #1
 800966a:	6279      	str	r1, [r7, #36]	; 0x24
 800966c:	4619      	mov	r1, r3
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	440b      	add	r3, r1
 8009672:	7812      	ldrb	r2, [r2, #0]
 8009674:	701a      	strb	r2, [r3, #0]
          while (string_idx + output_index < usable_length &&
 8009676:	e7e4      	b.n	8009642 <MicroVsnprintf+0x1e2>
          }
          current++;
 8009678:	6a3b      	ldr	r3, [r7, #32]
 800967a:	3301      	adds	r3, #1
 800967c:	623b      	str	r3, [r7, #32]
 800967e:	e6fd      	b.n	800947c <MicroVsnprintf+0x1c>
      }
    } else {
      output[output_index++] = *current++;
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	1c5a      	adds	r2, r3, #1
 8009684:	623a      	str	r2, [r7, #32]
 8009686:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009688:	1c51      	adds	r1, r2, #1
 800968a:	6279      	str	r1, [r7, #36]	; 0x24
 800968c:	4611      	mov	r1, r2
 800968e:	68fa      	ldr	r2, [r7, #12]
 8009690:	440a      	add	r2, r1
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	7013      	strb	r3, [r2, #0]
  while (*current != '\0' && output_index < usable_length) {
 8009696:	e6f1      	b.n	800947c <MicroVsnprintf+0x1c>
    }
  }
  output[output_index++] = '\0';
 8009698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969a:	1c5a      	adds	r2, r3, #1
 800969c:	627a      	str	r2, [r7, #36]	; 0x24
 800969e:	461a      	mov	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	4413      	add	r3, r2
 80096a4:	2200      	movs	r2, #0
 80096a6:	701a      	strb	r2, [r3, #0]
  return output_index;
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3728      	adds	r7, #40	; 0x28
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080096b4 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>:
namespace tflite {

// TODO(petewarden): This allocator never frees up or reuses  any memory, even
// though we have enough information about lifetimes of the tensors to do so.
// This makes it pretty wasteful, so we should use a more intelligent method.
class SimpleMemoryAllocator {
 80096b4:	b480      	push	{r7}
 80096b6:	b083      	sub	sp, #12
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
 80096be:	4a11      	ldr	r2, [pc, #68]	; (8009704 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_+0x50>)
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	601a      	str	r2, [r3, #0]
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	685a      	ldr	r2, [r3, #4]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	605a      	str	r2, [r3, #4]
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	689a      	ldr	r2, [r3, #8]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	609a      	str	r2, [r3, #8]
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	68da      	ldr	r2, [r3, #12]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	60da      	str	r2, [r3, #12]
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	691a      	ldr	r2, [r3, #16]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	611a      	str	r2, [r3, #16]
 80096e4:	683b      	ldr	r3, [r7, #0]
 80096e6:	695a      	ldr	r2, [r3, #20]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	615a      	str	r2, [r3, #20]
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	699a      	ldr	r2, [r3, #24]
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	619a      	str	r2, [r3, #24]
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	4618      	mov	r0, r3
 80096f8:	370c      	adds	r7, #12
 80096fa:	46bd      	mov	sp, r7
 80096fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	0801282c 	.word	0x0801282c

08009708 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>:
#include "tensorflow/lite/kernels/internal/compatibility.h"
#include "tensorflow/lite/micro/memory_helpers.h"

namespace tflite {

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8009708:	b480      	push	{r7}
 800970a:	b085      	sub	sp, #20
 800970c:	af00      	add	r7, sp, #0
 800970e:	60f8      	str	r0, [r7, #12]
 8009710:	60b9      	str	r1, [r7, #8]
 8009712:	607a      	str	r2, [r7, #4]
 8009714:	603b      	str	r3, [r7, #0]
    : error_reporter_(error_reporter),
      buffer_head_(buffer_head),
      buffer_tail_(buffer_tail),
      head_(buffer_head),
      tail_(buffer_tail),
      temp_(buffer_head_) {}
 8009716:	4a0e      	ldr	r2, [pc, #56]	; (8009750 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_+0x48>)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	601a      	str	r2, [r3, #0]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	605a      	str	r2, [r3, #4]
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	609a      	str	r2, [r3, #8]
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	683a      	ldr	r2, [r7, #0]
 800972c:	60da      	str	r2, [r3, #12]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	687a      	ldr	r2, [r7, #4]
 8009732:	611a      	str	r2, [r3, #16]
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	683a      	ldr	r2, [r7, #0]
 8009738:	615a      	str	r2, [r3, #20]
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	689a      	ldr	r2, [r3, #8]
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	619a      	str	r2, [r3, #24]
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	4618      	mov	r0, r3
 8009746:	3714      	adds	r7, #20
 8009748:	46bd      	mov	sp, r7
 800974a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974e:	4770      	bx	lr
 8009750:	0801282c 	.word	0x0801282c

08009754 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>:

SimpleMemoryAllocator::SimpleMemoryAllocator(ErrorReporter* error_reporter,
 8009754:	b580      	push	{r7, lr}
 8009756:	b084      	sub	sp, #16
 8009758:	af00      	add	r7, sp, #0
 800975a:	60f8      	str	r0, [r7, #12]
 800975c:	60b9      	str	r1, [r7, #8]
 800975e:	607a      	str	r2, [r7, #4]
 8009760:	603b      	str	r3, [r7, #0]
                                             uint8_t* buffer,
                                             size_t buffer_size)
    : SimpleMemoryAllocator(error_reporter, buffer, buffer + buffer_size) {}
 8009762:	687a      	ldr	r2, [r7, #4]
 8009764:	683b      	ldr	r3, [r7, #0]
 8009766:	4413      	add	r3, r2
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	68b9      	ldr	r1, [r7, #8]
 800976c:	68f8      	ldr	r0, [r7, #12]
 800976e:	f7ff ffcb 	bl	8009708 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhS3_>
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	4618      	mov	r0, r3
 8009776:	3710      	adds	r7, #16
 8009778:	46bd      	mov	sp, r7
 800977a:	bd80      	pop	{r7, pc}

0800977c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj>:

/* static */
SimpleMemoryAllocator* SimpleMemoryAllocator::Create(
    ErrorReporter* error_reporter, uint8_t* buffer_head, size_t buffer_size) {
 800977c:	b590      	push	{r4, r7, lr}
 800977e:	b08d      	sub	sp, #52	; 0x34
 8009780:	af00      	add	r7, sp, #0
 8009782:	60f8      	str	r0, [r7, #12]
 8009784:	60b9      	str	r1, [r7, #8]
 8009786:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(error_reporter != nullptr);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x16>
 800978e:	f002 fee1 	bl	800c554 <abort>
  TFLITE_DCHECK(buffer_head != nullptr);
 8009792:	68bb      	ldr	r3, [r7, #8]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d101      	bne.n	800979c <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x20>
 8009798:	f002 fedc 	bl	800c554 <abort>
  SimpleMemoryAllocator tmp =
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 800979c:	f107 0010 	add.w	r0, r7, #16
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	68ba      	ldr	r2, [r7, #8]
 80097a4:	68f9      	ldr	r1, [r7, #12]
 80097a6:	f7ff ffd5 	bl	8009754 <_ZN6tflite21SimpleMemoryAllocatorC1EPNS_13ErrorReporterEPhj>

  // Allocate enough bytes from the buffer to create a SimpleMemoryAllocator.
  // The new instance will use the current adjusted tail buffer from the tmp
  // allocator instance.
  uint8_t* allocator_buffer = tmp.AllocateFromTail(
      sizeof(SimpleMemoryAllocator), alignof(SimpleMemoryAllocator));
 80097aa:	f107 0310 	add.w	r3, r7, #16
 80097ae:	2204      	movs	r2, #4
 80097b0:	211c      	movs	r1, #28
 80097b2:	4618      	mov	r0, r3
 80097b4:	f000 f87e 	bl	80098b4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>
 80097b8:	62f8      	str	r0, [r7, #44]	; 0x2c
  // Use the default copy constructor to populate internal states.
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 80097ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097bc:	4619      	mov	r1, r3
 80097be:	201c      	movs	r0, #28
 80097c0:	f7fa fe97 	bl	80044f2 <_ZnwjPv>
 80097c4:	4604      	mov	r4, r0
 80097c6:	2c00      	cmp	r4, #0
 80097c8:	d005      	beq.n	80097d6 <_ZN6tflite21SimpleMemoryAllocator6CreateEPNS_13ErrorReporterEPhj+0x5a>
 80097ca:	f107 0310 	add.w	r3, r7, #16
 80097ce:	4619      	mov	r1, r3
 80097d0:	4620      	mov	r0, r4
 80097d2:	f7ff ff6f 	bl	80096b4 <_ZN6tflite21SimpleMemoryAllocatorC1ERKS0_>
      SimpleMemoryAllocator(error_reporter, buffer_head, buffer_size);
 80097d6:	f107 0310 	add.w	r3, r7, #16
 80097da:	4618      	mov	r0, r3
 80097dc:	f000 f806 	bl	80097ec <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
  return new (allocator_buffer) SimpleMemoryAllocator(tmp);
 80097e0:	4623      	mov	r3, r4
}
 80097e2:	4618      	mov	r0, r3
 80097e4:	3734      	adds	r7, #52	; 0x34
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd90      	pop	{r4, r7, pc}
	...

080097ec <_ZN6tflite21SimpleMemoryAllocatorD1Ev>:

SimpleMemoryAllocator::~SimpleMemoryAllocator() {}
 80097ec:	b480      	push	{r7}
 80097ee:	b083      	sub	sp, #12
 80097f0:	af00      	add	r7, sp, #0
 80097f2:	6078      	str	r0, [r7, #4]
 80097f4:	4a04      	ldr	r2, [pc, #16]	; (8009808 <_ZN6tflite21SimpleMemoryAllocatorD1Ev+0x1c>)
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	601a      	str	r2, [r3, #0]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	4618      	mov	r0, r3
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr
 8009808:	0801282c 	.word	0x0801282c

0800980c <_ZN6tflite21SimpleMemoryAllocatorD0Ev>:
 800980c:	b580      	push	{r7, lr}
 800980e:	b082      	sub	sp, #8
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6878      	ldr	r0, [r7, #4]
 8009816:	f7ff ffe9 	bl	80097ec <_ZN6tflite21SimpleMemoryAllocatorD1Ev>
 800981a:	211c      	movs	r1, #28
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	f002 fdb5 	bl	800c38c <_ZdlPvj>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	4618      	mov	r0, r3
 8009826:	3708      	adds	r7, #8
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}

0800982c <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj>:

TfLiteStatus SimpleMemoryAllocator::SetHeadBufferSize(size_t size,
                                                      size_t alignment) {
 800982c:	b580      	push	{r7, lr}
 800982e:	b088      	sub	sp, #32
 8009830:	af02      	add	r7, sp, #8
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	607a      	str	r2, [r7, #4]
  if (head_ != temp_) {
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	691a      	ldr	r2, [r3, #16]
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	699b      	ldr	r3, [r3, #24]
 8009840:	429a      	cmp	r2, r3
 8009842:	d007      	beq.n	8009854 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x28>
    TF_LITE_REPORT_ERROR(
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	4918      	ldr	r1, [pc, #96]	; (80098ac <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x80>)
 800984a:	4618      	mov	r0, r3
 800984c:	f7fa fe1e 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Internal error: SetHeadBufferSize() needs to be called "
        "after ResetTempAllocations().");
    return kTfLiteError;
 8009850:	2301      	movs	r3, #1
 8009852:	e027      	b.n	80098a4 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x78>
  }

  uint8_t* const aligned_result = AlignPointerUp(buffer_head_, alignment);
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	689b      	ldr	r3, [r3, #8]
 8009858:	6879      	ldr	r1, [r7, #4]
 800985a:	4618      	mov	r0, r3
 800985c:	f7fc f9d7 	bl	8005c0e <_ZN6tflite14AlignPointerUpEPhj>
 8009860:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	695b      	ldr	r3, [r3, #20]
 8009866:	461a      	mov	r2, r3
 8009868:	697b      	ldr	r3, [r7, #20]
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 800986e:	693a      	ldr	r2, [r7, #16]
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	429a      	cmp	r2, r3
 8009874:	d20c      	bcs.n	8009890 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x64>
    TF_LITE_REPORT_ERROR(
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	6858      	ldr	r0, [r3, #4]
 800987a:	68ba      	ldr	r2, [r7, #8]
 800987c:	693b      	ldr	r3, [r7, #16]
 800987e:	1ad3      	subs	r3, r2, r3
 8009880:	9300      	str	r3, [sp, #0]
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	68ba      	ldr	r2, [r7, #8]
 8009886:	490a      	ldr	r1, [pc, #40]	; (80098b0 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x84>)
 8009888:	f7fa fe00 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
        error_reporter_,
        "Failed to set head size. Requested: %u, available %u, missing: %u",
        size, available_memory, size - available_memory);
    return kTfLiteError;
 800988c:	2301      	movs	r3, #1
 800988e:	e009      	b.n	80098a4 <_ZN6tflite21SimpleMemoryAllocator17SetHeadBufferSizeEjj+0x78>
  }
  head_ = aligned_result + size;
 8009890:	697a      	ldr	r2, [r7, #20]
 8009892:	68bb      	ldr	r3, [r7, #8]
 8009894:	441a      	add	r2, r3
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	611a      	str	r2, [r3, #16]
  temp_ = head_;
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	691a      	ldr	r2, [r3, #16]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	619a      	str	r2, [r3, #24]

  return kTfLiteOk;
 80098a2:	2300      	movs	r3, #0
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3718      	adds	r7, #24
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}
 80098ac:	08011698 	.word	0x08011698
 80098b0:	080116f0 	.word	0x080116f0

080098b4 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj>:

uint8_t* SimpleMemoryAllocator::AllocateFromTail(size_t size,
                                                 size_t alignment) {
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b088      	sub	sp, #32
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerDown(tail_ - size, alignment);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	695a      	ldr	r2, [r3, #20]
 80098c4:	68bb      	ldr	r3, [r7, #8]
 80098c6:	425b      	negs	r3, r3
 80098c8:	4413      	add	r3, r2
 80098ca:	6879      	ldr	r1, [r7, #4]
 80098cc:	4618      	mov	r0, r3
 80098ce:	f7fc f9b7 	bl	8005c40 <_ZN6tflite16AlignPointerDownEPhj>
 80098d2:	6178      	str	r0, [r7, #20]
  if (aligned_result < head_) {
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	691b      	ldr	r3, [r3, #16]
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d213      	bcs.n	8009906 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x52>
#ifndef TF_LITE_STRIP_ERROR_STRINGS
    const size_t missing_memory = head_ - aligned_result;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	691b      	ldr	r3, [r3, #16]
 80098e2:	461a      	mov	r2, r3
 80098e4:	697b      	ldr	r3, [r7, #20]
 80098e6:	1ad3      	subs	r3, r2, r3
 80098e8:	613b      	str	r3, [r7, #16]
    TF_LITE_REPORT_ERROR(error_reporter_,
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	6858      	ldr	r0, [r3, #4]
 80098ee:	68ba      	ldr	r2, [r7, #8]
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	1ad2      	subs	r2, r2, r3
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	9300      	str	r3, [sp, #0]
 80098f8:	4613      	mov	r3, r2
 80098fa:	68ba      	ldr	r2, [r7, #8]
 80098fc:	4906      	ldr	r1, [pc, #24]	; (8009918 <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x64>)
 80098fe:	f7fa fdc5 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate tail memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, size - missing_memory, missing_memory);
#endif
    return nullptr;
 8009902:	2300      	movs	r3, #0
 8009904:	e003      	b.n	800990e <_ZN6tflite21SimpleMemoryAllocator16AllocateFromTailEjj+0x5a>
  }
  tail_ = aligned_result;
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	615a      	str	r2, [r3, #20]
  return aligned_result;
 800990c:	697b      	ldr	r3, [r7, #20]
}
 800990e:	4618      	mov	r0, r3
 8009910:	3718      	adds	r7, #24
 8009912:	46bd      	mov	sp, r7
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	08011734 	.word	0x08011734

0800991c <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj>:

uint8_t* SimpleMemoryAllocator::AllocateTemp(size_t size, size_t alignment) {
 800991c:	b580      	push	{r7, lr}
 800991e:	b088      	sub	sp, #32
 8009920:	af02      	add	r7, sp, #8
 8009922:	60f8      	str	r0, [r7, #12]
 8009924:	60b9      	str	r1, [r7, #8]
 8009926:	607a      	str	r2, [r7, #4]
  uint8_t* const aligned_result = AlignPointerUp(temp_, alignment);
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	6879      	ldr	r1, [r7, #4]
 800992e:	4618      	mov	r0, r3
 8009930:	f7fc f96d 	bl	8005c0e <_ZN6tflite14AlignPointerUpEPhj>
 8009934:	6178      	str	r0, [r7, #20]
  const size_t available_memory = tail_ - aligned_result;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	695b      	ldr	r3, [r3, #20]
 800993a:	461a      	mov	r2, r3
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	1ad3      	subs	r3, r2, r3
 8009940:	613b      	str	r3, [r7, #16]
  if (available_memory < size) {
 8009942:	693a      	ldr	r2, [r7, #16]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	429a      	cmp	r2, r3
 8009948:	d20c      	bcs.n	8009964 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x48>
    TF_LITE_REPORT_ERROR(error_reporter_,
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	6858      	ldr	r0, [r3, #4]
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	693b      	ldr	r3, [r7, #16]
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	68ba      	ldr	r2, [r7, #8]
 800995a:	4907      	ldr	r1, [pc, #28]	; (8009978 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x5c>)
 800995c:	f7fa fd96 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "Failed to allocate temp memory. Requested: %u, "
                         "available %u, missing: %u",
                         size, available_memory, size - available_memory);
    return nullptr;
 8009960:	2300      	movs	r3, #0
 8009962:	e005      	b.n	8009970 <_ZN6tflite21SimpleMemoryAllocator12AllocateTempEjj+0x54>
  }
  temp_ = aligned_result + size;
 8009964:	697a      	ldr	r2, [r7, #20]
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	441a      	add	r2, r3
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	619a      	str	r2, [r3, #24]
  return aligned_result;
 800996e:	697b      	ldr	r3, [r7, #20]
}
 8009970:	4618      	mov	r0, r3
 8009972:	3718      	adds	r7, #24
 8009974:	46bd      	mov	sp, r7
 8009976:	bd80      	pop	{r7, pc}
 8009978:	08011780 	.word	0x08011780

0800997c <_ZN6tflite21SimpleMemoryAllocator20ResetTempAllocationsEv>:

void SimpleMemoryAllocator::ResetTempAllocations() { temp_ = head_; }
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691a      	ldr	r2, [r3, #16]
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	619a      	str	r2, [r3, #24]
 800998c:	bf00      	nop
 800998e:	370c      	adds	r7, #12
 8009990:	46bd      	mov	sp, r7
 8009992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009996:	4770      	bx	lr

08009998 <_ZNK6tflite21SimpleMemoryAllocator13GetHeadBufferEv>:

uint8_t* SimpleMemoryAllocator::GetHeadBuffer() const { return buffer_head_; }
 8009998:	b480      	push	{r7}
 800999a:	b083      	sub	sp, #12
 800999c:	af00      	add	r7, sp, #0
 800999e:	6078      	str	r0, [r7, #4]
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	689b      	ldr	r3, [r3, #8]
 80099a4:	4618      	mov	r0, r3
 80099a6:	370c      	adds	r7, #12
 80099a8:	46bd      	mov	sp, r7
 80099aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ae:	4770      	bx	lr

080099b0 <_ZNK6tflite21SimpleMemoryAllocator18GetAvailableMemoryEj>:

size_t SimpleMemoryAllocator::GetTailUsedBytes() const {
  return buffer_tail_ - tail_;
}

size_t SimpleMemoryAllocator::GetAvailableMemory(size_t alignment) const {
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b084      	sub	sp, #16
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint8_t* const aligned_temp = AlignPointerUp(temp_, alignment);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	6839      	ldr	r1, [r7, #0]
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7fc f924 	bl	8005c0e <_ZN6tflite14AlignPointerUpEPhj>
 80099c6:	60f8      	str	r0, [r7, #12]
  uint8_t* const aligned_tail = AlignPointerDown(tail_, alignment);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	695b      	ldr	r3, [r3, #20]
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	4618      	mov	r0, r3
 80099d0:	f7fc f936 	bl	8005c40 <_ZN6tflite16AlignPointerDownEPhj>
 80099d4:	60b8      	str	r0, [r7, #8]
  return aligned_tail - aligned_temp;
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	1ad3      	subs	r3, r2, r3
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3710      	adds	r7, #16
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bd80      	pop	{r7, pc}

080099e4 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 80099e4:	b480      	push	{r7}
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80099ec:	4618      	mov	r0, r3
 80099ee:	46bd      	mov	sp, r7
 80099f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f4:	4770      	bx	lr

080099f6 <_ZNSt14numeric_limitsIfE8infinityEv>:
	= bool(__FLT_HAS_DENORM__) ? denorm_present : denorm_absent;
      static _GLIBCXX_USE_CONSTEXPR bool has_denorm_loss
       = __glibcxx_float_has_denorm_loss;

      static _GLIBCXX_CONSTEXPR float
      infinity() _GLIBCXX_USE_NOEXCEPT { return __builtin_huge_valf(); }
 80099f6:	b480      	push	{r7}
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 80099fe:	ee07 3a90 	vmov	s15, r3
 8009a02:	eeb0 0a67 	vmov.f32	s0, s15
 8009a06:	46bd      	mov	sp, r7
 8009a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a0c:	4770      	bx	lr
	...

08009a10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 8009a10:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009a14:	b08c      	sub	sp, #48	; 0x30
 8009a16:	af00      	add	r7, sp, #0
 8009a18:	6078      	str	r0, [r7, #4]
 8009a1a:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d107      	bne.n	8009a34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8009a24:	f7ff ffde 	bl	80099e4 <_ZNSt14numeric_limitsIlE3minEv>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d101      	bne.n	8009a34 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 8009a30:	2301      	movs	r3, #1
 8009a32:	e000      	b.n	8009a36 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x26>
 8009a34:	2300      	movs	r3, #0
 8009a36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8009a40:	e9c7 3408 	strd	r3, r4, [r7, #32]
  std::int64_t b_64(b);
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	ea4f 74e3 	mov.w	r4, r3, asr #31
 8009a4a:	e9c7 3406 	strd	r3, r4, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	69ba      	ldr	r2, [r7, #24]
 8009a52:	fb02 f203 	mul.w	r2, r2, r3
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	6a39      	ldr	r1, [r7, #32]
 8009a5a:	fb01 f303 	mul.w	r3, r1, r3
 8009a5e:	441a      	add	r2, r3
 8009a60:	6a39      	ldr	r1, [r7, #32]
 8009a62:	69bb      	ldr	r3, [r7, #24]
 8009a64:	fba1 3403 	umull	r3, r4, r1, r3
 8009a68:	4422      	add	r2, r4
 8009a6a:	4614      	mov	r4, r2
 8009a6c:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8009a70:	e9c7 3404 	strd	r3, r4, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 8009a74:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f174 0300 	sbcs.w	r3, r4, #0
 8009a7e:	db02      	blt.n	8009a86 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x76>
 8009a80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009a84:	e000      	b.n	8009a88 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 8009a86:	4b19      	ldr	r3, [pc, #100]	; (8009aec <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 8009a88:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	4619      	mov	r1, r3
 8009a8e:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8009a92:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009a96:	eb13 0b01 	adds.w	fp, r3, r1
 8009a9a:	eb44 0c02 	adc.w	ip, r4, r2
 8009a9e:	465b      	mov	r3, fp
 8009aa0:	4664      	mov	r4, ip
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f174 0200 	sbcs.w	r2, r4, #0
 8009aa8:	da06      	bge.n	8009ab8 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 8009aaa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009aae:	f04f 0200 	mov.w	r2, #0
 8009ab2:	185b      	adds	r3, r3, r1
 8009ab4:	eb44 0402 	adc.w	r4, r4, r2
 8009ab8:	f04f 0100 	mov.w	r1, #0
 8009abc:	f04f 0200 	mov.w	r2, #0
 8009ac0:	0fd9      	lsrs	r1, r3, #31
 8009ac2:	ea41 0144 	orr.w	r1, r1, r4, lsl #1
 8009ac6:	17e2      	asrs	r2, r4, #31
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4614      	mov	r4, r2
  std::int32_t ab_x2_high32 =
 8009acc:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 8009ace:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d003      	beq.n	8009ade <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xce>
 8009ad6:	f7fb fbea 	bl	80052ae <_ZNSt14numeric_limitsIlE3maxEv>
 8009ada:	4603      	mov	r3, r0
 8009adc:	e000      	b.n	8009ae0 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 8009ade:	68bb      	ldr	r3, [r7, #8]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3730      	adds	r7, #48	; 0x30
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009aea:	bf00      	nop
 8009aec:	c0000001 	.word	0xc0000001

08009af0 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32_t Dims(int i) const {
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	da01      	bge.n	8009b04 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 8009b00:	f002 fd28 	bl	800c554 <abort>
    TFLITE_DCHECK_LT(i, size_);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	429a      	cmp	r2, r3
 8009b0c:	dc01      	bgt.n	8009b12 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 8009b0e:	f002 fd21 	bl	800c554 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	2b05      	cmp	r3, #5
 8009b18:	dd06      	ble.n	8009b28 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	685a      	ldr	r2, [r3, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	009b      	lsls	r3, r3, #2
 8009b22:	4413      	add	r3, r2
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	e004      	b.n	8009b32 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	687a      	ldr	r2, [r7, #4]
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	4413      	add	r3, r2
 8009b30:	685b      	ldr	r3, [r3, #4]
  }
 8009b32:	4618      	mov	r0, r3
 8009b34:	3708      	adds	r7, #8
 8009b36:	46bd      	mov	sp, r7
 8009b38:	bd80      	pop	{r7, pc}

08009b3a <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32_t* DimsData() const {
 8009b3a:	b480      	push	{r7}
 8009b3c:	b083      	sub	sp, #12
 8009b3e:	af00      	add	r7, sp, #0
 8009b40:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b05      	cmp	r3, #5
 8009b48:	dd02      	ble.n	8009b50 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	e001      	b.n	8009b54 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	3304      	adds	r3, #4
  }
 8009b54:	4618      	mov	r0, r3
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr

08009b60 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 8009b60:	b580      	push	{r7, lr}
 8009b62:	b086      	sub	sp, #24
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 8009b68:	2301      	movs	r3, #1
 8009b6a:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f7ff ffe4 	bl	8009b3a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 8009b72:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 8009b74:	2300      	movs	r3, #0
 8009b76:	613b      	str	r3, [r7, #16]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	693a      	ldr	r2, [r7, #16]
 8009b7e:	429a      	cmp	r2, r3
 8009b80:	da0c      	bge.n	8009b9c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	009b      	lsls	r3, r3, #2
 8009b86:	68fa      	ldr	r2, [r7, #12]
 8009b88:	4413      	add	r3, r2
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	fb02 f303 	mul.w	r3, r2, r3
 8009b92:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 8009b94:	693b      	ldr	r3, [r7, #16]
 8009b96:	3301      	adds	r3, #1
 8009b98:	613b      	str	r3, [r7, #16]
 8009b9a:	e7ed      	b.n	8009b78 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 8009b9c:	697b      	ldr	r3, [r7, #20]
  }
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>:
}

// Flat size calculation, checking that dimensions match with one or more other
// arrays.
inline int MatchingFlatSize(const RuntimeShape& shape,
                            const RuntimeShape& check_shape_0) {
 8009ba6:	b590      	push	{r4, r7, lr}
 8009ba8:	b085      	sub	sp, #20
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	6078      	str	r0, [r7, #4]
 8009bae:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), check_shape_0.DimensionsCount());
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f7fb ffa8 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009bb6:	4604      	mov	r4, r0
 8009bb8:	6838      	ldr	r0, [r7, #0]
 8009bba:	f7fb ffa4 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009bbe:	4603      	mov	r3, r0
 8009bc0:	429c      	cmp	r4, r3
 8009bc2:	d001      	beq.n	8009bc8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x22>
 8009bc4:	f002 fcc6 	bl	800c554 <abort>
  const int dims_count = shape.DimensionsCount();
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f7fb ff9c 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8009bce:	60b8      	str	r0, [r7, #8]
  for (int i = 0; i < dims_count; ++i) {
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	60fb      	str	r3, [r7, #12]
 8009bd4:	68fa      	ldr	r2, [r7, #12]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	429a      	cmp	r2, r3
 8009bda:	da11      	bge.n	8009c00 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x5a>
    TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8009bdc:	68f9      	ldr	r1, [r7, #12]
 8009bde:	6878      	ldr	r0, [r7, #4]
 8009be0:	f7ff ff86 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009be4:	4604      	mov	r4, r0
 8009be6:	68f9      	ldr	r1, [r7, #12]
 8009be8:	6838      	ldr	r0, [r7, #0]
 8009bea:	f7ff ff81 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	429c      	cmp	r4, r3
 8009bf2:	d001      	beq.n	8009bf8 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x52>
 8009bf4:	f002 fcae 	bl	800c554 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	3301      	adds	r3, #1
 8009bfc:	60fb      	str	r3, [r7, #12]
 8009bfe:	e7e9      	b.n	8009bd4 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_+0x2e>
  }
  return shape.FlatSize();
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f7ff ffad 	bl	8009b60 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8009c06:	4603      	mov	r3, r0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	bd90      	pop	{r4, r7, pc}

08009c10 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           quantized_multiplier);
}

inline int32_t MultiplyByQuantizedMultiplier(int32_t x,
                                             int32_t quantized_multiplier,
                                             int shift) {
 8009c10:	b580      	push	{r7, lr}
 8009c12:	b086      	sub	sp, #24
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	60f8      	str	r0, [r7, #12]
 8009c18:	60b9      	str	r1, [r7, #8]
 8009c1a:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  int left_shift = shift > 0 ? shift : 0;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009c22:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	dc02      	bgt.n	8009c30 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	425b      	negs	r3, r3
 8009c2e:	e000      	b.n	8009c32 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 8009c30:	2300      	movs	r3, #0
 8009c32:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	697b      	ldr	r3, [r7, #20]
 8009c38:	fa02 f303 	lsl.w	r3, r2, r3
 8009c3c:	68b9      	ldr	r1, [r7, #8]
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f7ff fee6 	bl	8009a10 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8009c44:	4603      	mov	r3, r0
                                 x * (1 << left_shift), quantized_multiplier),
                             right_shift);
 8009c46:	6939      	ldr	r1, [r7, #16]
 8009c48:	4618      	mov	r0, r3
 8009c4a:	f000 fb4f 	bl	800a2ec <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8009c4e:	4603      	mov	r3, r0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3718      	adds	r7, #24
 8009c54:	46bd      	mov	sp, r7
 8009c56:	bd80      	pop	{r7, pc}

08009c58 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns a mutable tensor for a given input index. is_variable must be checked
// during prepare when the full TfLiteTensor is available.
inline TfLiteEvalTensor* GetMutableEvalInput(const TfLiteContext* context,
                                             const TfLiteNode* node,
                                             int index) {
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b084      	sub	sp, #16
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	60f8      	str	r0, [r7, #12]
 8009c60:	60b9      	str	r1, [r7, #8]
 8009c62:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d101      	bne.n	8009c6e <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8009c6a:	f002 fc73 	bl	800c554 <abort>
  TFLITE_DCHECK(node != nullptr);
 8009c6e:	68bb      	ldr	r3, [r7, #8]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d101      	bne.n	8009c78 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8009c74:	f002 fc6e 	bl	800c554 <abort>
  return context->GetEvalTensor(context, node->inputs->data[index]);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	6819      	ldr	r1, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	440b      	add	r3, r1
 8009c86:	685b      	ldr	r3, [r3, #4]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	68f8      	ldr	r0, [r7, #12]
 8009c8c:	4790      	blx	r2
 8009c8e:	4603      	mov	r3, r0
}
 8009c90:	4618      	mov	r0, r3
 8009c92:	3710      	adds	r7, #16
 8009c94:	46bd      	mov	sp, r7
 8009c96:	bd80      	pop	{r7, pc}

08009c98 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given input index in a node.
inline const TfLiteEvalTensor* GetEvalInput(const TfLiteContext* context,
                                            const TfLiteNode* node, int index) {
 8009c98:	b580      	push	{r7, lr}
 8009c9a:	b084      	sub	sp, #16
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	60f8      	str	r0, [r7, #12]
 8009ca0:	60b9      	str	r1, [r7, #8]
 8009ca2:	607a      	str	r2, [r7, #4]
  return GetMutableEvalInput(context, node, index);
 8009ca4:	687a      	ldr	r2, [r7, #4]
 8009ca6:	68b9      	ldr	r1, [r7, #8]
 8009ca8:	68f8      	ldr	r0, [r7, #12]
 8009caa:	f7ff ffd5 	bl	8009c58 <_ZN6tflite5micro19GetMutableEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8009cae:	4603      	mov	r3, r0
}
 8009cb0:	4618      	mov	r0, r3
 8009cb2:	3710      	adds	r7, #16
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}

08009cb8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>:

// Returns the TfLiteEvalTensor struct for a given output index in a node.
inline TfLiteEvalTensor* GetEvalOutput(const TfLiteContext* context,
                                       const TfLiteNode* node, int index) {
 8009cb8:	b580      	push	{r7, lr}
 8009cba:	b084      	sub	sp, #16
 8009cbc:	af00      	add	r7, sp, #0
 8009cbe:	60f8      	str	r0, [r7, #12]
 8009cc0:	60b9      	str	r1, [r7, #8]
 8009cc2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context != nullptr);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d101      	bne.n	8009cce <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x16>
 8009cca:	f002 fc43 	bl	800c554 <abort>
  TFLITE_DCHECK(node != nullptr);
 8009cce:	68bb      	ldr	r3, [r7, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d101      	bne.n	8009cd8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei+0x20>
 8009cd4:	f002 fc3e 	bl	800c554 <abort>
  return context->GetEvalTensor(context, node->outputs->data[index]);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	6859      	ldr	r1, [r3, #4]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	009b      	lsls	r3, r3, #2
 8009ce4:	440b      	add	r3, r1
 8009ce6:	685b      	ldr	r3, [r3, #4]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	68f8      	ldr	r0, [r7, #12]
 8009cec:	4790      	blx	r2
 8009cee:	4603      	mov	r3, r0
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>:
  data->params.input_offset = input->params.zero_point;
  data->params.output_offset = output->params.zero_point;
}

inline void ReluFloat(const RuntimeShape& input_shape, const float* input_data,
                      const RuntimeShape& output_shape, float* output_data) {
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08a      	sub	sp, #40	; 0x28
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	607a      	str	r2, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8009d06:	6879      	ldr	r1, [r7, #4]
 8009d08:	68f8      	ldr	r0, [r7, #12]
 8009d0a:	f7ff ff4c 	bl	8009ba6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8009d0e:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8009d10:	2300      	movs	r3, #0
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24
 8009d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d16:	6a3b      	ldr	r3, [r7, #32]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	da1d      	bge.n	8009d58 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x60>
    const float val = input_data[i];
 8009d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1e:	009b      	lsls	r3, r3, #2
 8009d20:	68ba      	ldr	r2, [r7, #8]
 8009d22:	4413      	add	r3, r2
 8009d24:	681b      	ldr	r3, [r3, #0]
 8009d26:	61fb      	str	r3, [r7, #28]
    const float lower = 0.0f;
 8009d28:	f04f 0300 	mov.w	r3, #0
 8009d2c:	61bb      	str	r3, [r7, #24]
    const float clamped = val < lower ? lower : val;
 8009d2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009d32:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3a:	d501      	bpl.n	8009d40 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x48>
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	e000      	b.n	8009d42 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x4a>
 8009d40:	69fb      	ldr	r3, [r7, #28]
 8009d42:	617b      	str	r3, [r7, #20]
    output_data[i] = clamped;
 8009d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	697a      	ldr	r2, [r7, #20]
 8009d4e:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	3301      	adds	r3, #1
 8009d54:	627b      	str	r3, [r7, #36]	; 0x24
 8009d56:	e7dd      	b.n	8009d14 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8009d58:	bf00      	nop
 8009d5a:	3728      	adds	r7, #40	; 0x28
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>:

inline void Relu6Float(const RuntimeShape& input_shape, const float* input_data,
                       const RuntimeShape& output_shape, float* output_data) {
 8009d60:	b580      	push	{r7, lr}
 8009d62:	b08a      	sub	sp, #40	; 0x28
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	60f8      	str	r0, [r7, #12]
 8009d68:	60b9      	str	r1, [r7, #8]
 8009d6a:	607a      	str	r2, [r7, #4]
 8009d6c:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 8009d6e:	6879      	ldr	r1, [r7, #4]
 8009d70:	68f8      	ldr	r0, [r7, #12]
 8009d72:	f7ff ff18 	bl	8009ba6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 8009d76:	6238      	str	r0, [r7, #32]
  for (int i = 0; i < flat_size; ++i) {
 8009d78:	2300      	movs	r3, #0
 8009d7a:	627b      	str	r3, [r7, #36]	; 0x24
 8009d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7e:	6a3b      	ldr	r3, [r7, #32]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	da2a      	bge.n	8009dda <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x7a>
    const float val = input_data[i];
 8009d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	61fb      	str	r3, [r7, #28]
    const float upper = 6.0f;
 8009d90:	4b14      	ldr	r3, [pc, #80]	; (8009de4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x84>)
 8009d92:	61bb      	str	r3, [r7, #24]
    const float lower = 0.0f;
 8009d94:	f04f 0300 	mov.w	r3, #0
 8009d98:	617b      	str	r3, [r7, #20]
    const float clamped = val > upper ? upper : val < lower ? lower : val;
 8009d9a:	edd7 7a07 	vldr	s15, [r7, #28]
 8009d9e:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8009da2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009da6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009daa:	dd01      	ble.n	8009db0 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x50>
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	e009      	b.n	8009dc4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8009db0:	edd7 7a07 	vldr	s15, [r7, #28]
 8009db4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dbc:	d501      	bpl.n	8009dc2 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x62>
 8009dbe:	697b      	ldr	r3, [r7, #20]
 8009dc0:	e000      	b.n	8009dc4 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x64>
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	613b      	str	r3, [r7, #16]
    output_data[i] = clamped;
 8009dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc8:	009b      	lsls	r3, r3, #2
 8009dca:	683a      	ldr	r2, [r7, #0]
 8009dcc:	4413      	add	r3, r2
 8009dce:	693a      	ldr	r2, [r7, #16]
 8009dd0:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	3301      	adds	r3, #1
 8009dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8009dd8:	e7d0      	b.n	8009d7c <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf+0x1c>
  }
}
 8009dda:	bf00      	nop
 8009ddc:	3728      	adds	r7, #40	; 0x28
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	40c00000 	.word	0x40c00000

08009de8 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj>:
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
    output_data[i] = clamped;
  }
}

void* ReluInit(TfLiteContext* context, const char* buffer, size_t length) {
 8009de8:	b580      	push	{r7, lr}
 8009dea:	b084      	sub	sp, #16
 8009dec:	af00      	add	r7, sp, #0
 8009dee:	60f8      	str	r0, [r7, #12]
 8009df0:	60b9      	str	r1, [r7, #8]
 8009df2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009df8:	2b00      	cmp	r3, #0
 8009dfa:	d101      	bne.n	8009e00 <_ZN6tflite3ops5micro11activations8ReluInitEP13TfLiteContextPKcj+0x18>
 8009dfc:	f002 fbaa 	bl	800c554 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(ReluOpData));
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e04:	211c      	movs	r1, #28
 8009e06:	68f8      	ldr	r0, [r7, #12]
 8009e08:	4798      	blx	r3
 8009e0a:	4603      	mov	r3, r0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluPrepare(TfLiteContext* context, TfLiteNode* node) {
 8009e14:	b590      	push	{r4, r7, lr}
 8009e16:	b089      	sub	sp, #36	; 0x24
 8009e18:	af02      	add	r7, sp, #8
 8009e1a:	6078      	str	r0, [r7, #4]
 8009e1c:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	691b      	ldr	r3, [r3, #16]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d101      	bne.n	8009e2a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8009e26:	f002 fb95 	bl	800c554 <abort>
  ReluOpData* data = static_cast<ReluOpData*>(node->user_data);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	691b      	ldr	r3, [r3, #16]
 8009e2e:	617b      	str	r3, [r7, #20]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	6839      	ldr	r1, [r7, #0]
 8009e36:	4618      	mov	r0, r3
 8009e38:	f7fb fbc6 	bl	80055c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8009e3c:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, input != nullptr);
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d10a      	bne.n	8009e5a <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x46>
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	695c      	ldr	r4, [r3, #20]
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	4b1a      	ldr	r3, [pc, #104]	; (8009eb4 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa0>)
 8009e4c:	9300      	str	r3, [sp, #0]
 8009e4e:	238e      	movs	r3, #142	; 0x8e
 8009e50:	4a19      	ldr	r2, [pc, #100]	; (8009eb8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8009e52:	491a      	ldr	r1, [pc, #104]	; (8009ebc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 8009e54:	47a0      	blx	r4
 8009e56:	2301      	movs	r3, #1
 8009e58:	e028      	b.n	8009eac <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x98>
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	6839      	ldr	r1, [r7, #0]
 8009e60:	4618      	mov	r0, r3
 8009e62:	f7fb fbc1 	bl	80055e8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8009e66:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, output != nullptr);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10a      	bne.n	8009e84 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x70>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	695c      	ldr	r4, [r3, #20]
 8009e72:	6878      	ldr	r0, [r7, #4]
 8009e74:	4b12      	ldr	r3, [pc, #72]	; (8009ec0 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xac>)
 8009e76:	9300      	str	r3, [sp, #0]
 8009e78:	2390      	movs	r3, #144	; 0x90
 8009e7a:	4a0f      	ldr	r2, [pc, #60]	; (8009eb8 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa4>)
 8009e7c:	490f      	ldr	r1, [pc, #60]	; (8009ebc <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0xa8>)
 8009e7e:	47a0      	blx	r4
 8009e80:	2301      	movs	r3, #1
 8009e82:	e013      	b.n	8009eac <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x98>

  if (input->type == kTfLiteInt8) {
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	2b09      	cmp	r3, #9
 8009e8a:	d105      	bne.n	8009e98 <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x84>
    CalculateReluOpData<int8_t>(input, output, data);
 8009e8c:	697a      	ldr	r2, [r7, #20]
 8009e8e:	68f9      	ldr	r1, [r7, #12]
 8009e90:	6938      	ldr	r0, [r7, #16]
 8009e92:	f000 fa9d 	bl	800a3d0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
 8009e96:	e008      	b.n	8009eaa <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x96>
  } else if (input->type == kTfLiteUInt8) {
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	781b      	ldrb	r3, [r3, #0]
 8009e9c:	2b03      	cmp	r3, #3
 8009e9e:	d104      	bne.n	8009eaa <_ZN6tflite3ops5micro11activations11ReluPrepareEP13TfLiteContextP10TfLiteNode+0x96>
    CalculateReluOpData<uint8_t>(input, output, data);
 8009ea0:	697a      	ldr	r2, [r7, #20]
 8009ea2:	68f9      	ldr	r1, [r7, #12]
 8009ea4:	6938      	ldr	r0, [r7, #16]
 8009ea6:	f000 fb35 	bl	800a514 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>
  }

  return kTfLiteOk;
 8009eaa:	2300      	movs	r3, #0
}
 8009eac:	4618      	mov	r0, r3
 8009eae:	371c      	adds	r7, #28
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	bd90      	pop	{r4, r7, pc}
 8009eb4:	08011824 	.word	0x08011824
 8009eb8:	080117cc 	.word	0x080117cc
 8009ebc:	0801180c 	.word	0x0801180c
 8009ec0:	08011838 	.word	0x08011838

08009ec4 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus ReluEval(TfLiteContext* context, TfLiteNode* node) {
 8009ec4:	b5b0      	push	{r4, r5, r7, lr}
 8009ec6:	b0ac      	sub	sp, #176	; 0xb0
 8009ec8:	af02      	add	r7, sp, #8
 8009eca:	6078      	str	r0, [r7, #4]
 8009ecc:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8009ece:	683b      	ldr	r3, [r7, #0]
 8009ed0:	691b      	ldr	r3, [r3, #16]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d101      	bne.n	8009eda <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x16>
 8009ed6:	f002 fb3d 	bl	800c554 <abort>
  const ReluOpData& data = *(static_cast<const ReluOpData*>(node->user_data));
 8009eda:	683b      	ldr	r3, [r7, #0]
 8009edc:	691b      	ldr	r3, [r3, #16]
 8009ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	2200      	movs	r2, #0
 8009ee6:	6839      	ldr	r1, [r7, #0]
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7ff fed5 	bl	8009c98 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 8009eee:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	6839      	ldr	r1, [r7, #0]
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f7ff fedd 	bl	8009cb8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 8009efe:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 8009f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f06:	7a1b      	ldrb	r3, [r3, #8]
 8009f08:	2b03      	cmp	r3, #3
 8009f0a:	d05d      	beq.n	8009fc8 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x104>
 8009f0c:	2b09      	cmp	r3, #9
 8009f0e:	d02d      	beq.n	8009f6c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0xa8>
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	f040 8087 	bne.w	800a024 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x160>
    case kTfLiteFloat32: {
      ReluFloat(tflite::micro::GetTensorShape(input),
 8009f16:	f107 030c 	add.w	r3, r7, #12
 8009f1a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009f1e:	4618      	mov	r0, r3
 8009f20:	f001 fddd 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 8009f24:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009f28:	f000 fb96 	bl	800a658 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 8009f2c:	4604      	mov	r4, r0
                tflite::micro::GetTensorData<float>(input),
                tflite::micro::GetTensorShape(output),
 8009f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f32:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8009f36:	4618      	mov	r0, r3
 8009f38:	f001 fdd1 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8009f3c:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8009f40:	f000 fb99 	bl	800a676 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 8009f44:	4603      	mov	r3, r0
 8009f46:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8009f4a:	f107 000c 	add.w	r0, r7, #12
 8009f4e:	4621      	mov	r1, r4
 8009f50:	f7ff fed2 	bl	8009cf8 <_ZN6tflite3ops5micro11activations9ReluFloatERKNS_12RuntimeShapeEPKfS5_Pf>
                tflite::micro::GetTensorShape(output),
 8009f54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f7fb fdbe 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      ReluFloat(tflite::micro::GetTensorShape(input),
 8009f5e:	f107 030c 	add.w	r3, r7, #12
 8009f62:	4618      	mov	r0, r3
 8009f64:	f7fb fdb9 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
                tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 8009f68:	2300      	movs	r3, #0
 8009f6a:	e06a      	b.n	800a042 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteInt8: {
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8009f6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009f70:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009f74:	4618      	mov	r0, r3
 8009f76:	f001 fdb2 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                            tflite::micro::GetTensorShape(output),
 8009f7a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009f7e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8009f82:	4618      	mov	r0, r3
 8009f84:	f001 fdab 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8009f88:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009f8c:	f000 fb84 	bl	800a698 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 8009f90:	4604      	mov	r4, r0
 8009f92:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8009f96:	f000 fb8e 	bl	800a6b6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 8009f9a:	4603      	mov	r3, r0
 8009f9c:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8009fa0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8009fa4:	9300      	str	r3, [sp, #0]
 8009fa6:	4623      	mov	r3, r4
 8009fa8:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8009fac:	f000 fb94 	bl	800a6d8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                            tflite::micro::GetTensorShape(output),
 8009fb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8009fb4:	4618      	mov	r0, r3
 8009fb6:	f7fb fd90 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<int8_t>(data, tflite::micro::GetTensorShape(input),
 8009fba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009fbe:	4618      	mov	r0, r3
 8009fc0:	f7fb fd8b 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
                            tflite::micro::GetTensorData<int8_t>(input),
                            tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	e03c      	b.n	800a042 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    case kTfLiteUInt8: {
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8009fc8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8009fcc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	f001 fd84 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
                             tflite::micro::GetTensorShape(output),
 8009fd6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8009fda:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8009fde:	4618      	mov	r0, r3
 8009fe0:	f001 fd7d 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 8009fe4:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8009fe8:	f000 fbc2 	bl	800a770 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 8009fec:	4604      	mov	r4, r0
 8009fee:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8009ff2:	f000 fbcc 	bl	800a78e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	f107 0284 	add.w	r2, r7, #132	; 0x84
 8009ffc:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 800a000:	9300      	str	r3, [sp, #0]
 800a002:	4623      	mov	r3, r4
 800a004:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 800a008:	f000 fbd2 	bl	800a7b0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>
                             tflite::micro::GetTensorShape(output),
 800a00c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a010:	4618      	mov	r0, r3
 800a012:	f7fb fd62 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      ReluQuantized<uint8_t>(data, tflite::micro::GetTensorShape(input),
 800a016:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a01a:	4618      	mov	r0, r3
 800a01c:	f7fb fd5d 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<uint8_t>(input),
                             tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 800a020:	2300      	movs	r3, #0
 800a022:	e00e      	b.n	800a042 <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x17e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	695c      	ldr	r4, [r3, #20]
 800a028:	687d      	ldr	r5, [r7, #4]
 800a02a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a02e:	7a1b      	ldrb	r3, [r3, #8]
 800a030:	4618      	mov	r0, r3
 800a032:	f7fa f9c1 	bl	80043b8 <TfLiteTypeGetName>
 800a036:	4603      	mov	r3, r0
 800a038:	461a      	mov	r2, r3
 800a03a:	4904      	ldr	r1, [pc, #16]	; (800a04c <_ZN6tflite3ops5micro11activations8ReluEvalEP13TfLiteContextP10TfLiteNode+0x188>)
 800a03c:	4628      	mov	r0, r5
 800a03e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 800a040:	2301      	movs	r3, #1
    }
  }
}
 800a042:	4618      	mov	r0, r3
 800a044:	37a8      	adds	r7, #168	; 0xa8
 800a046:	46bd      	mov	sp, r7
 800a048:	bdb0      	pop	{r4, r5, r7, pc}
 800a04a:	bf00      	nop
 800a04c:	0801184c 	.word	0x0801184c

0800a050 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj>:

void* Relu6Init(TfLiteContext* context, const char* buffer, size_t length) {
 800a050:	b580      	push	{r7, lr}
 800a052:	b084      	sub	sp, #16
 800a054:	af00      	add	r7, sp, #0
 800a056:	60f8      	str	r0, [r7, #12]
 800a058:	60b9      	str	r1, [r7, #8]
 800a05a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a060:	2b00      	cmp	r3, #0
 800a062:	d101      	bne.n	800a068 <_ZN6tflite3ops5micro11activations9Relu6InitEP13TfLiteContextPKcj+0x18>
 800a064:	f002 fa76 	bl	800c554 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(Relu6OpData));
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a06c:	2104      	movs	r1, #4
 800a06e:	68f8      	ldr	r0, [r7, #12]
 800a070:	4798      	blx	r3
 800a072:	4603      	mov	r3, r0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3710      	adds	r7, #16
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Prepare(TfLiteContext* context, TfLiteNode* node) {
 800a07c:	b590      	push	{r4, r7, lr}
 800a07e:	b087      	sub	sp, #28
 800a080:	af02      	add	r7, sp, #8
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	691b      	ldr	r3, [r3, #16]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d101      	bne.n	800a092 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800a08e:	f002 fa61 	bl	800c554 <abort>
  Relu6OpData* data = static_cast<Relu6OpData*>(node->user_data);
 800a092:	683b      	ldr	r3, [r7, #0]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	60fb      	str	r3, [r7, #12]

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	6839      	ldr	r1, [r7, #0]
 800a09e:	4618      	mov	r0, r3
 800a0a0:	f7fb fa92 	bl	80055c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800a0a4:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, input != nullptr);
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10a      	bne.n	800a0c2 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x46>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	695c      	ldr	r4, [r3, #20]
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	4b20      	ldr	r3, [pc, #128]	; (800a134 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xb8>)
 800a0b4:	9300      	str	r3, [sp, #0]
 800a0b6:	23cd      	movs	r3, #205	; 0xcd
 800a0b8:	4a1f      	ldr	r2, [pc, #124]	; (800a138 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xbc>)
 800a0ba:	4920      	ldr	r1, [pc, #128]	; (800a13c <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xc0>)
 800a0bc:	47a0      	blx	r4
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e033      	b.n	800a12a <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xae>

  if (input->type == kTfLiteInt8) {
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	2b09      	cmp	r3, #9
 800a0c8:	d115      	bne.n	800a0f6 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0x7a>
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 800a0ca:	68bb      	ldr	r3, [r7, #8]
 800a0cc:	edd3 7a03 	vldr	s15, [r3, #12]
                                                  input->params.zero_point);
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	691b      	ldr	r3, [r3, #16]
    data->six_int8 = FloatToQuantizedType<int8_t>(6.0f, input->params.scale,
 800a0d4:	4618      	mov	r0, r3
 800a0d6:	eef0 0a67 	vmov.f32	s1, s15
 800a0da:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800a0de:	f000 fbb2 	bl	800a846 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>
 800a0e2:	4603      	mov	r3, r0
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	701a      	strb	r2, [r3, #0]
    data->zero_int8 = input->params.zero_point;
 800a0ea:	68bb      	ldr	r3, [r7, #8]
 800a0ec:	691b      	ldr	r3, [r3, #16]
 800a0ee:	b25a      	sxtb	r2, r3
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	705a      	strb	r2, [r3, #1]
 800a0f4:	e018      	b.n	800a128 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>
  } else if (input->type == kTfLiteUInt8) {
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	2b03      	cmp	r3, #3
 800a0fc:	d114      	bne.n	800a128 <_ZN6tflite3ops5micro11activations12Relu6PrepareEP13TfLiteContextP10TfLiteNode+0xac>
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	edd3 7a03 	vldr	s15, [r3, #12]
                                                    input->params.zero_point);
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	691b      	ldr	r3, [r3, #16]
    data->six_uint8 = FloatToQuantizedType<uint8_t>(6.0f, input->params.scale,
 800a108:	4618      	mov	r0, r3
 800a10a:	eef0 0a67 	vmov.f32	s1, s15
 800a10e:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800a112:	f000 fbe9 	bl	800a8e8 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>
 800a116:	4603      	mov	r3, r0
 800a118:	461a      	mov	r2, r3
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	709a      	strb	r2, [r3, #2]
    data->zero_uint8 = input->params.zero_point;
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	691b      	ldr	r3, [r3, #16]
 800a122:	b2da      	uxtb	r2, r3
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	70da      	strb	r2, [r3, #3]
  }

  return kTfLiteOk;
 800a128:	2300      	movs	r3, #0
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd90      	pop	{r4, r7, pc}
 800a132:	bf00      	nop
 800a134:	08011824 	.word	0x08011824
 800a138:	080117cc 	.word	0x080117cc
 800a13c:	0801180c 	.word	0x0801180c

0800a140 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Relu6Eval(TfLiteContext* context, TfLiteNode* node) {
 800a140:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a142:	b0ad      	sub	sp, #180	; 0xb4
 800a144:	af02      	add	r7, sp, #8
 800a146:	6078      	str	r0, [r7, #4]
 800a148:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	691b      	ldr	r3, [r3, #16]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x16>
 800a152:	f002 f9ff 	bl	800c554 <abort>
  const Relu6OpData& data = *(static_cast<const Relu6OpData*>(node->user_data));
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	2200      	movs	r2, #0
 800a162:	6839      	ldr	r1, [r7, #0]
 800a164:	4618      	mov	r0, r3
 800a166:	f7ff fd97 	bl	8009c98 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800a16a:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2200      	movs	r2, #0
 800a172:	6839      	ldr	r1, [r7, #0]
 800a174:	4618      	mov	r0, r3
 800a176:	f7ff fd9f 	bl	8009cb8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800a17a:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c

  switch (input->type) {
 800a17e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a182:	7a1b      	ldrb	r3, [r3, #8]
 800a184:	2b03      	cmp	r3, #3
 800a186:	d066      	beq.n	800a256 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x116>
 800a188:	2b09      	cmp	r3, #9
 800a18a:	d02d      	beq.n	800a1e8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0xa8>
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	f040 8097 	bne.w	800a2c0 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x180>
    case kTfLiteFloat32: {
      Relu6Float(tflite::micro::GetTensorShape(input),
 800a192:	f107 030c 	add.w	r3, r7, #12
 800a196:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800a19a:	4618      	mov	r0, r3
 800a19c:	f001 fc9f 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800a1a0:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800a1a4:	f000 fa58 	bl	800a658 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800a1a8:	4604      	mov	r4, r0
                 tflite::micro::GetTensorData<float>(input),
                 tflite::micro::GetTensorShape(output),
 800a1aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1ae:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	f001 fc93 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Float(tflite::micro::GetTensorShape(input),
 800a1b8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a1bc:	f000 fa5b 	bl	800a676 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800a1c0:	4603      	mov	r3, r0
 800a1c2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800a1c6:	f107 000c 	add.w	r0, r7, #12
 800a1ca:	4621      	mov	r1, r4
 800a1cc:	f7ff fdc8 	bl	8009d60 <_ZN6tflite3ops5micro11activations10Relu6FloatERKNS_12RuntimeShapeEPKfS5_Pf>
                 tflite::micro::GetTensorShape(output),
 800a1d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7fb fc80 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      Relu6Float(tflite::micro::GetTensorShape(input),
 800a1da:	f107 030c 	add.w	r3, r7, #12
 800a1de:	4618      	mov	r0, r3
 800a1e0:	f7fb fc7b 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
                 tflite::micro::GetTensorData<float>(output));

      return kTfLiteOk;
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	e07a      	b.n	800a2de <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteInt8: {
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 800a1e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a1ec:	f993 4001 	ldrsb.w	r4, [r3, #1]
 800a1f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a1f4:	f993 5000 	ldrsb.w	r5, [r3]
                             tflite::micro::GetTensorShape(input),
 800a1f8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a1fc:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800a200:	4618      	mov	r0, r3
 800a202:	f001 fc6c 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 800a206:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800a20a:	f000 fa45 	bl	800a698 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800a20e:	4606      	mov	r6, r0
                             tflite::micro::GetTensorData<int8_t>(input),
                             tflite::micro::GetTensorShape(output),
 800a210:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a214:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a218:	4618      	mov	r0, r3
 800a21a:	f001 fc60 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<int8_t>(data.zero_int8, data.six_int8,
 800a21e:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a222:	f000 fa48 	bl	800a6b6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800a226:	4603      	mov	r3, r0
 800a228:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800a22c:	9301      	str	r3, [sp, #4]
 800a22e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a232:	9300      	str	r3, [sp, #0]
 800a234:	4633      	mov	r3, r6
 800a236:	4629      	mov	r1, r5
 800a238:	4620      	mov	r0, r4
 800a23a:	f000 fba6 	bl	800a98a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                             tflite::micro::GetTensorShape(output),
 800a23e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800a242:	4618      	mov	r0, r3
 800a244:	f7fb fc49 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorShape(input),
 800a248:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fb fc44 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
                             tflite::micro::GetTensorData<int8_t>(output));
      return kTfLiteOk;
 800a252:	2300      	movs	r3, #0
 800a254:	e043      	b.n	800a2de <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    case kTfLiteUInt8: {
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 800a256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a25a:	78dc      	ldrb	r4, [r3, #3]
 800a25c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a260:	789d      	ldrb	r5, [r3, #2]
                              tflite::micro::GetTensorShape(input),
 800a262:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a266:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 800a26a:	4618      	mov	r0, r3
 800a26c:	f001 fc37 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 800a270:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 800a274:	f000 fa7c 	bl	800a770 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800a278:	4606      	mov	r6, r0
                              tflite::micro::GetTensorData<uint8_t>(input),
                              tflite::micro::GetTensorShape(output),
 800a27a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a27e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800a282:	4618      	mov	r0, r3
 800a284:	f001 fc2b 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
      Relu6Quantized<uint8_t>(data.zero_uint8, data.six_uint8,
 800a288:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 800a28c:	f000 fa7f 	bl	800a78e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800a290:	4603      	mov	r3, r0
 800a292:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 800a296:	9301      	str	r3, [sp, #4]
 800a298:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a29c:	9300      	str	r3, [sp, #0]
 800a29e:	4633      	mov	r3, r6
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	f000 fbb0 	bl	800aa08 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>
                              tflite::micro::GetTensorShape(output),
 800a2a8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800a2ac:	4618      	mov	r0, r3
 800a2ae:	f7fb fc14 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorShape(input),
 800a2b2:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7fb fc0f 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
                              tflite::micro::GetTensorData<uint8_t>(output));
      return kTfLiteOk;
 800a2bc:	2300      	movs	r3, #0
 800a2be:	e00e      	b.n	800a2de <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x19e>
    }
    default: {
      TF_LITE_KERNEL_LOG(context, "Only float32 is supported currently, got %s",
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	695c      	ldr	r4, [r3, #20]
 800a2c4:	687d      	ldr	r5, [r7, #4]
 800a2c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a2ca:	7a1b      	ldrb	r3, [r3, #8]
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f7fa f873 	bl	80043b8 <TfLiteTypeGetName>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	461a      	mov	r2, r3
 800a2d6:	4904      	ldr	r1, [pc, #16]	; (800a2e8 <_ZN6tflite3ops5micro11activations9Relu6EvalEP13TfLiteContextP10TfLiteNode+0x1a8>)
 800a2d8:	4628      	mov	r0, r5
 800a2da:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 800a2dc:	2301      	movs	r3, #1
    }
  }
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	37ac      	adds	r7, #172	; 0xac
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2e6:	bf00      	nop
 800a2e8:	0801184c 	.word	0x0801184c

0800a2ec <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 800a2ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2ee:	b089      	sub	sp, #36	; 0x24
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
 800a2f4:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 800a2f6:	683a      	ldr	r2, [r7, #0]
 800a2f8:	2a00      	cmp	r2, #0
 800a2fa:	da06      	bge.n	800a30a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 800a2fc:	4b30      	ldr	r3, [pc, #192]	; (800a3c0 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd4>)
 800a2fe:	4a31      	ldr	r2, [pc, #196]	; (800a3c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800a300:	f44f 71b3 	mov.w	r1, #358	; 0x166
 800a304:	4830      	ldr	r0, [pc, #192]	; (800a3c8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800a306:	f002 f92d 	bl	800c564 <__assert_func>
  assert(exponent <= 31);
 800a30a:	683a      	ldr	r2, [r7, #0]
 800a30c:	2a1f      	cmp	r2, #31
 800a30e:	dd06      	ble.n	800a31e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 800a310:	4b2e      	ldr	r3, [pc, #184]	; (800a3cc <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 800a312:	4a2c      	ldr	r2, [pc, #176]	; (800a3c4 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 800a314:	f240 1167 	movw	r1, #359	; 0x167
 800a318:	482b      	ldr	r0, [pc, #172]	; (800a3c8 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 800a31a:	f002 f923 	bl	800c564 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 800a31e:	f04f 0101 	mov.w	r1, #1
 800a322:	f04f 0200 	mov.w	r2, #0
 800a326:	6838      	ldr	r0, [r7, #0]
 800a328:	f1a0 0620 	sub.w	r6, r0, #32
 800a32c:	f1c0 0520 	rsb	r5, r0, #32
 800a330:	fa02 f400 	lsl.w	r4, r2, r0
 800a334:	fa01 f606 	lsl.w	r6, r1, r6
 800a338:	4334      	orrs	r4, r6
 800a33a:	fa21 f505 	lsr.w	r5, r1, r5
 800a33e:	432c      	orrs	r4, r5
 800a340:	fa01 f300 	lsl.w	r3, r1, r0
 800a344:	3b01      	subs	r3, #1
 800a346:	4618      	mov	r0, r3
 800a348:	f000 fb96 	bl	800aa78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800a34c:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 800a34e:	2000      	movs	r0, #0
 800a350:	f000 fb92 	bl	800aa78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800a354:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 800a356:	2001      	movs	r0, #1
 800a358:	f000 fb8e 	bl	800aa78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 800a35c:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 800a35e:	69f9      	ldr	r1, [r7, #28]
 800a360:	6878      	ldr	r0, [r7, #4]
 800a362:	f000 fb94 	bl	800aa8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800a366:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 800a368:	2101      	movs	r1, #1
 800a36a:	69f8      	ldr	r0, [r7, #28]
 800a36c:	f000 fb9d 	bl	800aaaa <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800a370:	4604      	mov	r4, r0
 800a372:	69b9      	ldr	r1, [r7, #24]
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f000 fba7 	bl	800aac8 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 800a37a:	4603      	mov	r3, r0
 800a37c:	6979      	ldr	r1, [r7, #20]
 800a37e:	4618      	mov	r0, r3
 800a380:	f000 fb85 	bl	800aa8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800a384:	4603      	mov	r3, r0
  const IntegerType threshold =
 800a386:	4619      	mov	r1, r3
 800a388:	4620      	mov	r0, r4
 800a38a:	f000 fbb1 	bl	800aaf0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800a38e:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 800a390:	6839      	ldr	r1, [r7, #0]
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f000 fb89 	bl	800aaaa <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 800a398:	4604      	mov	r4, r0
 800a39a:	68f9      	ldr	r1, [r7, #12]
 800a39c:	6938      	ldr	r0, [r7, #16]
 800a39e:	f000 fbb5 	bl	800ab0c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	6979      	ldr	r1, [r7, #20]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 fb71 	bl	800aa8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 800a3ac:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 fb9d 	bl	800aaf0 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 800a3b6:	4603      	mov	r3, r0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3724      	adds	r7, #36	; 0x24
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3c0:	080118b8 	.word	0x080118b8
 800a3c4:	08012844 	.word	0x08012844
 800a3c8:	080118c8 	.word	0x080118c8
 800a3cc:	0801192c 	.word	0x0801192c

0800a3d0 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 800a3d0:	b590      	push	{r4, r7, lr}
 800a3d2:	b099      	sub	sp, #100	; 0x64
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	60b9      	str	r1, [r7, #8]
 800a3da:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 800a3dc:	f04f 0300 	mov.w	r3, #0
 800a3e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 800a3e2:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800a3e6:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	ed93 7a03 	vldr	s14, [r3, #12]
 800a3ee:	68bb      	ldr	r3, [r7, #8]
 800a3f0:	edd3 7a03 	vldr	s15, [r3, #12]
 800a3f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 800a3f8:	ee16 0a90 	vmov	r0, s13
 800a3fc:	f7f6 f8b4 	bl	8000568 <__aeabi_f2d>
 800a400:	4603      	mov	r3, r0
 800a402:	460c      	mov	r4, r1
 800a404:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 800a408:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a40c:	68f9      	ldr	r1, [r7, #12]
 800a40e:	4618      	mov	r0, r3
 800a410:	f7fb fbdf 	bl	8005bd2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 800a414:	f107 0310 	add.w	r3, r7, #16
 800a418:	68b9      	ldr	r1, [r7, #8]
 800a41a:	4618      	mov	r0, r3
 800a41c:	f7fb fbd9 	bl	8005bd2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	f103 0214 	add.w	r2, r3, #20
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	3318      	adds	r3, #24
 800a42a:	4619      	mov	r1, r3
 800a42c:	4610      	mov	r0, r2
 800a42e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800a432:	f7fa ff45 	bl	80052c0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 800a436:	f7fb f825 	bl	8005484 <_ZNSt14numeric_limitsIaE3minEv>
 800a43a:	4603      	mov	r3, r0
 800a43c:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 800a43e:	68bb      	ldr	r3, [r7, #8]
 800a440:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	edd3 7a03 	vldr	s15, [r3, #12]
 800a448:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a44c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a450:	eeb0 0a66 	vmov.f32	s0, s13
 800a454:	f002 f858 	bl	800c508 <roundf>
 800a458:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 800a45c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a460:	ee17 3a90 	vmov	r3, s15
 800a464:	4423      	add	r3, r4
 800a466:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800a468:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a46c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a470:	4611      	mov	r1, r2
 800a472:	4618      	mov	r0, r3
 800a474:	f7fb fade 	bl	8005a34 <_ZSt3maxIlERKT_S2_S2_>
 800a478:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 800a47a:	681a      	ldr	r2, [r3, #0]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 800a480:	f7ff fab9 	bl	80099f6 <_ZNSt14numeric_limitsIfE8infinityEv>
 800a484:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 800a488:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a48c:	eef4 7a47 	vcmp.f32	s15, s14
 800a490:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a494:	d103      	bne.n	800a49e <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 800a496:	f7fa fffe 	bl	8005496 <_ZNSt14numeric_limitsIaE3maxEv>
 800a49a:	4603      	mov	r3, r0
 800a49c:	e022      	b.n	800a4e4 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIaEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 800a49e:	f7fa fffa 	bl	8005496 <_ZNSt14numeric_limitsIaE3maxEv>
 800a4a2:	4603      	mov	r3, r0
 800a4a4:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 800a4a6:	68bb      	ldr	r3, [r7, #8]
 800a4a8:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	edd3 7a03 	vldr	s15, [r3, #12]
 800a4b0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a4b4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a4b8:	eeb0 0a66 	vmov.f32	s0, s13
 800a4bc:	f002 f824 	bl	800c508 <roundf>
 800a4c0:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 800a4c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a4c8:	ee17 3a90 	vmov	r3, s15
 800a4cc:	4423      	add	r3, r4
 800a4ce:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 800a4d0:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800a4d4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a4d8:	4611      	mov	r1, r2
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fb fa96 	bl	8005a0c <_ZSt3minIlERKT_S2_S2_>
 800a4e0:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	691a      	ldr	r2, [r3, #16]
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 800a4f0:	68bb      	ldr	r3, [r7, #8]
 800a4f2:	691a      	ldr	r2, [r3, #16]
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 800a4f8:	f107 0310 	add.w	r3, r7, #16
 800a4fc:	4618      	mov	r0, r3
 800a4fe:	f7fb faec 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 800a502:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a506:	4618      	mov	r0, r3
 800a508:	f7fb fae7 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
}
 800a50c:	bf00      	nop
 800a50e:	3764      	adds	r7, #100	; 0x64
 800a510:	46bd      	mov	sp, r7
 800a512:	bd90      	pop	{r4, r7, pc}

0800a514 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE>:
inline void CalculateReluOpData(const TfLiteTensor* input, TfLiteTensor* output,
 800a514:	b590      	push	{r4, r7, lr}
 800a516:	b099      	sub	sp, #100	; 0x64
 800a518:	af00      	add	r7, sp, #0
 800a51a:	60f8      	str	r0, [r7, #12]
 800a51c:	60b9      	str	r1, [r7, #8]
 800a51e:	607a      	str	r2, [r7, #4]
  float act_min = 0.0;
 800a520:	f04f 0300 	mov.w	r3, #0
 800a524:	65fb      	str	r3, [r7, #92]	; 0x5c
  float act_max = std::numeric_limits<float>::infinity();
 800a526:	f04f 43ff 	mov.w	r3, #2139095040	; 0x7f800000
 800a52a:	65bb      	str	r3, [r7, #88]	; 0x58
      static_cast<double>(input->params.scale / output->params.scale);
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	ed93 7a03 	vldr	s14, [r3, #12]
 800a532:	68bb      	ldr	r3, [r7, #8]
 800a534:	edd3 7a03 	vldr	s15, [r3, #12]
 800a538:	eec7 6a27 	vdiv.f32	s13, s14, s15
  double real_multiplier =
 800a53c:	ee16 0a90 	vmov	r0, s13
 800a540:	f7f6 f812 	bl	8000568 <__aeabi_f2d>
 800a544:	4603      	mov	r3, r0
 800a546:	460c      	mov	r4, r1
 800a548:	e9c7 3414 	strd	r3, r4, [r7, #80]	; 0x50
  const RuntimeShape input_shape = GetTensorShape(input);
 800a54c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a550:	68f9      	ldr	r1, [r7, #12]
 800a552:	4618      	mov	r0, r3
 800a554:	f7fb fb3d 	bl	8005bd2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  const RuntimeShape output_shape = GetTensorShape(output);
 800a558:	f107 0310 	add.w	r3, r7, #16
 800a55c:	68b9      	ldr	r1, [r7, #8]
 800a55e:	4618      	mov	r0, r3
 800a560:	f7fb fb37 	bl	8005bd2 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  QuantizeMultiplier(real_multiplier, &data->params.output_multiplier,
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f103 0214 	add.w	r2, r3, #20
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	3318      	adds	r3, #24
 800a56e:	4619      	mov	r1, r3
 800a570:	4610      	mov	r0, r2
 800a572:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
 800a576:	f7fa fea3 	bl	80052c0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
      static_cast<int32_t>(std::numeric_limits<T>::min()),
 800a57a:	f7fa ff94 	bl	80054a6 <_ZNSt14numeric_limitsIhE3minEv>
 800a57e:	4603      	mov	r3, r0
 800a580:	643b      	str	r3, [r7, #64]	; 0x40
      output->params.zero_point +
 800a582:	68bb      	ldr	r3, [r7, #8]
 800a584:	691c      	ldr	r4, [r3, #16]
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800a586:	68bb      	ldr	r3, [r7, #8]
 800a588:	edd3 7a03 	vldr	s15, [r3, #12]
 800a58c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a590:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a594:	eeb0 0a66 	vmov.f32	s0, s13
 800a598:	f001 ffb6 	bl	800c508 <roundf>
 800a59c:	eef0 7a40 	vmov.f32	s15, s0
      output->params.zero_point +
 800a5a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a5a4:	ee17 3a90 	vmov	r3, s15
 800a5a8:	4423      	add	r3, r4
 800a5aa:	647b      	str	r3, [r7, #68]	; 0x44
          static_cast<int32_t>(roundf(act_min / output->params.scale)));
 800a5ac:	f107 0244 	add.w	r2, r7, #68	; 0x44
 800a5b0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800a5b4:	4611      	mov	r1, r2
 800a5b6:	4618      	mov	r0, r3
 800a5b8:	f7fb fa3c 	bl	8005a34 <_ZSt3maxIlERKT_S2_S2_>
 800a5bc:	4603      	mov	r3, r0
  data->params.quantized_activation_min = std::max(
 800a5be:	681a      	ldr	r2, [r3, #0]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	605a      	str	r2, [r3, #4]
      act_max == std::numeric_limits<float>::infinity()
 800a5c4:	f7ff fa17 	bl	80099f6 <_ZNSt14numeric_limitsIfE8infinityEv>
 800a5c8:	eeb0 7a40 	vmov.f32	s14, s0
  data->params.quantized_activation_max =
 800a5cc:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a5d0:	eef4 7a47 	vcmp.f32	s15, s14
 800a5d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a5d8:	d103      	bne.n	800a5e2 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0xce>
          ? static_cast<int32_t>(std::numeric_limits<T>::max())
 800a5da:	f7fa ff6c 	bl	80054b6 <_ZNSt14numeric_limitsIhE3maxEv>
 800a5de:	4603      	mov	r3, r0
 800a5e0:	e022      	b.n	800a628 <_ZN6tflite3ops5micro11activations19CalculateReluOpDataIhEEvPK12TfLiteTensorPS4_PNS2_12_GLOBAL__N_110ReluOpDataE+0x114>
          : std::min(static_cast<int32_t>(std::numeric_limits<T>::max()),
 800a5e2:	f7fa ff68 	bl	80054b6 <_ZNSt14numeric_limitsIhE3maxEv>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	64bb      	str	r3, [r7, #72]	; 0x48
                     output->params.zero_point +
 800a5ea:	68bb      	ldr	r3, [r7, #8]
 800a5ec:	691c      	ldr	r4, [r3, #16]
                             roundf(act_max / output->params.scale)));
 800a5ee:	68bb      	ldr	r3, [r7, #8]
 800a5f0:	edd3 7a03 	vldr	s15, [r3, #12]
 800a5f4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a5f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a5fc:	eeb0 0a66 	vmov.f32	s0, s13
 800a600:	f001 ff82 	bl	800c508 <roundf>
 800a604:	eef0 7a40 	vmov.f32	s15, s0
                     output->params.zero_point +
 800a608:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a60c:	ee17 3a90 	vmov	r3, s15
 800a610:	4423      	add	r3, r4
 800a612:	64fb      	str	r3, [r7, #76]	; 0x4c
                             roundf(act_max / output->params.scale)));
 800a614:	f107 024c 	add.w	r2, r7, #76	; 0x4c
 800a618:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800a61c:	4611      	mov	r1, r2
 800a61e:	4618      	mov	r0, r3
 800a620:	f7fb f9f4 	bl	8005a0c <_ZSt3minIlERKT_S2_S2_>
 800a624:	4603      	mov	r3, r0
  data->params.quantized_activation_max =
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	687a      	ldr	r2, [r7, #4]
 800a62a:	6093      	str	r3, [r2, #8]
  data->params.input_offset = input->params.zero_point;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	691a      	ldr	r2, [r3, #16]
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	60da      	str	r2, [r3, #12]
  data->params.output_offset = output->params.zero_point;
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	691a      	ldr	r2, [r3, #16]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	611a      	str	r2, [r3, #16]
  const RuntimeShape output_shape = GetTensorShape(output);
 800a63c:	f107 0310 	add.w	r3, r7, #16
 800a640:	4618      	mov	r0, r3
 800a642:	f7fb fa4a 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
  const RuntimeShape input_shape = GetTensorShape(input);
 800a646:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800a64a:	4618      	mov	r0, r3
 800a64c:	f7fb fa45 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
}
 800a650:	bf00      	nop
 800a652:	3764      	adds	r7, #100	; 0x64
 800a654:	46bd      	mov	sp, r7
 800a656:	bd90      	pop	{r4, r7, pc}

0800a658 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>:
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

// Returns const data for a TfLiteEvalTensor struct.
template <typename T>
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d101      	bne.n	800a66a <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor+0x12>
 800a666:	f001 ff75 	bl	800c554 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
}
 800a66e:	4618      	mov	r0, r3
 800a670:	3708      	adds	r7, #8
 800a672:	46bd      	mov	sp, r7
 800a674:	bd80      	pop	{r7, pc}

0800a676 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800a676:	b480      	push	{r7}
 800a678:	b083      	sub	sp, #12
 800a67a:	af00      	add	r7, sp, #0
 800a67c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d002      	beq.n	800a68a <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x14>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	e000      	b.n	800a68c <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor+0x16>
 800a68a:	2300      	movs	r3, #0
}
 800a68c:	4618      	mov	r0, r3
 800a68e:	370c      	adds	r7, #12
 800a690:	46bd      	mov	sp, r7
 800a692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a696:	4770      	bx	lr

0800a698 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800a698:	b580      	push	{r7, lr}
 800a69a:	b082      	sub	sp, #8
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d101      	bne.n	800a6aa <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor+0x12>
 800a6a6:	f001 ff55 	bl	800c554 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3708      	adds	r7, #8
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800a6b6:	b480      	push	{r7}
 800a6b8:	b083      	sub	sp, #12
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2b00      	cmp	r3, #0
 800a6c2:	d002      	beq.n	800a6ca <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x14>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	e000      	b.n	800a6cc <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor+0x16>
 800a6ca:	2300      	movs	r3, #0
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 800a6d8:	b590      	push	{r4, r7, lr}
 800a6da:	b089      	sub	sp, #36	; 0x24
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
 800a6e4:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800a6e6:	6879      	ldr	r1, [r7, #4]
 800a6e8:	68b8      	ldr	r0, [r7, #8]
 800a6ea:	f7ff fa5c 	bl	8009ba6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800a6ee:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800a6f0:	2300      	movs	r3, #0
 800a6f2:	61fb      	str	r3, [r7, #28]
 800a6f4:	69fa      	ldr	r2, [r7, #28]
 800a6f6:	69bb      	ldr	r3, [r7, #24]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	da35      	bge.n	800a768 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x90>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	683a      	ldr	r2, [r7, #0]
 800a700:	4413      	add	r3, r2
 800a702:	f993 3000 	ldrsb.w	r3, [r3]
 800a706:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	68db      	ldr	r3, [r3, #12]
 800a710:	697a      	ldr	r2, [r7, #20]
 800a712:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800a71c:	461a      	mov	r2, r3
 800a71e:	f7ff fa77 	bl	8009c10 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800a722:	4603      	mov	r3, r0
        data.params.output_offset +
 800a724:	4423      	add	r3, r4
    int32_t clamped =
 800a726:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	3304      	adds	r3, #4
 800a72c:	f107 0210 	add.w	r2, r7, #16
 800a730:	4611      	mov	r1, r2
 800a732:	4618      	mov	r0, r3
 800a734:	f7fb f97e 	bl	8005a34 <_ZSt3maxIlERKT_S2_S2_>
 800a738:	4603      	mov	r3, r0
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	3308      	adds	r3, #8
 800a742:	f107 0210 	add.w	r2, r7, #16
 800a746:	4611      	mov	r1, r2
 800a748:	4618      	mov	r0, r3
 800a74a:	f7fb f95f 	bl	8005a0c <_ZSt3minIlERKT_S2_S2_>
 800a74e:	4603      	mov	r3, r0
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 800a754:	6939      	ldr	r1, [r7, #16]
 800a756:	69fb      	ldr	r3, [r7, #28]
 800a758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a75a:	4413      	add	r3, r2
 800a75c:	b24a      	sxtb	r2, r1
 800a75e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800a760:	69fb      	ldr	r3, [r7, #28]
 800a762:	3301      	adds	r3, #1
 800a764:	61fb      	str	r3, [r7, #28]
 800a766:	e7c5      	b.n	800a6f4 <_ZN6tflite3ops5micro11activations13ReluQuantizedIaEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 800a768:	bf00      	nop
 800a76a:	3724      	adds	r7, #36	; 0x24
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd90      	pop	{r4, r7, pc}

0800a770 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800a770:	b580      	push	{r7, lr}
 800a772:	b082      	sub	sp, #8
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d101      	bne.n	800a782 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor+0x12>
 800a77e:	f001 fee9 	bl	800c554 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
}
 800a786:	4618      	mov	r0, r3
 800a788:	3708      	adds	r7, #8
 800a78a:	46bd      	mov	sp, r7
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800a78e:	b480      	push	{r7}
 800a790:	b083      	sub	sp, #12
 800a792:	af00      	add	r7, sp, #0
 800a794:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d002      	beq.n	800a7a2 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x14>
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	e000      	b.n	800a7a4 <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor+0x16>
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_>:
inline void ReluQuantized(const ReluOpData& data,
 800a7b0:	b590      	push	{r4, r7, lr}
 800a7b2:	b089      	sub	sp, #36	; 0x24
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	607a      	str	r2, [r7, #4]
 800a7bc:	603b      	str	r3, [r7, #0]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800a7be:	6879      	ldr	r1, [r7, #4]
 800a7c0:	68b8      	ldr	r0, [r7, #8]
 800a7c2:	f7ff f9f0 	bl	8009ba6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800a7c6:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	61fb      	str	r3, [r7, #28]
 800a7cc:	69fa      	ldr	r2, [r7, #28]
 800a7ce:	69bb      	ldr	r3, [r7, #24]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	da34      	bge.n	800a83e <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x8e>
    const int32_t val = static_cast<int32_t>(input_data[i]);
 800a7d4:	69fb      	ldr	r3, [r7, #28]
 800a7d6:	683a      	ldr	r2, [r7, #0]
 800a7d8:	4413      	add	r3, r2
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	617b      	str	r3, [r7, #20]
        data.params.output_offset +
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	691c      	ldr	r4, [r3, #16]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	68db      	ldr	r3, [r3, #12]
 800a7e6:	697a      	ldr	r2, [r7, #20]
 800a7e8:	1ad0      	subs	r0, r2, r3
                                      data.params.output_multiplier,
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6959      	ldr	r1, [r3, #20]
                                      data.params.output_shift);
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	699b      	ldr	r3, [r3, #24]
        MultiplyByQuantizedMultiplier(val - data.params.input_offset,
 800a7f2:	461a      	mov	r2, r3
 800a7f4:	f7ff fa0c 	bl	8009c10 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800a7f8:	4603      	mov	r3, r0
        data.params.output_offset +
 800a7fa:	4423      	add	r3, r4
    int32_t clamped =
 800a7fc:	613b      	str	r3, [r7, #16]
    clamped = std::max(data.params.quantized_activation_min, clamped);
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	3304      	adds	r3, #4
 800a802:	f107 0210 	add.w	r2, r7, #16
 800a806:	4611      	mov	r1, r2
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fb f913 	bl	8005a34 <_ZSt3maxIlERKT_S2_S2_>
 800a80e:	4603      	mov	r3, r0
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	613b      	str	r3, [r7, #16]
    clamped = std::min(data.params.quantized_activation_max, clamped);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	3308      	adds	r3, #8
 800a818:	f107 0210 	add.w	r2, r7, #16
 800a81c:	4611      	mov	r1, r2
 800a81e:	4618      	mov	r0, r3
 800a820:	f7fb f8f4 	bl	8005a0c <_ZSt3minIlERKT_S2_S2_>
 800a824:	4603      	mov	r3, r0
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	613b      	str	r3, [r7, #16]
    output_data[i] = static_cast<T>(clamped);
 800a82a:	6939      	ldr	r1, [r7, #16]
 800a82c:	69fb      	ldr	r3, [r7, #28]
 800a82e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a830:	4413      	add	r3, r2
 800a832:	b2ca      	uxtb	r2, r1
 800a834:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800a836:	69fb      	ldr	r3, [r7, #28]
 800a838:	3301      	adds	r3, #1
 800a83a:	61fb      	str	r3, [r7, #28]
 800a83c:	e7c6      	b.n	800a7cc <_ZN6tflite3ops5micro11activations13ReluQuantizedIhEEvRKNS2_12_GLOBAL__N_110ReluOpDataERKNS_12RuntimeShapeESA_PKT_PSB_+0x1c>
}
 800a83e:	bf00      	nop
 800a840:	3724      	adds	r7, #36	; 0x24
 800a842:	46bd      	mov	sp, r7
 800a844:	bd90      	pop	{r4, r7, pc}

0800a846 <_ZN6tflite20FloatToQuantizedTypeIaEET_ffi>:

// Converts a float value into a quantized value.  Note that large values (close
// to max int and min int) may see significant error due to a lack of floating
// point granularity for large values.
template <typename T>
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 800a846:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a848:	b089      	sub	sp, #36	; 0x24
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	ed87 0a03 	vstr	s0, [r7, #12]
 800a850:	edc7 0a02 	vstr	s1, [r7, #8]
 800a854:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 800a856:	ed97 7a03 	vldr	s14, [r7, #12]
 800a85a:	edd7 7a02 	vldr	s15, [r7, #8]
 800a85e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a862:	ee16 0a90 	vmov	r0, s13
 800a866:	f7f5 fe7f 	bl	8000568 <__aeabi_f2d>
 800a86a:	4603      	mov	r3, r0
 800a86c:	460c      	mov	r4, r1
 800a86e:	ec44 3b10 	vmov	d0, r3, r4
 800a872:	f001 fdff 	bl	800c474 <round>
 800a876:	ec56 5b10 	vmov	r5, r6, d0
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f7f5 fe62 	bl	8000544 <__aeabi_i2d>
 800a880:	4603      	mov	r3, r0
 800a882:	460c      	mov	r4, r1
 800a884:	461a      	mov	r2, r3
 800a886:	4623      	mov	r3, r4
 800a888:	4628      	mov	r0, r5
 800a88a:	4631      	mov	r1, r6
 800a88c:	f7f5 fd0e 	bl	80002ac <__adddf3>
 800a890:	4603      	mov	r3, r0
 800a892:	460c      	mov	r4, r1
 800a894:	4618      	mov	r0, r3
 800a896:	4621      	mov	r1, r4
 800a898:	f7f6 f96e 	bl	8000b78 <__aeabi_d2iz>
 800a89c:	4603      	mov	r3, r0
 800a89e:	617b      	str	r3, [r7, #20]
  result =
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 800a8a0:	f7fa fdf0 	bl	8005484 <_ZNSt14numeric_limitsIaE3minEv>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	61bb      	str	r3, [r7, #24]
 800a8a8:	f107 0214 	add.w	r2, r7, #20
 800a8ac:	f107 0318 	add.w	r3, r7, #24
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7fb f8be 	bl	8005a34 <_ZSt3maxIlERKT_S2_S2_>
 800a8b8:	4603      	mov	r3, r0
  result =
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	617b      	str	r3, [r7, #20]
  result =
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 800a8be:	f7fa fdea 	bl	8005496 <_ZNSt14numeric_limitsIaE3maxEv>
 800a8c2:	4603      	mov	r3, r0
 800a8c4:	61fb      	str	r3, [r7, #28]
 800a8c6:	f107 0214 	add.w	r2, r7, #20
 800a8ca:	f107 031c 	add.w	r3, r7, #28
 800a8ce:	4611      	mov	r1, r2
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f7fb f89b 	bl	8005a0c <_ZSt3minIlERKT_S2_S2_>
 800a8d6:	4603      	mov	r3, r0
  result =
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	617b      	str	r3, [r7, #20]
  return result;
 800a8dc:	697b      	ldr	r3, [r7, #20]
 800a8de:	b25b      	sxtb	r3, r3
}
 800a8e0:	4618      	mov	r0, r3
 800a8e2:	3724      	adds	r7, #36	; 0x24
 800a8e4:	46bd      	mov	sp, r7
 800a8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a8e8 <_ZN6tflite20FloatToQuantizedTypeIhEET_ffi>:
T FloatToQuantizedType(const float value, const float scale, int zero_point) {
 800a8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a8ea:	b089      	sub	sp, #36	; 0x24
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	ed87 0a03 	vstr	s0, [r7, #12]
 800a8f2:	edc7 0a02 	vstr	s1, [r7, #8]
 800a8f6:	6078      	str	r0, [r7, #4]
  int32_t result = round(value / scale) + zero_point;
 800a8f8:	ed97 7a03 	vldr	s14, [r7, #12]
 800a8fc:	edd7 7a02 	vldr	s15, [r7, #8]
 800a900:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800a904:	ee16 0a90 	vmov	r0, s13
 800a908:	f7f5 fe2e 	bl	8000568 <__aeabi_f2d>
 800a90c:	4603      	mov	r3, r0
 800a90e:	460c      	mov	r4, r1
 800a910:	ec44 3b10 	vmov	d0, r3, r4
 800a914:	f001 fdae 	bl	800c474 <round>
 800a918:	ec56 5b10 	vmov	r5, r6, d0
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f7f5 fe11 	bl	8000544 <__aeabi_i2d>
 800a922:	4603      	mov	r3, r0
 800a924:	460c      	mov	r4, r1
 800a926:	461a      	mov	r2, r3
 800a928:	4623      	mov	r3, r4
 800a92a:	4628      	mov	r0, r5
 800a92c:	4631      	mov	r1, r6
 800a92e:	f7f5 fcbd 	bl	80002ac <__adddf3>
 800a932:	4603      	mov	r3, r0
 800a934:	460c      	mov	r4, r1
 800a936:	4618      	mov	r0, r3
 800a938:	4621      	mov	r1, r4
 800a93a:	f7f6 f91d 	bl	8000b78 <__aeabi_d2iz>
 800a93e:	4603      	mov	r3, r0
 800a940:	617b      	str	r3, [r7, #20]
      std::max(static_cast<int32_t>(std::numeric_limits<T>::min()), result);
 800a942:	f7fa fdb0 	bl	80054a6 <_ZNSt14numeric_limitsIhE3minEv>
 800a946:	4603      	mov	r3, r0
 800a948:	61bb      	str	r3, [r7, #24]
 800a94a:	f107 0214 	add.w	r2, r7, #20
 800a94e:	f107 0318 	add.w	r3, r7, #24
 800a952:	4611      	mov	r1, r2
 800a954:	4618      	mov	r0, r3
 800a956:	f7fb f86d 	bl	8005a34 <_ZSt3maxIlERKT_S2_S2_>
 800a95a:	4603      	mov	r3, r0
  result =
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	617b      	str	r3, [r7, #20]
      std::min(static_cast<int32_t>(std::numeric_limits<T>::max()), result);
 800a960:	f7fa fda9 	bl	80054b6 <_ZNSt14numeric_limitsIhE3maxEv>
 800a964:	4603      	mov	r3, r0
 800a966:	61fb      	str	r3, [r7, #28]
 800a968:	f107 0214 	add.w	r2, r7, #20
 800a96c:	f107 031c 	add.w	r3, r7, #28
 800a970:	4611      	mov	r1, r2
 800a972:	4618      	mov	r0, r3
 800a974:	f7fb f84a 	bl	8005a0c <_ZSt3minIlERKT_S2_S2_>
 800a978:	4603      	mov	r3, r0
  result =
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	617b      	str	r3, [r7, #20]
  return result;
 800a97e:	697b      	ldr	r3, [r7, #20]
 800a980:	b2db      	uxtb	r3, r3
}
 800a982:	4618      	mov	r0, r3
 800a984:	3724      	adds	r7, #36	; 0x24
 800a986:	46bd      	mov	sp, r7
 800a988:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a98a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 800a98a:	b580      	push	{r7, lr}
 800a98c:	b088      	sub	sp, #32
 800a98e:	af00      	add	r7, sp, #0
 800a990:	60ba      	str	r2, [r7, #8]
 800a992:	607b      	str	r3, [r7, #4]
 800a994:	4603      	mov	r3, r0
 800a996:	73fb      	strb	r3, [r7, #15]
 800a998:	460b      	mov	r3, r1
 800a99a:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800a99c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a99e:	68b8      	ldr	r0, [r7, #8]
 800a9a0:	f7ff f901 	bl	8009ba6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800a9a4:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	61fb      	str	r3, [r7, #28]
 800a9aa:	69fa      	ldr	r2, [r7, #28]
 800a9ac:	69bb      	ldr	r3, [r7, #24]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	da26      	bge.n	800aa00 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x76>
    const Q val = input_data[i];
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	687a      	ldr	r2, [r7, #4]
 800a9b6:	4413      	add	r3, r2
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 800a9bc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9c0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a9c4:	429a      	cmp	r2, r3
 800a9c6:	dd04      	ble.n	800a9d2 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x48>
 800a9c8:	f107 030e 	add.w	r3, r7, #14
 800a9cc:	f993 3000 	ldrsb.w	r3, [r3]
 800a9d0:	e00c      	b.n	800a9ec <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 800a9d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a9d6:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800a9da:	429a      	cmp	r2, r3
 800a9dc:	da04      	bge.n	800a9e8 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x5e>
 800a9de:	f107 030f 	add.w	r3, r7, #15
 800a9e2:	f993 3000 	ldrsb.w	r3, [r3]
 800a9e6:	e001      	b.n	800a9ec <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x62>
 800a9e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800a9ec:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 800a9ee:	69fb      	ldr	r3, [r7, #28]
 800a9f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9f2:	4413      	add	r3, r2
 800a9f4:	7dba      	ldrb	r2, [r7, #22]
 800a9f6:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	61fb      	str	r3, [r7, #28]
 800a9fe:	e7d4      	b.n	800a9aa <_ZN6tflite3ops5micro11activations14Relu6QuantizedIaEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 800aa00:	bf00      	nop
 800aa02:	3720      	adds	r7, #32
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}

0800aa08 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_>:
inline void Relu6Quantized(Q lower, Q upper, const RuntimeShape& input_shape,
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b088      	sub	sp, #32
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	60ba      	str	r2, [r7, #8]
 800aa10:	607b      	str	r3, [r7, #4]
 800aa12:	4603      	mov	r3, r0
 800aa14:	73fb      	strb	r3, [r7, #15]
 800aa16:	460b      	mov	r3, r1
 800aa18:	73bb      	strb	r3, [r7, #14]
  const int flat_size = MatchingFlatSize(input_shape, output_shape);
 800aa1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800aa1c:	68b8      	ldr	r0, [r7, #8]
 800aa1e:	f7ff f8c2 	bl	8009ba6 <_ZN6tflite16MatchingFlatSizeERKNS_12RuntimeShapeES2_>
 800aa22:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; ++i) {
 800aa24:	2300      	movs	r3, #0
 800aa26:	61fb      	str	r3, [r7, #28]
 800aa28:	69fa      	ldr	r2, [r7, #28]
 800aa2a:	69bb      	ldr	r3, [r7, #24]
 800aa2c:	429a      	cmp	r2, r3
 800aa2e:	da1f      	bge.n	800aa70 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x68>
    const Q val = input_data[i];
 800aa30:	69fb      	ldr	r3, [r7, #28]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	4413      	add	r3, r2
 800aa36:	781b      	ldrb	r3, [r3, #0]
 800aa38:	75fb      	strb	r3, [r7, #23]
    const Q clamped = val > upper ? upper : val < lower ? lower : val;
 800aa3a:	7bbb      	ldrb	r3, [r7, #14]
 800aa3c:	7dfa      	ldrb	r2, [r7, #23]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d903      	bls.n	800aa4a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x42>
 800aa42:	f107 030e 	add.w	r3, r7, #14
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	e008      	b.n	800aa5c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 800aa4a:	7bfb      	ldrb	r3, [r7, #15]
 800aa4c:	7dfa      	ldrb	r2, [r7, #23]
 800aa4e:	429a      	cmp	r2, r3
 800aa50:	d203      	bcs.n	800aa5a <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x52>
 800aa52:	f107 030f 	add.w	r3, r7, #15
 800aa56:	781b      	ldrb	r3, [r3, #0]
 800aa58:	e000      	b.n	800aa5c <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x54>
 800aa5a:	7dfb      	ldrb	r3, [r7, #23]
 800aa5c:	75bb      	strb	r3, [r7, #22]
    output_data[i] = clamped;
 800aa5e:	69fb      	ldr	r3, [r7, #28]
 800aa60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800aa62:	4413      	add	r3, r2
 800aa64:	7dba      	ldrb	r2, [r7, #22]
 800aa66:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < flat_size; ++i) {
 800aa68:	69fb      	ldr	r3, [r7, #28]
 800aa6a:	3301      	adds	r3, #1
 800aa6c:	61fb      	str	r3, [r7, #28]
 800aa6e:	e7db      	b.n	800aa28 <_ZN6tflite3ops5micro11activations14Relu6QuantizedIhEEvT_S4_RKNS_12RuntimeShapeEPKS4_S7_PS4_+0x20>
}
 800aa70:	bf00      	nop
 800aa72:	3720      	adds	r7, #32
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
  return x;
 800aa80:	687b      	ldr	r3, [r7, #4]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	370c      	adds	r7, #12
 800aa86:	46bd      	mov	sp, r7
 800aa88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa8c:	4770      	bx	lr

0800aa8e <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 800aa8e:	b480      	push	{r7}
 800aa90:	b083      	sub	sp, #12
 800aa92:	af00      	add	r7, sp, #0
 800aa94:	6078      	str	r0, [r7, #4]
 800aa96:	6039      	str	r1, [r7, #0]
  return a & b;
 800aa98:	687a      	ldr	r2, [r7, #4]
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	4013      	ands	r3, r2
}
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	370c      	adds	r7, #12
 800aaa2:	46bd      	mov	sp, r7
 800aaa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa8:	4770      	bx	lr

0800aaaa <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 800aaaa:	b480      	push	{r7}
 800aaac:	b083      	sub	sp, #12
 800aaae:	af00      	add	r7, sp, #0
 800aab0:	6078      	str	r0, [r7, #4]
 800aab2:	6039      	str	r1, [r7, #0]
  return a >> offset;
 800aab4:	687a      	ldr	r2, [r7, #4]
 800aab6:	683b      	ldr	r3, [r7, #0]
 800aab8:	fa42 f303 	asr.w	r3, r2, r3
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 800aad2:	687a      	ldr	r2, [r7, #4]
 800aad4:	683b      	ldr	r3, [r7, #0]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	bfb4      	ite	lt
 800aada:	2301      	movlt	r3, #1
 800aadc:	2300      	movge	r3, #0
 800aade:	b2db      	uxtb	r3, r3
 800aae0:	4618      	mov	r0, r3
 800aae2:	f000 f827 	bl	800ab34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800aae6:	4603      	mov	r3, r0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3708      	adds	r7, #8
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 800aaf0:	b480      	push	{r7}
 800aaf2:	b083      	sub	sp, #12
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	6078      	str	r0, [r7, #4]
 800aaf8:	6039      	str	r1, [r7, #0]
  return a + b;
 800aafa:	687a      	ldr	r2, [r7, #4]
 800aafc:	683b      	ldr	r3, [r7, #0]
 800aafe:	4413      	add	r3, r2
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	370c      	adds	r7, #12
 800ab04:	46bd      	mov	sp, r7
 800ab06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0a:	4770      	bx	lr

0800ab0c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 800ab0c:	b580      	push	{r7, lr}
 800ab0e:	b082      	sub	sp, #8
 800ab10:	af00      	add	r7, sp, #0
 800ab12:	6078      	str	r0, [r7, #4]
 800ab14:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 800ab16:	687a      	ldr	r2, [r7, #4]
 800ab18:	683b      	ldr	r3, [r7, #0]
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	bfcc      	ite	gt
 800ab1e:	2301      	movgt	r3, #1
 800ab20:	2300      	movle	r3, #0
 800ab22:	b2db      	uxtb	r3, r3
 800ab24:	4618      	mov	r0, r3
 800ab26:	f000 f805 	bl	800ab34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 800ab2a:	4603      	mov	r3, r0
}
 800ab2c:	4618      	mov	r0, r3
 800ab2e:	3708      	adds	r7, #8
 800ab30:	46bd      	mov	sp, r7
 800ab32:	bd80      	pop	{r7, pc}

0800ab34 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 800ab34:	b580      	push	{r7, lr}
 800ab36:	b082      	sub	sp, #8
 800ab38:	af00      	add	r7, sp, #0
 800ab3a:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d004      	beq.n	800ab4c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 800ab42:	2000      	movs	r0, #0
 800ab44:	f000 f807 	bl	800ab56 <_ZN8gemmlowp6BitNotIlEET_S1_>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	e000      	b.n	800ab4e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 800ab4c:	2300      	movs	r3, #0
}
 800ab4e:	4618      	mov	r0, r3
 800ab50:	3708      	adds	r7, #8
 800ab52:	46bd      	mov	sp, r7
 800ab54:	bd80      	pop	{r7, pc}

0800ab56 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 800ab56:	b480      	push	{r7}
 800ab58:	b083      	sub	sp, #12
 800ab5a:	af00      	add	r7, sp, #0
 800ab5c:	6078      	str	r0, [r7, #4]
  return ~a;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	43db      	mvns	r3, r3
}
 800ab62:	4618      	mov	r0, r3
 800ab64:	370c      	adds	r7, #12
 800ab66:	46bd      	mov	sp, r7
 800ab68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6c:	4770      	bx	lr
	...

0800ab70 <_ZNSt14numeric_limitsIfE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800ab70:	b480      	push	{r7}
 800ab72:	af00      	add	r7, sp, #0
 800ab74:	4b04      	ldr	r3, [pc, #16]	; (800ab88 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800ab76:	ee07 3a90 	vmov	s15, r3
 800ab7a:	eeb0 0a67 	vmov.f32	s0, s15
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	7f7fffff 	.word	0x7f7fffff

0800ab8c <_ZNSt14numeric_limitsIfE6lowestEv>:
      lowest() noexcept { return -__FLT_MAX__; }
 800ab8c:	b480      	push	{r7}
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800ab94:	ee07 3a90 	vmov	s15, r3
 800ab98:	eeb0 0a67 	vmov.f32	s0, s15
 800ab9c:	46bd      	mov	sp, r7
 800ab9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba2:	4770      	bx	lr

0800aba4 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>:
inline T ActivationFunctionWithMinMax(T x, T output_activation_min,
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b084      	sub	sp, #16
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	ed87 0a03 	vstr	s0, [r7, #12]
 800abae:	edc7 0a02 	vstr	s1, [r7, #8]
 800abb2:	ed87 1a01 	vstr	s2, [r7, #4]
  return min(max(x, output_activation_min), output_activation_max);
 800abb6:	f107 0208 	add.w	r2, r7, #8
 800abba:	f107 030c 	add.w	r3, r7, #12
 800abbe:	4611      	mov	r1, r2
 800abc0:	4618      	mov	r0, r3
 800abc2:	f7fa fc09 	bl	80053d8 <_ZSt3maxIfERKT_S2_S2_>
 800abc6:	4602      	mov	r2, r0
 800abc8:	1d3b      	adds	r3, r7, #4
 800abca:	4619      	mov	r1, r3
 800abcc:	4610      	mov	r0, r2
 800abce:	f7fa fc1c 	bl	800540a <_ZSt3minIfERKT_S2_S2_>
 800abd2:	4603      	mov	r3, r0
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	ee07 3a90 	vmov	s15, r3
}
 800abda:	eeb0 0a67 	vmov.f32	s0, s15
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b084      	sub	sp, #16
 800abe8:	af00      	add	r7, sp, #0
 800abea:	4603      	mov	r3, r0
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
 800abf4:	2b01      	cmp	r3, #1
 800abf6:	d10b      	bne.n	800ac10 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 800abf8:	68bb      	ldr	r3, [r7, #8]
 800abfa:	f04f 0200 	mov.w	r2, #0
 800abfe:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 800ac00:	f7ff ffb6 	bl	800ab70 <_ZNSt14numeric_limitsIfE3maxEv>
 800ac04:	eef0 7a40 	vmov.f32	s15, s0
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 800ac0e:	e023      	b.n	800ac58 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
 800ac12:	2b03      	cmp	r3, #3
 800ac14:	d107      	bne.n	800ac26 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 800ac16:	68bb      	ldr	r3, [r7, #8]
 800ac18:	f04f 0200 	mov.w	r2, #0
 800ac1c:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	4a0f      	ldr	r2, [pc, #60]	; (800ac60 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 800ac22:	601a      	str	r2, [r3, #0]
}
 800ac24:	e018      	b.n	800ac58 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 800ac26:	7bfb      	ldrb	r3, [r7, #15]
 800ac28:	2b02      	cmp	r3, #2
 800ac2a:	d107      	bne.n	800ac3c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 800ac2c:	68bb      	ldr	r3, [r7, #8]
 800ac2e:	4a0d      	ldr	r2, [pc, #52]	; (800ac64 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 800ac30:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800ac38:	601a      	str	r2, [r3, #0]
}
 800ac3a:	e00d      	b.n	800ac58 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 800ac3c:	f7ff ffa6 	bl	800ab8c <_ZNSt14numeric_limitsIfE6lowestEv>
 800ac40:	eef0 7a40 	vmov.f32	s15, s0
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 800ac4a:	f7ff ff91 	bl	800ab70 <_ZNSt14numeric_limitsIfE3maxEv>
 800ac4e:	eef0 7a40 	vmov.f32	s15, s0
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	edc3 7a00 	vstr	s15, [r3]
}
 800ac58:	bf00      	nop
 800ac5a:	3710      	adds	r7, #16
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}
 800ac60:	40c00000 	.word	0x40c00000
 800ac64:	bf800000 	.word	0xbf800000

0800ac68 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>:
const T* GetTensorData(const TfLiteEvalTensor* tensor) {
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  TFLITE_DCHECK(tensor != nullptr);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d101      	bne.n	800ac7a <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor+0x12>
 800ac76:	f001 fc6d 	bl	800c554 <abort>
  return reinterpret_cast<const T*>(tensor->data.raw);
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	681b      	ldr	r3, [r3, #0]
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 800ac86:	b590      	push	{r4, r7, lr}
 800ac88:	b087      	sub	sp, #28
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	60f8      	str	r0, [r7, #12]
 800ac8e:	60b9      	str	r1, [r7, #8]
 800ac90:	607a      	str	r2, [r7, #4]
 800ac92:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 800ac94:	68b9      	ldr	r1, [r7, #8]
 800ac96:	68f8      	ldr	r0, [r7, #12]
 800ac98:	f7fe ff2a 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ac9c:	4604      	mov	r4, r0
 800ac9e:	6839      	ldr	r1, [r7, #0]
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f7fe ff25 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800aca6:	4603      	mov	r3, r0
 800aca8:	429c      	cmp	r4, r3
 800acaa:	d001      	beq.n	800acb0 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 800acac:	f001 fc52 	bl	800c554 <abort>
  return std::min(shape1.Dims(index1), shape2.Dims(index2));
 800acb0:	68b9      	ldr	r1, [r7, #8]
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f7fe ff1c 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800acb8:	4603      	mov	r3, r0
 800acba:	613b      	str	r3, [r7, #16]
 800acbc:	6839      	ldr	r1, [r7, #0]
 800acbe:	6878      	ldr	r0, [r7, #4]
 800acc0:	f7fe ff16 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800acc4:	4603      	mov	r3, r0
 800acc6:	617b      	str	r3, [r7, #20]
 800acc8:	f107 0214 	add.w	r2, r7, #20
 800accc:	f107 0310 	add.w	r3, r7, #16
 800acd0:	4611      	mov	r1, r2
 800acd2:	4618      	mov	r0, r3
 800acd4:	f7fa fe9a 	bl	8005a0c <_ZSt3minIlERKT_S2_S2_>
 800acd8:	4603      	mov	r3, r0
 800acda:	681b      	ldr	r3, [r3, #0]
}
 800acdc:	4618      	mov	r0, r3
 800acde:	371c      	adds	r7, #28
 800ace0:	46bd      	mov	sp, r7
 800ace2:	bd90      	pop	{r4, r7, pc}

0800ace4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
}

// Data is required to be contiguous, and so many operators can use either the
// full array flat size or the flat size with one dimension skipped (commonly
// the depth).
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 800ace4:	b580      	push	{r7, lr}
 800ace6:	b086      	sub	sp, #24
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 800acee:	6878      	ldr	r0, [r7, #4]
 800acf0:	f7fa ff09 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800acf4:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	db03      	blt.n	800ad04 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 800acfc:	683a      	ldr	r2, [r7, #0]
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	db01      	blt.n	800ad08 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 800ad04:	f001 fc26 	bl	800c554 <abort>
  const auto* dims_data = shape.DimsData();
 800ad08:	6878      	ldr	r0, [r7, #4]
 800ad0a:	f7fe ff16 	bl	8009b3a <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800ad0e:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 800ad10:	2301      	movs	r3, #1
 800ad12:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800ad14:	2300      	movs	r3, #0
 800ad16:	613b      	str	r3, [r7, #16]
 800ad18:	693a      	ldr	r2, [r7, #16]
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	429a      	cmp	r2, r3
 800ad1e:	da12      	bge.n	800ad46 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 800ad20:	693a      	ldr	r2, [r7, #16]
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	429a      	cmp	r2, r3
 800ad26:	d005      	beq.n	800ad34 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 800ad28:	693b      	ldr	r3, [r7, #16]
 800ad2a:	009b      	lsls	r3, r3, #2
 800ad2c:	68ba      	ldr	r2, [r7, #8]
 800ad2e:	4413      	add	r3, r2
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	e000      	b.n	800ad36 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 800ad34:	2301      	movs	r3, #1
 800ad36:	697a      	ldr	r2, [r7, #20]
 800ad38:	fb03 f302 	mul.w	r3, r3, r2
 800ad3c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 800ad3e:	693b      	ldr	r3, [r7, #16]
 800ad40:	3301      	adds	r3, #1
 800ad42:	613b      	str	r3, [r7, #16]
 800ad44:	e7e8      	b.n	800ad18 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  }
  return flat_size;
 800ad46:	697b      	ldr	r3, [r7, #20]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 800ad50:	b590      	push	{r4, r7, lr}
 800ad52:	b091      	sub	sp, #68	; 0x44
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	60f8      	str	r0, [r7, #12]
 800ad58:	60b9      	str	r1, [r7, #8]
 800ad5a:	607a      	str	r2, [r7, #4]
 800ad5c:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	69db      	ldr	r3, [r3, #28]
 800ad62:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	6a1b      	ldr	r3, [r3, #32]
 800ad68:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 800ad6a:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ad6c:	f7fa fecb 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ad70:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 800ad72:	6838      	ldr	r0, [r7, #0]
 800ad74:	f7fa fec7 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800ad78:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 800ad7a:	6a3b      	ldr	r3, [r7, #32]
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	4619      	mov	r1, r3
 800ad80:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 800ad82:	f7ff ffaf 	bl	800ace4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800ad86:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	1e99      	subs	r1, r3, #2
 800ad8c:	6a3b      	ldr	r3, [r7, #32]
 800ad8e:	3b01      	subs	r3, #1
                                       output_shape, output_dims_count - 1);
 800ad90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ad92:	6838      	ldr	r0, [r7, #0]
 800ad94:	f7ff ff77 	bl	800ac86 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800ad98:	6178      	str	r0, [r7, #20]
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	4619      	mov	r1, r3
 800ada0:	6838      	ldr	r0, [r7, #0]
 800ada2:	f7fe fea5 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800ada6:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 800ada8:	2300      	movs	r3, #0
 800adaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800adac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800adae:	69bb      	ldr	r3, [r7, #24]
 800adb0:	429a      	cmp	r2, r3
 800adb2:	da5f      	bge.n	800ae74 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800adb4:	2300      	movs	r3, #0
 800adb6:	63bb      	str	r3, [r7, #56]	; 0x38
 800adb8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	429a      	cmp	r2, r3
 800adbe:	da55      	bge.n	800ae6c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 800adc0:	f04f 0300 	mov.w	r3, #0
 800adc4:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800adc6:	2300      	movs	r3, #0
 800adc8:	633b      	str	r3, [r7, #48]	; 0x30
 800adca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	429a      	cmp	r2, r3
 800add0:	da21      	bge.n	800ae16 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 800add2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800add4:	693a      	ldr	r2, [r7, #16]
 800add6:	fb02 f203 	mul.w	r2, r2, r3
 800adda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800addc:	4413      	add	r3, r2
 800adde:	009b      	lsls	r3, r3, #2
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	4413      	add	r3, r2
 800ade4:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 800ade8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adea:	693a      	ldr	r2, [r7, #16]
 800adec:	fb02 f203 	mul.w	r2, r2, r3
 800adf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf2:	4413      	add	r3, r2
 800adf4:	009b      	lsls	r3, r3, #2
 800adf6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800adf8:	4413      	add	r3, r2
 800adfa:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 800adfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae02:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae0a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 800ae0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae10:	3301      	adds	r3, #1
 800ae12:	633b      	str	r3, [r7, #48]	; 0x30
 800ae14:	e7d9      	b.n	800adca <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 800ae16:	f04f 0300 	mov.w	r3, #0
 800ae1a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 800ae1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d005      	beq.n	800ae2e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 800ae22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae24:	009b      	lsls	r3, r3, #2
 800ae26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ae28:	4413      	add	r3, r2
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 800ae2e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800ae32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ae36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae3a:	697b      	ldr	r3, [r7, #20]
 800ae3c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ae3e:	fb02 f203 	mul.w	r2, r2, r3
 800ae42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae44:	4413      	add	r3, r2
 800ae46:	009b      	lsls	r3, r3, #2
 800ae48:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ae4a:	18d4      	adds	r4, r2, r3
 800ae4c:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 800ae50:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 800ae54:	eeb0 0a67 	vmov.f32	s0, s15
 800ae58:	f7ff fea4 	bl	800aba4 <_ZN6tflite28ActivationFunctionWithMinMaxIfEET_S1_S1_S1_>
 800ae5c:	eef0 7a40 	vmov.f32	s15, s0
 800ae60:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800ae64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ae66:	3301      	adds	r3, #1
 800ae68:	63bb      	str	r3, [r7, #56]	; 0x38
 800ae6a:	e7a5      	b.n	800adb8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 800ae6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ae6e:	3301      	adds	r3, #1
 800ae70:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae72:	e79b      	b.n	800adac <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 800ae74:	bf00      	nop
 800ae76:	3744      	adds	r7, #68	; 0x44
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd90      	pop	{r4, r7, pc}

0800ae7c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    uint8_t* output_data) {
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b096      	sub	sp, #88	; 0x58
 800ae80:	af00      	add	r7, sp, #0
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
 800ae88:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	689b      	ldr	r3, [r3, #8]
 800ae9a:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	691b      	ldr	r3, [r3, #16]
 800aea6:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	695b      	ldr	r3, [r3, #20]
 800aeac:	61bb      	str	r3, [r7, #24]
  const int32_t output_activation_max = params.quantized_activation_max;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	699b      	ldr	r3, [r3, #24]
 800aeb2:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800aeb4:	6838      	ldr	r0, [r7, #0]
 800aeb6:	f7fa fe26 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800aeba:	4603      	mov	r3, r0
 800aebc:	2b01      	cmp	r3, #1
 800aebe:	dc01      	bgt.n	800aec4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 800aec0:	f001 fb48 	bl	800c554 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 800aec4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aec6:	f7fa fe1e 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800aeca:	4603      	mov	r3, r0
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dc01      	bgt.n	800aed4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 800aed0:	f001 fb40 	bl	800c554 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800aed4:	69ba      	ldr	r2, [r7, #24]
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	dd01      	ble.n	800aee0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 800aedc:	f001 fb3a 	bl	800c554 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800aee0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aee2:	f7fa fe10 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800aee6:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 800aee8:	6838      	ldr	r0, [r7, #0]
 800aeea:	f7fa fe0c 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800aeee:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800aef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aef2:	3b01      	subs	r3, #1
 800aef4:	4619      	mov	r1, r3
 800aef6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800aef8:	f7ff fef4 	bl	800ace4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800aefc:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800aefe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af00:	1e99      	subs	r1, r3, #2
 800af02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af04:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 800af06:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800af08:	6838      	ldr	r0, [r7, #0]
 800af0a:	f7ff febc 	bl	800ac86 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800af0e:	62b8      	str	r0, [r7, #40]	; 0x28
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800af10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af12:	3b01      	subs	r3, #1
 800af14:	4619      	mov	r1, r3
 800af16:	6838      	ldr	r0, [r7, #0]
 800af18:	f7fe fdea 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800af1c:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 800af1e:	2300      	movs	r3, #0
 800af20:	657b      	str	r3, [r7, #84]	; 0x54
 800af22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800af24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af26:	429a      	cmp	r2, r3
 800af28:	da73      	bge.n	800b012 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800af2a:	2300      	movs	r3, #0
 800af2c:	653b      	str	r3, [r7, #80]	; 0x50
 800af2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800af30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af32:	429a      	cmp	r2, r3
 800af34:	da69      	bge.n	800b00a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32_t acc = 0;
 800af36:	2300      	movs	r3, #0
 800af38:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800af3a:	2300      	movs	r3, #0
 800af3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800af40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af42:	429a      	cmp	r2, r3
 800af44:	da24      	bge.n	800af90 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32_t input_val = input_data[b * accum_depth + d];
 800af46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af4a:	fb02 f203 	mul.w	r2, r2, r3
 800af4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af50:	4413      	add	r3, r2
 800af52:	461a      	mov	r2, r3
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	4413      	add	r3, r2
 800af58:	781b      	ldrb	r3, [r3, #0]
 800af5a:	623b      	str	r3, [r7, #32]
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800af5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af60:	fb02 f203 	mul.w	r2, r2, r3
 800af64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af66:	4413      	add	r3, r2
 800af68:	461a      	mov	r2, r3
 800af6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800af6c:	4413      	add	r3, r2
 800af6e:	781b      	ldrb	r3, [r3, #0]
 800af70:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800af72:	69fa      	ldr	r2, [r7, #28]
 800af74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800af76:	4413      	add	r3, r2
 800af78:	6a39      	ldr	r1, [r7, #32]
 800af7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800af7c:	440a      	add	r2, r1
 800af7e:	fb02 f203 	mul.w	r2, r2, r3
 800af82:	693b      	ldr	r3, [r7, #16]
 800af84:	4413      	add	r3, r2
 800af86:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 800af88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af8a:	3301      	adds	r3, #1
 800af8c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800af8e:	e7d6      	b.n	800af3e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 800af90:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800af92:	2b00      	cmp	r3, #0
 800af94:	d007      	beq.n	800afa6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 800af96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800af9c:	4413      	add	r3, r2
 800af9e:	681a      	ldr	r2, [r3, #0]
 800afa0:	693b      	ldr	r3, [r7, #16]
 800afa2:	4413      	add	r3, r2
 800afa4:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800afaa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800afac:	4618      	mov	r0, r3
 800afae:	f7fe fe2f 	bl	8009c10 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800afb2:	4603      	mov	r3, r0
 800afb4:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800afba:	4413      	add	r3, r2
 800afbc:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 800afbe:	f107 0218 	add.w	r2, r7, #24
 800afc2:	f107 0310 	add.w	r3, r7, #16
 800afc6:	4611      	mov	r1, r2
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fa fd33 	bl	8005a34 <_ZSt3maxIlERKT_S2_S2_>
 800afce:	4603      	mov	r3, r0
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 800afd4:	f107 0214 	add.w	r2, r7, #20
 800afd8:	f107 0310 	add.w	r3, r7, #16
 800afdc:	4611      	mov	r1, r2
 800afde:	4618      	mov	r0, r3
 800afe0:	f7fa fd14 	bl	8005a0c <_ZSt3minIlERKT_S2_S2_>
 800afe4:	4603      	mov	r3, r0
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8_t>(acc);
 800afea:	6939      	ldr	r1, [r7, #16]
 800afec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800afee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aff0:	fb02 f203 	mul.w	r2, r2, r3
 800aff4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800aff6:	4413      	add	r3, r2
 800aff8:	461a      	mov	r2, r3
 800affa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800affc:	4413      	add	r3, r2
 800affe:	b2ca      	uxtb	r2, r1
 800b000:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b002:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b004:	3301      	adds	r3, #1
 800b006:	653b      	str	r3, [r7, #80]	; 0x50
 800b008:	e791      	b.n	800af2e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 800b00a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b00c:	3301      	adds	r3, #1
 800b00e:	657b      	str	r3, [r7, #84]	; 0x54
 800b010:	e787      	b.n	800af22 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 800b012:	bf00      	nop
 800b014:	3758      	adds	r7, #88	; 0x58
 800b016:	46bd      	mov	sp, r7
 800b018:	bd80      	pop	{r7, pc}

0800b01a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8_t* input_data, const RuntimeShape& filter_shape,
    const uint8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int16_t* output_data) {
 800b01a:	b580      	push	{r7, lr}
 800b01c:	b098      	sub	sp, #96	; 0x60
 800b01e:	af00      	add	r7, sp, #0
 800b020:	60f8      	str	r0, [r7, #12]
 800b022:	60b9      	str	r1, [r7, #8]
 800b024:	607a      	str	r2, [r7, #4]
 800b026:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	653b      	str	r3, [r7, #80]	; 0x50
  const int32_t filter_offset = params.weights_offset;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	685b      	ldr	r3, [r3, #4]
 800b032:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32_t output_offset = params.output_offset;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	689b      	ldr	r3, [r3, #8]
 800b038:	623b      	str	r3, [r7, #32]
  const int32_t output_multiplier = params.output_multiplier;
 800b03a:	68fb      	ldr	r3, [r7, #12]
 800b03c:	68db      	ldr	r3, [r3, #12]
 800b03e:	64bb      	str	r3, [r7, #72]	; 0x48
  const int output_shift = params.output_shift;
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	691b      	ldr	r3, [r3, #16]
 800b044:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_activation_min = params.quantized_activation_min;
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	695b      	ldr	r3, [r3, #20]
 800b04a:	61fb      	str	r3, [r7, #28]
  const int32_t output_activation_max = params.quantized_activation_max;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	699b      	ldr	r3, [r3, #24]
 800b050:	61bb      	str	r3, [r7, #24]

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800b052:	69fa      	ldr	r2, [r7, #28]
 800b054:	69bb      	ldr	r3, [r7, #24]
 800b056:	429a      	cmp	r2, r3
 800b058:	dd01      	ble.n	800b05e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 800b05a:	f001 fa7b 	bl	800c554 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 800b05e:	6a3b      	ldr	r3, [r7, #32]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d001      	beq.n	800b068 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 800b064:	f001 fa76 	bl	800c554 <abort>
  // TODO(b/62193649): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 800b068:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b06a:	f7fa fd4c 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b06e:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_dim_count = filter_shape.DimensionsCount();
 800b070:	6838      	ldr	r0, [r7, #0]
 800b072:	f7fa fd48 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b076:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 800b078:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b07a:	3b01      	subs	r3, #1
 800b07c:	4619      	mov	r1, r3
 800b07e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b080:	f7ff fe30 	bl	800ace4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 800b084:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 800b086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b088:	1e99      	subs	r1, r3, #2
 800b08a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b08c:	3b01      	subs	r3, #1
                                       output_shape, output_dim_count - 1);
 800b08e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800b090:	6838      	ldr	r0, [r7, #0]
 800b092:	f7ff fdf8 	bl	800ac86 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 800b096:	6378      	str	r0, [r7, #52]	; 0x34
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800b098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b09a:	3b01      	subs	r3, #1
 800b09c:	4619      	mov	r1, r3
 800b09e:	6838      	ldr	r0, [r7, #0]
 800b0a0:	f7fe fd26 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b0a4:	6338      	str	r0, [r7, #48]	; 0x30
  for (int b = 0; b < batches; ++b) {
 800b0a6:	2300      	movs	r3, #0
 800b0a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b0aa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b0ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	da7c      	bge.n	800b1ac <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b0b2:	2300      	movs	r3, #0
 800b0b4:	65bb      	str	r3, [r7, #88]	; 0x58
 800b0b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	da72      	bge.n	800b1a4 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32_t accum = bias_data[out_c];
 800b0be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0c0:	009b      	lsls	r3, r3, #2
 800b0c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800b0c4:	4413      	add	r3, r2
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	657b      	str	r3, [r7, #84]	; 0x54
 800b0ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b0d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	da2c      	bge.n	800b130 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16_t input_val = input_data[b * accum_depth + d] + input_offset;
 800b0d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b0d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0da:	fb02 f203 	mul.w	r2, r2, r3
 800b0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b0e0:	4413      	add	r3, r2
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	4413      	add	r3, r2
 800b0e8:	781b      	ldrb	r3, [r3, #0]
 800b0ea:	b29a      	uxth	r2, r3
 800b0ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	4413      	add	r3, r2
 800b0f2:	b29b      	uxth	r3, r3
 800b0f4:	85fb      	strh	r3, [r7, #46]	; 0x2e
        int16_t filter_val =
            filter_data[out_c * accum_depth + d] + filter_offset;
 800b0f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b0f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b0fa:	fb02 f203 	mul.w	r2, r2, r3
 800b0fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b100:	4413      	add	r3, r2
 800b102:	461a      	mov	r2, r3
 800b104:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b106:	4413      	add	r3, r2
 800b108:	781b      	ldrb	r3, [r3, #0]
 800b10a:	b29a      	uxth	r2, r3
 800b10c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b10e:	b29b      	uxth	r3, r3
 800b110:	4413      	add	r3, r2
 800b112:	b29b      	uxth	r3, r3
        int16_t filter_val =
 800b114:	85bb      	strh	r3, [r7, #44]	; 0x2c
        accum += filter_val * input_val;
 800b116:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800b11a:	f9b7 202e 	ldrsh.w	r2, [r7, #46]	; 0x2e
 800b11e:	fb02 f203 	mul.w	r2, r2, r3
 800b122:	697b      	ldr	r3, [r7, #20]
 800b124:	4413      	add	r3, r2
 800b126:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800b128:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b12a:	3301      	adds	r3, #1
 800b12c:	657b      	str	r3, [r7, #84]	; 0x54
 800b12e:	e7ce      	b.n	800b0ce <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32_t accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 800b130:	697b      	ldr	r3, [r7, #20]
 800b132:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b134:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800b136:	4618      	mov	r0, r3
 800b138:	f7fe fd6a 	bl	8009c10 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800b13c:	4603      	mov	r3, r0
      accum =
 800b13e:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16_t, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 800b140:	69fa      	ldr	r2, [r7, #28]
 800b142:	6a3b      	ldr	r3, [r7, #32]
 800b144:	1ad3      	subs	r3, r2, r3
 800b146:	627b      	str	r3, [r7, #36]	; 0x24
 800b148:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800b14c:	f107 0314 	add.w	r3, r7, #20
 800b150:	4611      	mov	r1, r2
 800b152:	4618      	mov	r0, r3
 800b154:	f7fa fc6e 	bl	8005a34 <_ZSt3maxIlERKT_S2_S2_>
 800b158:	4603      	mov	r3, r0
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 800b15e:	69ba      	ldr	r2, [r7, #24]
 800b160:	6a3b      	ldr	r3, [r7, #32]
 800b162:	1ad3      	subs	r3, r2, r3
 800b164:	62bb      	str	r3, [r7, #40]	; 0x28
 800b166:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800b16a:	f107 0314 	add.w	r3, r7, #20
 800b16e:	4611      	mov	r1, r2
 800b170:	4618      	mov	r0, r3
 800b172:	f7fa fc4b 	bl	8005a0c <_ZSt3minIlERKT_S2_S2_>
 800b176:	4603      	mov	r3, r0
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 800b17c:	697a      	ldr	r2, [r7, #20]
 800b17e:	6a3b      	ldr	r3, [r7, #32]
 800b180:	4413      	add	r3, r2
 800b182:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 800b184:	6979      	ldr	r1, [r7, #20]
 800b186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b188:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b18a:	fb02 f203 	mul.w	r2, r2, r3
 800b18e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b190:	4413      	add	r3, r2
 800b192:	005b      	lsls	r3, r3, #1
 800b194:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800b196:	4413      	add	r3, r2
 800b198:	b20a      	sxth	r2, r1
 800b19a:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b19c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b19e:	3301      	adds	r3, #1
 800b1a0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b1a2:	e788      	b.n	800b0b6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 800b1a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b1aa:	e77e      	b.n	800b0aa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 800b1ac:	bf00      	nop
 800b1ae:	3760      	adds	r7, #96	; 0x60
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32_t* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b096      	sub	sp, #88	; 0x58
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	60f8      	str	r0, [r7, #12]
 800b1bc:	60b9      	str	r1, [r7, #8]
 800b1be:	607a      	str	r2, [r7, #4]
 800b1c0:	603b      	str	r3, [r7, #0]
  const int32_t input_offset = params.input_offset;
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32_t filter_offset = params.weights_offset;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	685b      	ldr	r3, [r3, #4]
 800b1cc:	647b      	str	r3, [r7, #68]	; 0x44
  const int32_t output_offset = params.output_offset;
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	689b      	ldr	r3, [r3, #8]
 800b1d2:	643b      	str	r3, [r7, #64]	; 0x40
  const int32_t output_multiplier = params.output_multiplier;
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	68db      	ldr	r3, [r3, #12]
 800b1d8:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	691b      	ldr	r3, [r3, #16]
 800b1de:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32_t output_activation_min = params.quantized_activation_min;
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	695b      	ldr	r3, [r3, #20]
 800b1e4:	623b      	str	r3, [r7, #32]
  const int32_t output_activation_max = params.quantized_activation_max;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	699b      	ldr	r3, [r3, #24]
 800b1ea:	61fb      	str	r3, [r7, #28]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 800b1ec:	6838      	ldr	r0, [r7, #0]
 800b1ee:	f7fa fc8a 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b01      	cmp	r3, #1
 800b1f6:	dc01      	bgt.n	800b1fc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 800b1f8:	f001 f9ac 	bl	800c554 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 800b1fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b1fe:	f7fa fc82 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b202:	4603      	mov	r3, r0
 800b204:	2b02      	cmp	r3, #2
 800b206:	d001      	beq.n	800b20c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 800b208:	f001 f9a4 	bl	800c554 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 800b20c:	6a3a      	ldr	r2, [r7, #32]
 800b20e:	69fb      	ldr	r3, [r7, #28]
 800b210:	429a      	cmp	r2, r3
 800b212:	dd01      	ble.n	800b218 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 800b214:	f001 f99e 	bl	800c554 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 800b218:	6838      	ldr	r0, [r7, #0]
 800b21a:	f7fa fc74 	bl	8005b06 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800b21e:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 800b220:	2100      	movs	r1, #0
 800b222:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b224:	f7fe fc64 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b228:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 800b22a:	2101      	movs	r1, #1
 800b22c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800b22e:	f7fe fc5f 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b232:	4603      	mov	r3, r0
 800b234:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 800b236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b238:	3b02      	subs	r3, #2
 800b23a:	4619      	mov	r1, r3
 800b23c:	6838      	ldr	r0, [r7, #0]
 800b23e:	f7fe fc57 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b242:	4602      	mov	r2, r0
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	429a      	cmp	r2, r3
 800b248:	da01      	bge.n	800b24e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x9a>
 800b24a:	f001 f983 	bl	800c554 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 800b24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b250:	3b01      	subs	r3, #1
 800b252:	4619      	mov	r1, r3
 800b254:	6838      	ldr	r0, [r7, #0]
 800b256:	f7fe fc4b 	bl	8009af0 <_ZNK6tflite12RuntimeShape4DimsEi>
 800b25a:	62f8      	str	r0, [r7, #44]	; 0x2c
  for (int b = 0; b < batches; ++b) {
 800b25c:	2300      	movs	r3, #0
 800b25e:	657b      	str	r3, [r7, #84]	; 0x54
 800b260:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b264:	429a      	cmp	r2, r3
 800b266:	da75      	bge.n	800b354 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x1a0>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b268:	2300      	movs	r3, #0
 800b26a:	653b      	str	r3, [r7, #80]	; 0x50
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b270:	429a      	cmp	r2, r3
 800b272:	da6b      	bge.n	800b34c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x198>
      int32_t acc = 0;
 800b274:	2300      	movs	r3, #0
 800b276:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800b278:	2300      	movs	r3, #0
 800b27a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b27c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b27e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b280:	429a      	cmp	r2, r3
 800b282:	da26      	bge.n	800b2d2 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11e>
        int32_t input_val = input_data[b * accum_depth + d];
 800b284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b288:	fb02 f203 	mul.w	r2, r2, r3
 800b28c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b28e:	4413      	add	r3, r2
 800b290:	461a      	mov	r2, r3
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	4413      	add	r3, r2
 800b296:	f993 3000 	ldrsb.w	r3, [r3]
 800b29a:	62bb      	str	r3, [r7, #40]	; 0x28
        int32_t filter_val = filter_data[out_c * accum_depth + d];
 800b29c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b29e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b2a0:	fb02 f203 	mul.w	r2, r2, r3
 800b2a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2a6:	4413      	add	r3, r2
 800b2a8:	461a      	mov	r2, r3
 800b2aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b2ac:	4413      	add	r3, r2
 800b2ae:	f993 3000 	ldrsb.w	r3, [r3]
 800b2b2:	627b      	str	r3, [r7, #36]	; 0x24
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 800b2b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b2b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b2b8:	4413      	add	r3, r2
 800b2ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b2bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b2be:	440a      	add	r2, r1
 800b2c0:	fb02 f203 	mul.w	r2, r2, r3
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 800b2ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b2d0:	e7d4      	b.n	800b27c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc8>
      }
      if (bias_data) {
 800b2d2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d007      	beq.n	800b2e8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x134>
        acc += bias_data[out_c];
 800b2d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b2de:	4413      	add	r3, r2
 800b2e0:	681a      	ldr	r2, [r3, #0]
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	4413      	add	r3, r2
 800b2e6:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b2ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b2ee:	4618      	mov	r0, r3
 800b2f0:	f7fe fc8e 	bl	8009c10 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 800b2f4:	4603      	mov	r3, r0
 800b2f6:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 800b2f8:	697a      	ldr	r2, [r7, #20]
 800b2fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b2fc:	4413      	add	r3, r2
 800b2fe:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 800b300:	f107 0220 	add.w	r2, r7, #32
 800b304:	f107 0314 	add.w	r3, r7, #20
 800b308:	4611      	mov	r1, r2
 800b30a:	4618      	mov	r0, r3
 800b30c:	f7fa fb92 	bl	8005a34 <_ZSt3maxIlERKT_S2_S2_>
 800b310:	4603      	mov	r3, r0
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 800b316:	f107 021c 	add.w	r2, r7, #28
 800b31a:	f107 0314 	add.w	r3, r7, #20
 800b31e:	4611      	mov	r1, r2
 800b320:	4618      	mov	r0, r3
 800b322:	f7fa fb73 	bl	8005a0c <_ZSt3minIlERKT_S2_S2_>
 800b326:	4603      	mov	r3, r0
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 800b32c:	6979      	ldr	r1, [r7, #20]
 800b32e:	69bb      	ldr	r3, [r7, #24]
 800b330:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b332:	fb02 f203 	mul.w	r2, r2, r3
 800b336:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b338:	4413      	add	r3, r2
 800b33a:	461a      	mov	r2, r3
 800b33c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b33e:	4413      	add	r3, r2
 800b340:	b24a      	sxtb	r2, r1
 800b342:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 800b344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b346:	3301      	adds	r3, #1
 800b348:	653b      	str	r3, [r7, #80]	; 0x50
 800b34a:	e78f      	b.n	800b26c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb8>
  for (int b = 0; b < batches; ++b) {
 800b34c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b34e:	3301      	adds	r3, #1
 800b350:	657b      	str	r3, [r7, #84]	; 0x54
 800b352:	e785      	b.n	800b260 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xac>
    }
  }
}
 800b354:	bf00      	nop
 800b356:	3758      	adds	r7, #88	; 0x58
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 800b35c:	b590      	push	{r4, r7, lr}
 800b35e:	b08d      	sub	sp, #52	; 0x34
 800b360:	af02      	add	r7, sp, #8
 800b362:	60f8      	str	r0, [r7, #12]
 800b364:	607b      	str	r3, [r7, #4]
 800b366:	460b      	mov	r3, r1
 800b368:	72fb      	strb	r3, [r7, #11]
 800b36a:	4613      	mov	r3, r2
 800b36c:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 800b36e:	2300      	movs	r3, #0
 800b370:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 800b374:	7abb      	ldrb	r3, [r7, #10]
 800b376:	2b01      	cmp	r3, #1
 800b378:	d04d      	beq.n	800b416 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xba>
    double real_multiplier = 0.0;
 800b37a:	f04f 0300 	mov.w	r3, #0
 800b37e:	f04f 0400 	mov.w	r4, #0
 800b382:	e9c7 3406 	strd	r3, r4, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800b386:	f107 0318 	add.w	r3, r7, #24
 800b38a:	9301      	str	r3, [sp, #4]
 800b38c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b392:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b394:	6879      	ldr	r1, [r7, #4]
 800b396:	68f8      	ldr	r0, [r7, #12]
 800b398:	f7fa f956 	bl	8005648 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800b39c:	4603      	mov	r3, r0
 800b39e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800b3a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d002      	beq.n	800b3b0 <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0x54>
 800b3aa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800b3ae:	e034      	b.n	800b41a <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xbe>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 800b3b0:	ed97 7b06 	vldr	d7, [r7, #24]
 800b3b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3b6:	f107 0214 	add.w	r2, r7, #20
 800b3ba:	4611      	mov	r1, r2
 800b3bc:	4618      	mov	r0, r3
 800b3be:	eeb0 0a47 	vmov.f32	s0, s14
 800b3c2:	eef0 0a67 	vmov.f32	s1, s15
 800b3c6:	f7f9 ff7b 	bl	80052c0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	425a      	negs	r2, r3
 800b3ce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3d0:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800b3d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3d4:	f103 0208 	add.w	r2, r3, #8
 800b3d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3da:	330c      	adds	r3, #12
 800b3dc:	7af9      	ldrb	r1, [r7, #11]
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	4613      	mov	r3, r2
 800b3e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3e4:	68f8      	ldr	r0, [r7, #12]
 800b3e6:	f7fa fabd 	bl	8005964 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800b3ea:	4603      	mov	r3, r0
 800b3ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800b3f0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b3f4:	2b00      	cmp	r3, #0
 800b3f6:	d002      	beq.n	800b3fe <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xa2>
 800b3f8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800b3fc:	e00d      	b.n	800b41a <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE+0xbe>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));

    data->input_zero_point = input->params.zero_point;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	691a      	ldr	r2, [r3, #16]
 800b402:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b404:	615a      	str	r2, [r3, #20]
    data->filter_zero_point = filter->params.zero_point;
 800b406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b408:	691a      	ldr	r2, [r3, #16]
 800b40a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b40c:	619a      	str	r2, [r3, #24]
    data->output_zero_point = output->params.zero_point;
 800b40e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b410:	691a      	ldr	r2, [r3, #16]
 800b412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b414:	61da      	str	r2, [r3, #28]
  }
  return status;
 800b416:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b41a:	4618      	mov	r0, r3
 800b41c:	372c      	adds	r7, #44	; 0x2c
 800b41e:	46bd      	mov	sp, r7
 800b420:	bd90      	pop	{r4, r7, pc}

0800b422 <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 800b422:	b580      	push	{r7, lr}
 800b424:	b084      	sub	sp, #16
 800b426:	af00      	add	r7, sp, #0
 800b428:	60f8      	str	r0, [r7, #12]
 800b42a:	60b9      	str	r1, [r7, #8]
 800b42c:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b432:	2b00      	cmp	r3, #0
 800b434:	d101      	bne.n	800b43a <_ZN6tflite12_GLOBAL__N_14InitEP13TfLiteContextPKcj+0x18>
 800b436:	f001 f88d 	bl	800c554 <abort>
  return context->AllocatePersistentBuffer(context, sizeof(OpData));
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b43e:	2120      	movs	r1, #32
 800b440:	68f8      	ldr	r0, [r7, #12]
 800b442:	4798      	blx	r3
 800b444:	4603      	mov	r3, r0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3710      	adds	r7, #16
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
	...

0800b450 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 800b450:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b452:	b08d      	sub	sp, #52	; 0x34
 800b454:	af04      	add	r7, sp, #16
 800b456:	6078      	str	r0, [r7, #4]
 800b458:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	691b      	ldr	r3, [r3, #16]
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d101      	bne.n	800b466 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 800b462:	f001 f877 	bl	800c554 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	695b      	ldr	r3, [r3, #20]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d101      	bne.n	800b472 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 800b46e:	f001 f871 	bl	800c554 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	691b      	ldr	r3, [r3, #16]
 800b476:	61fb      	str	r3, [r7, #28]
  const auto params =
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	695b      	ldr	r3, [r3, #20]
 800b47c:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	2200      	movs	r2, #0
 800b482:	6839      	ldr	r1, [r7, #0]
 800b484:	4618      	mov	r0, r3
 800b486:	f7fa f89f 	bl	80055c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800b48a:	6178      	str	r0, [r7, #20]
  TF_LITE_ENSURE(context, input != nullptr);
 800b48c:	697b      	ldr	r3, [r7, #20]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d10a      	bne.n	800b4a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x58>
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	695c      	ldr	r4, [r3, #20]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	4b3e      	ldr	r3, [pc, #248]	; (800b594 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x144>)
 800b49a:	9300      	str	r3, [sp, #0]
 800b49c:	235c      	movs	r3, #92	; 0x5c
 800b49e:	4a3e      	ldr	r2, [pc, #248]	; (800b598 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 800b4a0:	493e      	ldr	r1, [pc, #248]	; (800b59c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800b4a2:	47a0      	blx	r4
 800b4a4:	2301      	movs	r3, #1
 800b4a6:	e071      	b.n	800b58c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2201      	movs	r2, #1
 800b4ac:	6839      	ldr	r1, [r7, #0]
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fa f88a 	bl	80055c8 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 800b4b4:	6138      	str	r0, [r7, #16]
  TF_LITE_ENSURE(context, filter != nullptr);
 800b4b6:	693b      	ldr	r3, [r7, #16]
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d10a      	bne.n	800b4d2 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x82>
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	695c      	ldr	r4, [r3, #20]
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	4b37      	ldr	r3, [pc, #220]	; (800b5a0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x150>)
 800b4c4:	9300      	str	r3, [sp, #0]
 800b4c6:	235e      	movs	r3, #94	; 0x5e
 800b4c8:	4a33      	ldr	r2, [pc, #204]	; (800b598 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 800b4ca:	4934      	ldr	r1, [pc, #208]	; (800b59c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800b4cc:	47a0      	blx	r4
 800b4ce:	2301      	movs	r3, #1
 800b4d0:	e05c      	b.n	800b58c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2202      	movs	r2, #2
 800b4d6:	6839      	ldr	r1, [r7, #0]
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7fa f8a4 	bl	8005626 <_ZN6tflite22GetOptionalInputTensorEPK13TfLiteContextPK10TfLiteNodei>
 800b4de:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	6839      	ldr	r1, [r7, #0]
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f7fa f87e 	bl	80055e8 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 800b4ec:	60b8      	str	r0, [r7, #8]
  TF_LITE_ENSURE(context, output != nullptr);
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d10a      	bne.n	800b50a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xba>
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	695c      	ldr	r4, [r3, #20]
 800b4f8:	6878      	ldr	r0, [r7, #4]
 800b4fa:	4b2a      	ldr	r3, [pc, #168]	; (800b5a4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x154>)
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	2361      	movs	r3, #97	; 0x61
 800b500:	4a25      	ldr	r2, [pc, #148]	; (800b598 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 800b502:	4926      	ldr	r1, [pc, #152]	; (800b59c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x14c>)
 800b504:	47a0      	blx	r4
 800b506:	2301      	movs	r3, #1
 800b508:	e040      	b.n	800b58c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	781a      	ldrb	r2, [r3, #0]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	781b      	ldrb	r3, [r3, #0]
 800b512:	429a      	cmp	r2, r3
 800b514:	d01b      	beq.n	800b54e <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0xfe>
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	695c      	ldr	r4, [r3, #20]
 800b51a:	687d      	ldr	r5, [r7, #4]
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	781b      	ldrb	r3, [r3, #0]
 800b520:	4618      	mov	r0, r3
 800b522:	f7f8 ff49 	bl	80043b8 <TfLiteTypeGetName>
 800b526:	4606      	mov	r6, r0
 800b528:	68bb      	ldr	r3, [r7, #8]
 800b52a:	781b      	ldrb	r3, [r3, #0]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7f8 ff43 	bl	80043b8 <TfLiteTypeGetName>
 800b532:	4603      	mov	r3, r0
 800b534:	9303      	str	r3, [sp, #12]
 800b536:	9602      	str	r6, [sp, #8]
 800b538:	4b1b      	ldr	r3, [pc, #108]	; (800b5a8 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x158>)
 800b53a:	9301      	str	r3, [sp, #4]
 800b53c:	4b1b      	ldr	r3, [pc, #108]	; (800b5ac <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x15c>)
 800b53e:	9300      	str	r3, [sp, #0]
 800b540:	2363      	movs	r3, #99	; 0x63
 800b542:	4a15      	ldr	r2, [pc, #84]	; (800b598 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x148>)
 800b544:	491a      	ldr	r1, [pc, #104]	; (800b5b0 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x160>)
 800b546:	4628      	mov	r0, r5
 800b548:	47a0      	blx	r4
 800b54a:	2301      	movs	r3, #1
 800b54c:	e01e      	b.n	800b58c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 800b54e:	697b      	ldr	r3, [r7, #20]
 800b550:	781a      	ldrb	r2, [r3, #0]
 800b552:	693b      	ldr	r3, [r7, #16]
 800b554:	781b      	ldrb	r3, [r3, #0]
 800b556:	429a      	cmp	r2, r3
 800b558:	d007      	beq.n	800b56a <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x11a>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	695b      	ldr	r3, [r3, #20]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	4914      	ldr	r1, [pc, #80]	; (800b5b4 <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x164>)
 800b562:	4610      	mov	r0, r2
 800b564:	4798      	blx	r3
 800b566:	2301      	movs	r3, #1
 800b568:	e010      	b.n	800b58c <_ZN6tflite12_GLOBAL__N_17PrepareEP13TfLiteContextP10TfLiteNode+0x13c>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	69bb      	ldr	r3, [r7, #24]
 800b56e:	7819      	ldrb	r1, [r3, #0]
 800b570:	697b      	ldr	r3, [r7, #20]
 800b572:	781a      	ldrb	r2, [r3, #0]
                         filter, bias, output, data);
 800b574:	69fb      	ldr	r3, [r7, #28]
 800b576:	9303      	str	r3, [sp, #12]
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	9302      	str	r3, [sp, #8]
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	9301      	str	r3, [sp, #4]
 800b580:	693b      	ldr	r3, [r7, #16]
 800b582:	9300      	str	r3, [sp, #0]
 800b584:	697b      	ldr	r3, [r7, #20]
 800b586:	f7ff fee9 	bl	800b35c <_ZN6tflite12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorS7_S7_PS5_PNS0_6OpDataE>
 800b58a:	4603      	mov	r3, r0
}
 800b58c:	4618      	mov	r0, r3
 800b58e:	3724      	adds	r7, #36	; 0x24
 800b590:	46bd      	mov	sp, r7
 800b592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b594:	08011998 	.word	0x08011998
 800b598:	0801193c 	.word	0x0801193c
 800b59c:	08011980 	.word	0x08011980
 800b5a0:	080119ac 	.word	0x080119ac
 800b5a4:	080119c0 	.word	0x080119c0
 800b5a8:	080119f0 	.word	0x080119f0
 800b5ac:	08011a00 	.word	0x08011a00
 800b5b0:	080119d4 	.word	0x080119d4
 800b5b4:	08011a0c 	.word	0x08011a0c

0800b5b8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:
TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data,
                               const TfLiteEvalTensor* input,
                               const TfLiteEvalTensor* filter,
                               const TfLiteEvalTensor* bias,
                               TfLiteEvalTensor* output) {
 800b5b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b5ba:	b0ad      	sub	sp, #180	; 0xb4
 800b5bc:	af06      	add	r7, sp, #24
 800b5be:	60f8      	str	r0, [r7, #12]
 800b5c0:	60b9      	str	r1, [r7, #8]
 800b5c2:	607a      	str	r2, [r7, #4]
 800b5c4:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -data.input_zero_point;
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	695b      	ldr	r3, [r3, #20]
 800b5ca:	425b      	negs	r3, r3
 800b5cc:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -data.filter_zero_point;
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	699b      	ldr	r3, [r3, #24]
 800b5d2:	425b      	negs	r3, r3
 800b5d4:	617b      	str	r3, [r7, #20]
  op_params.output_offset = data.output_zero_point;
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	69db      	ldr	r3, [r3, #28]
 800b5da:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	685b      	ldr	r3, [r3, #4]
 800b5e6:	425b      	negs	r3, r3
 800b5e8:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	689b      	ldr	r3, [r3, #8]
 800b5ee:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	68db      	ldr	r3, [r3, #12]
 800b5f4:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, tflite::micro::GetTensorShape(input),
 800b5f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	f000 fa6e 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 800b602:	6838      	ldr	r0, [r7, #0]
 800b604:	f7ff f848 	bl	800a698 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800b608:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<int8_t>(input),
      tflite::micro::GetTensorShape(filter),
 800b60a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b60e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800b612:	4618      	mov	r0, r3
 800b614:	f000 fa63 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 800b618:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 800b61c:	f7ff f83c 	bl	800a698 <_ZN6tflite5micro13GetTensorDataIaEEPKT_PK16TfLiteEvalTensor>
 800b620:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<int8_t>(filter),
      tflite::micro::GetTensorShape(bias),
 800b622:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b626:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 800b62a:	4618      	mov	r0, r3
 800b62c:	f000 fa57 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 800b630:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 800b634:	f7ff fb18 	bl	800ac68 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800b638:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<int32_t>(bias),
      tflite::micro::GetTensorShape(output),
 800b63a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b63e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b642:	4618      	mov	r0, r3
 800b644:	f000 fa4b 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  reference_integer_ops::FullyConnected(
 800b648:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800b64c:	f7ff f833 	bl	800a6b6 <_ZN6tflite5micro13GetTensorDataIaEEPT_P16TfLiteEvalTensor>
 800b650:	4603      	mov	r3, r0
 800b652:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800b656:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800b65a:	f107 0010 	add.w	r0, r7, #16
 800b65e:	9304      	str	r3, [sp, #16]
 800b660:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b664:	9303      	str	r3, [sp, #12]
 800b666:	9502      	str	r5, [sp, #8]
 800b668:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b66c:	9301      	str	r3, [sp, #4]
 800b66e:	9400      	str	r4, [sp, #0]
 800b670:	4613      	mov	r3, r2
 800b672:	4632      	mov	r2, r6
 800b674:	f7ff fd9e 	bl	800b1b4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      tflite::micro::GetTensorShape(output),
 800b678:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800b67c:	4618      	mov	r0, r3
 800b67e:	f7fa fa2c 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 800b682:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800b686:	4618      	mov	r0, r3
 800b688:	f7fa fa27 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 800b68c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800b690:	4618      	mov	r0, r3
 800b692:	f7fa fa22 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 800b696:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b69a:	4618      	mov	r0, r3
 800b69c:	f7fa fa1d 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<int8_t>(output));
  return kTfLiteOk;
 800b6a0:	2300      	movs	r3, #0
}
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	379c      	adds	r7, #156	; 0x9c
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b6ac <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteEvalTensor* input,
                           const TfLiteEvalTensor* filter,
                           const TfLiteEvalTensor* bias,
                           TfLiteEvalTensor* output) {
 800b6ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6ae:	b0c9      	sub	sp, #292	; 0x124
 800b6b0:	af06      	add	r7, sp, #24
 800b6b2:	60f8      	str	r0, [r7, #12]
 800b6b4:	f107 0008 	add.w	r0, r7, #8
 800b6b8:	6001      	str	r1, [r0, #0]
 800b6ba:	1d39      	adds	r1, r7, #4
 800b6bc:	600a      	str	r2, [r1, #0]
 800b6be:	463a      	mov	r2, r7
 800b6c0:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -data.input_zero_point;
 800b6c2:	1d3b      	adds	r3, r7, #4
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	695b      	ldr	r3, [r3, #20]
 800b6c8:	425b      	negs	r3, r3
 800b6ca:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -data.filter_zero_point;
 800b6ce:	1d3b      	adds	r3, r7, #4
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	699b      	ldr	r3, [r3, #24]
 800b6d4:	425b      	negs	r3, r3
 800b6d6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = data.output_zero_point;
 800b6da:	1d3b      	adds	r3, r7, #4
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	69db      	ldr	r3, [r3, #28]
 800b6e0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 800b6e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e8:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 800b6ea:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b6ee:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 800b6f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b6f4:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 800b6f6:	1d3b      	adds	r3, r7, #4
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 800b6fe:	1d3b      	adds	r3, r7, #4
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	685b      	ldr	r3, [r3, #4]
 800b704:	425b      	negs	r3, r3
 800b706:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 800b708:	1d3b      	adds	r3, r7, #4
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 800b710:	1d3b      	adds	r3, r7, #4
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	68db      	ldr	r3, [r3, #12]
 800b716:	62fb      	str	r3, [r7, #44]	; 0x2c
      tflite::micro::GetTensorData<uint8_t>(filter),   \
      tflite::micro::GetTensorShape(bias),             \
      tflite::micro::GetTensorData<int32_t>(bias),     \
      tflite::micro::GetTensorShape(output),           \
      tflite::micro::GetTensorData<output_data_type>(output))
  switch (output->type) {
 800b718:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b71c:	7a1b      	ldrb	r3, [r3, #8]
 800b71e:	2b03      	cmp	r3, #3
 800b720:	d002      	beq.n	800b728 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x7c>
 800b722:	2b07      	cmp	r3, #7
 800b724:	d058      	beq.n	800b7d8 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x12c>
 800b726:	e0af      	b.n	800b888 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 800b728:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b72c:	463b      	mov	r3, r7
 800b72e:	6819      	ldr	r1, [r3, #0]
 800b730:	4610      	mov	r0, r2
 800b732:	f000 f9d4 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b736:	463b      	mov	r3, r7
 800b738:	6818      	ldr	r0, [r3, #0]
 800b73a:	f7ff f819 	bl	800a770 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800b73e:	4606      	mov	r6, r0
 800b740:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b744:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800b748:	4618      	mov	r0, r3
 800b74a:	f000 f9c8 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b74e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800b752:	f7ff f80d 	bl	800a770 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800b756:	4604      	mov	r4, r0
 800b758:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b75c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800b760:	4618      	mov	r0, r3
 800b762:	f000 f9bc 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b766:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800b76a:	f7ff fa7d 	bl	800ac68 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800b76e:	4605      	mov	r5, r0
 800b770:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b774:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b778:	4618      	mov	r0, r3
 800b77a:	f000 f9b0 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b77e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800b782:	f7ff f804 	bl	800a78e <_ZN6tflite5micro13GetTensorDataIhEEPT_P16TfLiteEvalTensor>
 800b786:	4603      	mov	r3, r0
 800b788:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b78c:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b790:	f107 0014 	add.w	r0, r7, #20
 800b794:	9304      	str	r3, [sp, #16]
 800b796:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b79a:	9303      	str	r3, [sp, #12]
 800b79c:	9502      	str	r5, [sp, #8]
 800b79e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b7a2:	9301      	str	r3, [sp, #4]
 800b7a4:	9400      	str	r4, [sp, #0]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	4632      	mov	r2, r6
 800b7aa:	f7ff fb67 	bl	800ae7c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 800b7ae:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fa f991 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
 800b7b8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800b7bc:	4618      	mov	r0, r3
 800b7be:	f7fa f98c 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
 800b7c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7fa f987 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
 800b7cc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f7fa f982 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800b7d6:	e069      	b.n	800b8ac <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x200>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 800b7d8:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 800b7dc:	463b      	mov	r3, r7
 800b7de:	6819      	ldr	r1, [r3, #0]
 800b7e0:	4610      	mov	r0, r2
 800b7e2:	f000 f97c 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b7e6:	463b      	mov	r3, r7
 800b7e8:	6818      	ldr	r0, [r3, #0]
 800b7ea:	f7fe ffc1 	bl	800a770 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800b7ee:	4606      	mov	r6, r0
 800b7f0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b7f4:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f000 f970 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b7fe:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 800b802:	f7fe ffb5 	bl	800a770 <_ZN6tflite5micro13GetTensorDataIhEEPKT_PK16TfLiteEvalTensor>
 800b806:	4604      	mov	r4, r0
 800b808:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b80c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 800b810:	4618      	mov	r0, r3
 800b812:	f000 f964 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b816:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 800b81a:	f7ff fa25 	bl	800ac68 <_ZN6tflite5micro13GetTensorDataIlEEPKT_PK16TfLiteEvalTensor>
 800b81e:	4605      	mov	r5, r0
 800b820:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800b824:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 800b828:	4618      	mov	r0, r3
 800b82a:	f000 f958 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
 800b82e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 800b832:	f000 f943 	bl	800babc <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>
 800b836:	4603      	mov	r3, r0
 800b838:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 800b83c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800b840:	f107 0014 	add.w	r0, r7, #20
 800b844:	9304      	str	r3, [sp, #16]
 800b846:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800b84a:	9303      	str	r3, [sp, #12]
 800b84c:	9502      	str	r5, [sp, #8]
 800b84e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b852:	9301      	str	r3, [sp, #4]
 800b854:	9400      	str	r4, [sp, #0]
 800b856:	4613      	mov	r3, r2
 800b858:	4632      	mov	r2, r6
 800b85a:	f7ff fbde 	bl	800b01a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 800b85e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800b862:	4618      	mov	r0, r3
 800b864:	f7fa f939 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
 800b868:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800b86c:	4618      	mov	r0, r3
 800b86e:	f7fa f934 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
 800b872:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800b876:	4618      	mov	r0, r3
 800b878:	f7fa f92f 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
 800b87c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800b880:	4618      	mov	r0, r3
 800b882:	f7fa f92a 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 800b886:	e011      	b.n	800b8ac <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x200>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	695c      	ldr	r4, [r3, #20]
 800b88c:	68fd      	ldr	r5, [r7, #12]
 800b88e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b892:	7a1b      	ldrb	r3, [r3, #8]
 800b894:	4618      	mov	r0, r3
 800b896:	f7f8 fd8f 	bl	80043b8 <TfLiteTypeGetName>
 800b89a:	4602      	mov	r2, r0
 800b89c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b8a0:	7a1b      	ldrb	r3, [r3, #8]
 800b8a2:	4905      	ldr	r1, [pc, #20]	; (800b8b8 <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x20c>)
 800b8a4:	4628      	mov	r0, r5
 800b8a6:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 800b8a8:	2301      	movs	r3, #1
 800b8aa:	e000      	b.n	800b8ae <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_+0x202>
  }

  return kTfLiteOk;
 800b8ac:	2300      	movs	r3, #0
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 800b8b4:	46bd      	mov	sp, r7
 800b8b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8b8:	08011a84 	.word	0x08011a84

0800b8bc <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK16TfLiteEvalTensorS8_S8_PS6_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteEvalTensor* input,
                       const TfLiteEvalTensor* filter,
                       const TfLiteEvalTensor* bias, TfLiteEvalTensor* output) {
 800b8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b8be:	b0af      	sub	sp, #188	; 0xbc
 800b8c0:	af06      	add	r7, sp, #24
 800b8c2:	60f8      	str	r0, [r7, #12]
 800b8c4:	60b9      	str	r1, [r7, #8]
 800b8c6:	603b      	str	r3, [r7, #0]
 800b8c8:	4613      	mov	r3, r2
 800b8ca:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 800b8cc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b8d0:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800b8d4:	79fb      	ldrb	r3, [r7, #7]
 800b8d6:	4618      	mov	r0, r3
 800b8d8:	f7ff f984 	bl	800abe4 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 800b8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8de:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 800b8e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e2:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, tflite::micro::GetTensorShape(input),
 800b8e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b8e8:	6839      	ldr	r1, [r7, #0]
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	f000 f8f7 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 800b8f0:	6838      	ldr	r0, [r7, #0]
 800b8f2:	f7fe feb1 	bl	800a658 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800b8f6:	4606      	mov	r6, r0
      tflite::micro::GetTensorData<float>(input),
      tflite::micro::GetTensorShape(filter),
 800b8f8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b8fc:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 800b900:	4618      	mov	r0, r3
 800b902:	f000 f8ec 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 800b906:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 800b90a:	f7fe fea5 	bl	800a658 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800b90e:	4604      	mov	r4, r0
      tflite::micro::GetTensorData<float>(filter),
      tflite::micro::GetTensorShape(bias),
 800b910:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b914:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 800b918:	4618      	mov	r0, r3
 800b91a:	f000 f8e0 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 800b91e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 800b922:	f7fe fe99 	bl	800a658 <_ZN6tflite5micro13GetTensorDataIfEEPKT_PK16TfLiteEvalTensor>
 800b926:	4605      	mov	r5, r0
      tflite::micro::GetTensorData<float>(bias),
      tflite::micro::GetTensorShape(output),
 800b928:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b92c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 800b930:	4618      	mov	r0, r3
 800b932:	f000 f8d4 	bl	800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>
  tflite::reference_ops::FullyConnected(
 800b936:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 800b93a:	f7fe fe9c 	bl	800a676 <_ZN6tflite5micro13GetTensorDataIfEEPT_P16TfLiteEvalTensor>
 800b93e:	4603      	mov	r3, r0
 800b940:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800b944:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800b948:	f107 0010 	add.w	r0, r7, #16
 800b94c:	9304      	str	r3, [sp, #16]
 800b94e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b952:	9303      	str	r3, [sp, #12]
 800b954:	9502      	str	r5, [sp, #8]
 800b956:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b95a:	9301      	str	r3, [sp, #4]
 800b95c:	9400      	str	r4, [sp, #0]
 800b95e:	4613      	mov	r3, r2
 800b960:	4632      	mov	r2, r6
 800b962:	f7ff f9f5 	bl	800ad50 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      tflite::micro::GetTensorShape(output),
 800b966:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800b96a:	4618      	mov	r0, r3
 800b96c:	f7fa f8b5 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(bias),
 800b970:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800b974:	4618      	mov	r0, r3
 800b976:	f7fa f8b0 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorShape(filter),
 800b97a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800b97e:	4618      	mov	r0, r3
 800b980:	f7fa f8ab 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, tflite::micro::GetTensorShape(input),
 800b984:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800b988:	4618      	mov	r0, r3
 800b98a:	f7fa f8a6 	bl	8005ada <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::micro::GetTensorData<float>(output));
  return kTfLiteOk;
 800b98e:	2300      	movs	r3, #0
}
 800b990:	4618      	mov	r0, r3
 800b992:	37a4      	adds	r7, #164	; 0xa4
 800b994:	46bd      	mov	sp, r7
 800b996:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b998 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 800b998:	b5b0      	push	{r4, r5, r7, lr}
 800b99a:	b08c      	sub	sp, #48	; 0x30
 800b99c:	af04      	add	r7, sp, #16
 800b99e:	6078      	str	r0, [r7, #4]
 800b9a0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 800b9a2:	683b      	ldr	r3, [r7, #0]
 800b9a4:	695b      	ldr	r3, [r3, #20]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d101      	bne.n	800b9ae <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x16>
 800b9aa:	f000 fdd3 	bl	800c554 <abort>
  const auto* params =
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	695b      	ldr	r3, [r3, #20]
 800b9b2:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteEvalTensor* input =
      tflite::micro::GetEvalInput(context, node, kInputTensor);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	f7fe f96c 	bl	8009c98 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800b9c0:	61b8      	str	r0, [r7, #24]
  const TfLiteEvalTensor* filter =
      tflite::micro::GetEvalInput(context, node, kWeightsTensor);
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	6839      	ldr	r1, [r7, #0]
 800b9c8:	4618      	mov	r0, r3
 800b9ca:	f7fe f965 	bl	8009c98 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800b9ce:	6178      	str	r0, [r7, #20]
  const TfLiteEvalTensor* bias =
      tflite::micro::GetEvalInput(context, node, kBiasTensor);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2202      	movs	r2, #2
 800b9d4:	6839      	ldr	r1, [r7, #0]
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7fe f95e 	bl	8009c98 <_ZN6tflite5micro12GetEvalInputEPK13TfLiteContextPK10TfLiteNodei>
 800b9dc:	6138      	str	r0, [r7, #16]
  TfLiteEvalTensor* output =
      tflite::micro::GetEvalOutput(context, node, kOutputTensor);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	6839      	ldr	r1, [r7, #0]
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f7fe f967 	bl	8009cb8 <_ZN6tflite5micro13GetEvalOutputEPK13TfLiteContextPK10TfLiteNodei>
 800b9ea:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 800b9ec:	683b      	ldr	r3, [r7, #0]
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d101      	bne.n	800b9f8 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x60>
 800b9f4:	f000 fdae 	bl	800c554 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 800b9f8:	683b      	ldr	r3, [r7, #0]
 800b9fa:	691b      	ldr	r3, [r3, #16]
 800b9fc:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 800b9fe:	69bb      	ldr	r3, [r7, #24]
 800ba00:	7a1b      	ldrb	r3, [r3, #8]
 800ba02:	2b03      	cmp	r3, #3
 800ba04:	d020      	beq.n	800ba48 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xb0>
 800ba06:	2b09      	cmp	r3, #9
 800ba08:	d010      	beq.n	800ba2c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0x94>
 800ba0a:	2b01      	cmp	r3, #1
 800ba0c:	d12a      	bne.n	800ba64 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xcc>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 800ba0e:	6878      	ldr	r0, [r7, #4]
 800ba10:	69fb      	ldr	r3, [r7, #28]
 800ba12:	781a      	ldrb	r2, [r3, #0]
                       output);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	9302      	str	r3, [sp, #8]
 800ba18:	693b      	ldr	r3, [r7, #16]
 800ba1a:	9301      	str	r3, [sp, #4]
 800ba1c:	697b      	ldr	r3, [r7, #20]
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	6839      	ldr	r1, [r7, #0]
 800ba24:	f7ff ff4a 	bl	800b8bc <_ZN6tflite12_GLOBAL__N_19EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK16TfLiteEvalTensorS8_S8_PS6_>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	e02a      	b.n	800ba82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 800ba2c:	6878      	ldr	r0, [r7, #4]
                               output);
 800ba2e:	68fb      	ldr	r3, [r7, #12]
 800ba30:	9302      	str	r3, [sp, #8]
 800ba32:	693b      	ldr	r3, [r7, #16]
 800ba34:	9301      	str	r3, [sp, #4]
 800ba36:	697b      	ldr	r3, [r7, #20]
 800ba38:	9300      	str	r3, [sp, #0]
 800ba3a:	69bb      	ldr	r3, [r7, #24]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	6839      	ldr	r1, [r7, #0]
 800ba40:	f7ff fdba 	bl	800b5b8 <_ZN6tflite12_GLOBAL__N_117EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 800ba44:	4603      	mov	r3, r0
 800ba46:	e01c      	b.n	800ba82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	9302      	str	r3, [sp, #8]
 800ba4e:	693b      	ldr	r3, [r7, #16]
 800ba50:	9301      	str	r3, [sp, #4]
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	69bb      	ldr	r3, [r7, #24]
 800ba58:	68ba      	ldr	r2, [r7, #8]
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	f7ff fe26 	bl	800b6ac <_ZN6tflite12_GLOBAL__N_113EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS0_6OpDataEPK16TfLiteEvalTensorSA_SA_PS8_>
 800ba60:	4603      	mov	r3, r0
 800ba62:	e00e      	b.n	800ba82 <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xea>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	695c      	ldr	r4, [r3, #20]
 800ba68:	687d      	ldr	r5, [r7, #4]
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	7a1b      	ldrb	r3, [r3, #8]
 800ba6e:	4618      	mov	r0, r3
 800ba70:	f7f8 fca2 	bl	80043b8 <TfLiteTypeGetName>
 800ba74:	4602      	mov	r2, r0
 800ba76:	69bb      	ldr	r3, [r7, #24]
 800ba78:	7a1b      	ldrb	r3, [r3, #8]
 800ba7a:	4904      	ldr	r1, [pc, #16]	; (800ba8c <_ZN6tflite12_GLOBAL__N_14EvalEP13TfLiteContextP10TfLiteNode+0xf4>)
 800ba7c:	4628      	mov	r0, r5
 800ba7e:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 800ba80:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 800ba82:	4618      	mov	r0, r3
 800ba84:	3720      	adds	r7, #32
 800ba86:	46bd      	mov	sp, r7
 800ba88:	bdb0      	pop	{r4, r5, r7, pc}
 800ba8a:	bf00      	nop
 800ba8c:	08011a84 	.word	0x08011a84

0800ba90 <_ZN6tflite24Register_FULLY_CONNECTEDEv>:

}  // namespace

TfLiteRegistration Register_FULLY_CONNECTED() {
 800ba90:	b4b0      	push	{r4, r5, r7}
 800ba92:	b083      	sub	sp, #12
 800ba94:	af00      	add	r7, sp, #0
 800ba96:	6078      	str	r0, [r7, #4]
          /*prepare=*/Prepare,
          /*invoke=*/Eval,
          /*profiling_string=*/nullptr,
          /*builtin_code=*/0,
          /*custom_name=*/nullptr,
          /*version=*/0};
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	4a07      	ldr	r2, [pc, #28]	; (800bab8 <_ZN6tflite24Register_FULLY_CONNECTEDEv+0x28>)
 800ba9c:	461c      	mov	r4, r3
 800ba9e:	4615      	mov	r5, r2
 800baa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800baa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800baa4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800baa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800baac:	6878      	ldr	r0, [r7, #4]
 800baae:	370c      	adds	r7, #12
 800bab0:	46bd      	mov	sp, r7
 800bab2:	bcb0      	pop	{r4, r5, r7}
 800bab4:	4770      	bx	lr
 800bab6:	bf00      	nop
 800bab8:	08011aa0 	.word	0x08011aa0

0800babc <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor>:
T* GetTensorData(TfLiteEvalTensor* tensor) {
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d002      	beq.n	800bad0 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x14>
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	e000      	b.n	800bad2 <_ZN6tflite5micro13GetTensorDataIsEEPT_P16TfLiteEvalTensor+0x16>
 800bad0:	2300      	movs	r3, #0
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	370c      	adds	r7, #12
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr

0800bade <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor>:
  TFLITE_DCHECK(input1 != nullptr);
  TFLITE_DCHECK(input2 != nullptr);
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
}

const RuntimeShape GetTensorShape(const TfLiteEvalTensor* tensor) {
 800bade:	b580      	push	{r7, lr}
 800bae0:	b086      	sub	sp, #24
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
 800bae6:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr || tensor->dims == nullptr) {
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d003      	beq.n	800baf6 <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x18>
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	685b      	ldr	r3, [r3, #4]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d103      	bne.n	800bafe <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x20>
    return RuntimeShape();
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f7f9 ffce 	bl	8005a98 <_ZN6tflite12RuntimeShapeC1Ev>
 800bafc:	e00d      	b.n	800bb1a <_ZN6tflite5micro14GetTensorShapeEPK16TfLiteEvalTensor+0x3c>
  }
  TfLiteIntArray* dims = tensor->dims;
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	685b      	ldr	r3, [r3, #4]
 800bb02:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	681b      	ldr	r3, [r3, #0]
 800bb08:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800bb0a:	697b      	ldr	r3, [r7, #20]
 800bb0c:	3304      	adds	r3, #4
 800bb0e:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800bb10:	68fa      	ldr	r2, [r7, #12]
 800bb12:	6939      	ldr	r1, [r7, #16]
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f7f9 ffcd 	bl	8005ab4 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	3718      	adds	r7, #24
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	bd80      	pop	{r7, pc}
	...

0800bb24 <_ZN6tflite13MemoryPlannerC1Ev>:
// The goal is for applications to be able to experiment with different layout
// strategies without changing their client code, by swapping out classes that
// implement this interface.=
class MemoryPlanner {
 public:
  MemoryPlanner() {}
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	4a04      	ldr	r2, [pc, #16]	; (800bb40 <_ZN6tflite13MemoryPlannerC1Ev+0x1c>)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	601a      	str	r2, [r3, #0]
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	4618      	mov	r0, r3
 800bb36:	370c      	adds	r7, #12
 800bb38:	46bd      	mov	sp, r7
 800bb3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb3e:	4770      	bx	lr
 800bb40:	080128c8 	.word	0x080128c8

0800bb44 <_ZN6tflite13MemoryPlannerD1Ev>:
  virtual ~MemoryPlanner() {}
 800bb44:	b480      	push	{r7}
 800bb46:	b083      	sub	sp, #12
 800bb48:	af00      	add	r7, sp, #0
 800bb4a:	6078      	str	r0, [r7, #4]
 800bb4c:	4a04      	ldr	r2, [pc, #16]	; (800bb60 <_ZN6tflite13MemoryPlannerD1Ev+0x1c>)
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	601a      	str	r2, [r3, #0]
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	4618      	mov	r0, r3
 800bb56:	370c      	adds	r7, #12
 800bb58:	46bd      	mov	sp, r7
 800bb5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5e:	4770      	bx	lr
 800bb60:	080128c8 	.word	0x080128c8

0800bb64 <_ZN6tflite13MemoryPlannerD0Ev>:
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
 800bb6c:	6878      	ldr	r0, [r7, #4]
 800bb6e:	f7ff ffe9 	bl	800bb44 <_ZN6tflite13MemoryPlannerD1Ev>
 800bb72:	2104      	movs	r1, #4
 800bb74:	6878      	ldr	r0, [r7, #4]
 800bb76:	f000 fc09 	bl	800c38c <_ZdlPvj>
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}

0800bb84 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>:
    int requirements_index;
    int next_entry_index;
  };

  // Number of bytes required in order to plan a buffer.
  static size_t per_buffer_size() {
 800bb84:	b480      	push	{r7}
 800bb86:	b083      	sub	sp, #12
 800bb88:	af00      	add	r7, sp, #0
    const int per_buffer_size =
 800bb8a:	2328      	movs	r3, #40	; 0x28
 800bb8c:	607b      	str	r3, [r7, #4]
        sizeof(BufferRequirements) +  // requirements_
        sizeof(int) +                 // buffer_sizes_sorted_
        sizeof(int) +                 // buffer_ids_sorted_
        sizeof(ListEntry) +           // buffers_sorted_by_offset_
        sizeof(int);                  // buffer_offsets_;
    return per_buffer_size;
 800bb8e:	2328      	movs	r3, #40	; 0x28
  }
 800bb90:	4618      	mov	r0, r3
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>:
namespace tflite {

// Simple stable in-place sort function. Not time-efficient for large arrays.
// Would normally be in an anonymous namespace to keep it private, but we want
// to be able to test it externally.
void ReverseSortInPlace(int* values, int* ids, int size) {
 800bb9c:	b480      	push	{r7}
 800bb9e:	b089      	sub	sp, #36	; 0x24
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	60f8      	str	r0, [r7, #12]
 800bba4:	60b9      	str	r1, [r7, #8]
 800bba6:	607a      	str	r2, [r7, #4]
  bool any_swapped;
  do {
    any_swapped = false;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800bbac:	2301      	movs	r3, #1
 800bbae:	61bb      	str	r3, [r7, #24]
 800bbb0:	69ba      	ldr	r2, [r7, #24]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	da4c      	bge.n	800bc52 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xb6>
      if (values[i - 1] < values[i]) {
 800bbb8:	69bb      	ldr	r3, [r7, #24]
 800bbba:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bbbe:	3b01      	subs	r3, #1
 800bbc0:	009b      	lsls	r3, r3, #2
 800bbc2:	68fa      	ldr	r2, [r7, #12]
 800bbc4:	4413      	add	r3, r2
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	69bb      	ldr	r3, [r7, #24]
 800bbca:	009b      	lsls	r3, r3, #2
 800bbcc:	68f9      	ldr	r1, [r7, #12]
 800bbce:	440b      	add	r3, r1
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	429a      	cmp	r2, r3
 800bbd4:	da39      	bge.n	800bc4a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xae>
        const int value_temp = values[i - 1];
 800bbd6:	69bb      	ldr	r3, [r7, #24]
 800bbd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bbdc:	3b01      	subs	r3, #1
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	4413      	add	r3, r2
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	617b      	str	r3, [r7, #20]
        values[i - 1] = values[i];
 800bbe8:	69bb      	ldr	r3, [r7, #24]
 800bbea:	009b      	lsls	r3, r3, #2
 800bbec:	68fa      	ldr	r2, [r7, #12]
 800bbee:	441a      	add	r2, r3
 800bbf0:	69bb      	ldr	r3, [r7, #24]
 800bbf2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bbf6:	3b01      	subs	r3, #1
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	68f9      	ldr	r1, [r7, #12]
 800bbfc:	440b      	add	r3, r1
 800bbfe:	6812      	ldr	r2, [r2, #0]
 800bc00:	601a      	str	r2, [r3, #0]
        values[i] = value_temp;
 800bc02:	69bb      	ldr	r3, [r7, #24]
 800bc04:	009b      	lsls	r3, r3, #2
 800bc06:	68fa      	ldr	r2, [r7, #12]
 800bc08:	4413      	add	r3, r2
 800bc0a:	697a      	ldr	r2, [r7, #20]
 800bc0c:	601a      	str	r2, [r3, #0]
        const int id_temp = ids[i - 1];
 800bc0e:	69bb      	ldr	r3, [r7, #24]
 800bc10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bc14:	3b01      	subs	r3, #1
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	68ba      	ldr	r2, [r7, #8]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	613b      	str	r3, [r7, #16]
        ids[i - 1] = ids[i];
 800bc20:	69bb      	ldr	r3, [r7, #24]
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	68ba      	ldr	r2, [r7, #8]
 800bc26:	441a      	add	r2, r3
 800bc28:	69bb      	ldr	r3, [r7, #24]
 800bc2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800bc2e:	3b01      	subs	r3, #1
 800bc30:	009b      	lsls	r3, r3, #2
 800bc32:	68b9      	ldr	r1, [r7, #8]
 800bc34:	440b      	add	r3, r1
 800bc36:	6812      	ldr	r2, [r2, #0]
 800bc38:	601a      	str	r2, [r3, #0]
        ids[i] = id_temp;
 800bc3a:	69bb      	ldr	r3, [r7, #24]
 800bc3c:	009b      	lsls	r3, r3, #2
 800bc3e:	68ba      	ldr	r2, [r7, #8]
 800bc40:	4413      	add	r3, r2
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	601a      	str	r2, [r3, #0]
        any_swapped = true;
 800bc46:	2301      	movs	r3, #1
 800bc48:	77fb      	strb	r3, [r7, #31]
    for (int i = 1; i < size; ++i) {
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	61bb      	str	r3, [r7, #24]
 800bc50:	e7ae      	b.n	800bbb0 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0x14>
  do {
 800bc52:	7ffb      	ldrb	r3, [r7, #31]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d000      	beq.n	800bc5a <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xbe>
 800bc58:	e7a6      	b.n	800bba8 <_ZN6tflite18ReverseSortInPlaceEPiS0_i+0xc>
      }
    }
  } while (any_swapped);
}
 800bc5a:	bf00      	nop
 800bc5c:	3724      	adds	r7, #36	; 0x24
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
	...

0800bc68 <_ZN6tflite19GreedyMemoryPlannerC1EPhi>:

GreedyMemoryPlanner::GreedyMemoryPlanner(unsigned char* scratch_buffer,
 800bc68:	b590      	push	{r4, r7, lr}
 800bc6a:	b087      	sub	sp, #28
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
                                         int scratch_buffer_size)
    : buffer_count_(0), need_to_calculate_offsets_(true) {
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	4618      	mov	r0, r3
 800bc78:	f7ff ff54 	bl	800bb24 <_ZN6tflite13MemoryPlannerC1Ev>
 800bc7c:	4a22      	ldr	r2, [pc, #136]	; (800bd08 <_ZN6tflite19GreedyMemoryPlannerC1EPhi+0xa0>)
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	2200      	movs	r2, #0
 800bc86:	609a      	str	r2, [r3, #8]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // Allocate the arrays we need within the scratch buffer arena.
  max_buffer_count_ = scratch_buffer_size / per_buffer_size();
 800bc90:	687c      	ldr	r4, [r7, #4]
 800bc92:	f7ff ff77 	bl	800bb84 <_ZN6tflite19GreedyMemoryPlanner15per_buffer_sizeEv>
 800bc96:	4603      	mov	r3, r0
 800bc98:	fbb4 f3f3 	udiv	r3, r4, r3
 800bc9c:	461a      	mov	r2, r3
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	605a      	str	r2, [r3, #4]

  unsigned char* next_free = scratch_buffer;
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	617b      	str	r3, [r7, #20]
  requirements_ = reinterpret_cast<BufferRequirements*>(next_free);
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	697a      	ldr	r2, [r7, #20]
 800bcaa:	60da      	str	r2, [r3, #12]
  next_free += sizeof(BufferRequirements) * max_buffer_count_;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	685b      	ldr	r3, [r3, #4]
 800bcb0:	011b      	lsls	r3, r3, #4
 800bcb2:	697a      	ldr	r2, [r7, #20]
 800bcb4:	4413      	add	r3, r2
 800bcb6:	617b      	str	r3, [r7, #20]

  buffer_sizes_sorted_ = reinterpret_cast<int*>(next_free);
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	697a      	ldr	r2, [r7, #20]
 800bcbc:	611a      	str	r2, [r3, #16]
  next_free += sizeof(int) * max_buffer_count_;
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	685b      	ldr	r3, [r3, #4]
 800bcc2:	009b      	lsls	r3, r3, #2
 800bcc4:	697a      	ldr	r2, [r7, #20]
 800bcc6:	4413      	add	r3, r2
 800bcc8:	617b      	str	r3, [r7, #20]

  buffer_ids_sorted_ = reinterpret_cast<int*>(next_free);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	697a      	ldr	r2, [r7, #20]
 800bcce:	615a      	str	r2, [r3, #20]
  next_free += sizeof(int) * max_buffer_count_;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	685b      	ldr	r3, [r3, #4]
 800bcd4:	009b      	lsls	r3, r3, #2
 800bcd6:	697a      	ldr	r2, [r7, #20]
 800bcd8:	4413      	add	r3, r2
 800bcda:	617b      	str	r3, [r7, #20]

  buffers_sorted_by_offset_ = reinterpret_cast<ListEntry*>(next_free);
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	697a      	ldr	r2, [r7, #20]
 800bce0:	619a      	str	r2, [r3, #24]
  next_free += sizeof(ListEntry) * max_buffer_count_;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	685b      	ldr	r3, [r3, #4]
 800bce6:	461a      	mov	r2, r3
 800bce8:	4613      	mov	r3, r2
 800bcea:	005b      	lsls	r3, r3, #1
 800bcec:	4413      	add	r3, r2
 800bcee:	009b      	lsls	r3, r3, #2
 800bcf0:	461a      	mov	r2, r3
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	4413      	add	r3, r2
 800bcf6:	617b      	str	r3, [r7, #20]

  buffer_offsets_ = reinterpret_cast<int*>(next_free);
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	697a      	ldr	r2, [r7, #20]
 800bcfc:	625a      	str	r2, [r3, #36]	; 0x24
}
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	4618      	mov	r0, r3
 800bd02:	371c      	adds	r7, #28
 800bd04:	46bd      	mov	sp, r7
 800bd06:	bd90      	pop	{r4, r7, pc}
 800bd08:	080128a8 	.word	0x080128a8

0800bd0c <_ZN6tflite19GreedyMemoryPlannerD1Ev>:

GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800bd0c:	b580      	push	{r7, lr}
 800bd0e:	b082      	sub	sp, #8
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
 800bd14:	4a05      	ldr	r2, [pc, #20]	; (800bd2c <_ZN6tflite19GreedyMemoryPlannerD1Ev+0x20>)
 800bd16:	687b      	ldr	r3, [r7, #4]
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4618      	mov	r0, r3
 800bd1e:	f7ff ff11 	bl	800bb44 <_ZN6tflite13MemoryPlannerD1Ev>
  // We don't own the scratch buffer, so don't deallocate anything.
}
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4618      	mov	r0, r3
 800bd26:	3708      	adds	r7, #8
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	bd80      	pop	{r7, pc}
 800bd2c:	080128a8 	.word	0x080128a8

0800bd30 <_ZN6tflite19GreedyMemoryPlannerD0Ev>:
GreedyMemoryPlanner::~GreedyMemoryPlanner() {
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b082      	sub	sp, #8
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
}
 800bd38:	6878      	ldr	r0, [r7, #4]
 800bd3a:	f7ff ffe7 	bl	800bd0c <_ZN6tflite19GreedyMemoryPlannerD1Ev>
 800bd3e:	212c      	movs	r1, #44	; 0x2c
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 fb23 	bl	800c38c <_ZdlPvj>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4618      	mov	r0, r3
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used) {
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b086      	sub	sp, #24
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	60f8      	str	r0, [r7, #12]
 800bd58:	60b9      	str	r1, [r7, #8]
 800bd5a:	607a      	str	r2, [r7, #4]
 800bd5c:	603b      	str	r3, [r7, #0]
  if (buffer_count_ >= max_buffer_count_) {
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	689a      	ldr	r2, [r3, #8]
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	db08      	blt.n	800bd7c <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x2c>
    TF_LITE_REPORT_ERROR(error_reporter, "Too many buffers (max is %d)",
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	461a      	mov	r2, r3
 800bd70:	4913      	ldr	r1, [pc, #76]	; (800bdc0 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x70>)
 800bd72:	68b8      	ldr	r0, [r7, #8]
 800bd74:	f7f8 fb8a 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         max_buffer_count_);
    return kTfLiteError;
 800bd78:	2301      	movs	r3, #1
 800bd7a:	e01d      	b.n	800bdb8 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiii+0x68>
  }
  BufferRequirements* current = &requirements_[buffer_count_];
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	68da      	ldr	r2, [r3, #12]
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	011b      	lsls	r3, r3, #4
 800bd86:	4413      	add	r3, r2
 800bd88:	617b      	str	r3, [r7, #20]
  current->size = size;
 800bd8a:	697b      	ldr	r3, [r7, #20]
 800bd8c:	687a      	ldr	r2, [r7, #4]
 800bd8e:	601a      	str	r2, [r3, #0]
  current->first_time_used = first_time_used;
 800bd90:	697b      	ldr	r3, [r7, #20]
 800bd92:	683a      	ldr	r2, [r7, #0]
 800bd94:	609a      	str	r2, [r3, #8]
  current->last_time_used = last_time_used;
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	6a3a      	ldr	r2, [r7, #32]
 800bd9a:	60da      	str	r2, [r3, #12]
  current->offline_offset = kOnlinePlannedBuffer;
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	f04f 32ff 	mov.w	r2, #4294967295
 800bda2:	605a      	str	r2, [r3, #4]
  ++buffer_count_;
 800bda4:	68fb      	ldr	r3, [r7, #12]
 800bda6:	689b      	ldr	r3, [r3, #8]
 800bda8:	1c5a      	adds	r2, r3, #1
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	609a      	str	r2, [r3, #8]
  need_to_calculate_offsets_ = true;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	2201      	movs	r2, #1
 800bdb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  return kTfLiteOk;
 800bdb6:	2300      	movs	r3, #0
}
 800bdb8:	4618      	mov	r0, r3
 800bdba:	3718      	adds	r7, #24
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	bd80      	pop	{r7, pc}
 800bdc0:	08011b44 	.word	0x08011b44

0800bdc4 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii>:

TfLiteStatus GreedyMemoryPlanner::AddBuffer(
    tflite::ErrorReporter* error_reporter, int size, int first_time_used,
    int last_time_used, int offline_offset) {
 800bdc4:	b590      	push	{r4, r7, lr}
 800bdc6:	b089      	sub	sp, #36	; 0x24
 800bdc8:	af02      	add	r7, sp, #8
 800bdca:	60f8      	str	r0, [r7, #12]
 800bdcc:	60b9      	str	r1, [r7, #8]
 800bdce:	607a      	str	r2, [r7, #4]
 800bdd0:	603b      	str	r3, [r7, #0]
  BufferRequirements* current = &requirements_[buffer_count_];
 800bdd2:	68fb      	ldr	r3, [r7, #12]
 800bdd4:	68da      	ldr	r2, [r3, #12]
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	689b      	ldr	r3, [r3, #8]
 800bdda:	011b      	lsls	r3, r3, #4
 800bddc:	4413      	add	r3, r2
 800bdde:	617b      	str	r3, [r7, #20]
  if (AddBuffer(error_reporter, size, first_time_used, last_time_used) !=
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	3308      	adds	r3, #8
 800bde6:	681c      	ldr	r4, [r3, #0]
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	9300      	str	r3, [sp, #0]
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	687a      	ldr	r2, [r7, #4]
 800bdf0:	68b9      	ldr	r1, [r7, #8]
 800bdf2:	68f8      	ldr	r0, [r7, #12]
 800bdf4:	47a0      	blx	r4
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	bf14      	ite	ne
 800bdfc:	2301      	movne	r3, #1
 800bdfe:	2300      	moveq	r3, #0
 800be00:	b2db      	uxtb	r3, r3
 800be02:	2b00      	cmp	r3, #0
 800be04:	d001      	beq.n	800be0a <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x46>
      kTfLiteOk) {
    return kTfLiteError;
 800be06:	2301      	movs	r3, #1
 800be08:	e003      	b.n	800be12 <_ZN6tflite19GreedyMemoryPlanner9AddBufferEPNS_13ErrorReporterEiiii+0x4e>
  }
  current->offline_offset = offline_offset;
 800be0a:	697b      	ldr	r3, [r7, #20]
 800be0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800be0e:	605a      	str	r2, [r3, #4]
  return kTfLiteOk;
 800be10:	2300      	movs	r3, #0
}
 800be12:	4618      	mov	r0, r3
 800be14:	371c      	adds	r7, #28
 800be16:	46bd      	mov	sp, r7
 800be18:	bd90      	pop	{r4, r7, pc}

0800be1a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>:

bool GreedyMemoryPlanner::DoesEntryOverlapInTime(
    const GreedyMemoryPlanner::ListEntry* entry, const int first_time_used,
    const int last_time_used) const {
 800be1a:	b480      	push	{r7}
 800be1c:	b087      	sub	sp, #28
 800be1e:	af00      	add	r7, sp, #0
 800be20:	60f8      	str	r0, [r7, #12]
 800be22:	60b9      	str	r1, [r7, #8]
 800be24:	607a      	str	r2, [r7, #4]
 800be26:	603b      	str	r3, [r7, #0]
  const BufferRequirements* entry_requirements =
      &requirements_[entry->requirements_index];
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	68da      	ldr	r2, [r3, #12]
 800be2c:	68bb      	ldr	r3, [r7, #8]
 800be2e:	685b      	ldr	r3, [r3, #4]
 800be30:	011b      	lsls	r3, r3, #4
  const BufferRequirements* entry_requirements =
 800be32:	4413      	add	r3, r2
 800be34:	617b      	str	r3, [r7, #20]
  if (entry_requirements->first_time_used > last_time_used) {
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	689b      	ldr	r3, [r3, #8]
 800be3a:	683a      	ldr	r2, [r7, #0]
 800be3c:	429a      	cmp	r2, r3
 800be3e:	da01      	bge.n	800be44 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x2a>
    return false;
 800be40:	2300      	movs	r3, #0
 800be42:	e007      	b.n	800be54 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  if (first_time_used > entry_requirements->last_time_used) {
 800be44:	697b      	ldr	r3, [r7, #20]
 800be46:	68db      	ldr	r3, [r3, #12]
 800be48:	687a      	ldr	r2, [r7, #4]
 800be4a:	429a      	cmp	r2, r3
 800be4c:	dd01      	ble.n	800be52 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x38>
    return false;
 800be4e:	2300      	movs	r3, #0
 800be50:	e000      	b.n	800be54 <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii+0x3a>
  }
  return true;
 800be52:	2301      	movs	r3, #1
}
 800be54:	4618      	mov	r0, r3
 800be56:	371c      	adds	r7, #28
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>:

GreedyMemoryPlanner::ListEntry*
GreedyMemoryPlanner::NextSimultaneouslyActiveBuffer(
    const GreedyMemoryPlanner::ListEntry* start, const int first_time_used,
    const int last_time_used) {
 800be60:	b580      	push	{r7, lr}
 800be62:	b086      	sub	sp, #24
 800be64:	af00      	add	r7, sp, #0
 800be66:	60f8      	str	r0, [r7, #12]
 800be68:	60b9      	str	r1, [r7, #8]
 800be6a:	607a      	str	r2, [r7, #4]
 800be6c:	603b      	str	r3, [r7, #0]
  ListEntry* result = nullptr;
 800be6e:	2300      	movs	r3, #0
 800be70:	617b      	str	r3, [r7, #20]
  ListEntry* candidate_next_entry;
  if (start == nullptr) {
 800be72:	68bb      	ldr	r3, [r7, #8]
 800be74:	2b00      	cmp	r3, #0
 800be76:	d10b      	bne.n	800be90 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x30>
    candidate_next_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	699a      	ldr	r2, [r3, #24]
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6a1b      	ldr	r3, [r3, #32]
 800be80:	4619      	mov	r1, r3
 800be82:	460b      	mov	r3, r1
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	440b      	add	r3, r1
 800be88:	009b      	lsls	r3, r3, #2
 800be8a:	4413      	add	r3, r2
 800be8c:	613b      	str	r3, [r7, #16]
 800be8e:	e011      	b.n	800beb4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
  } else {
    if (start->next_entry_index == -1) {
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	689b      	ldr	r3, [r3, #8]
 800be94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be98:	d101      	bne.n	800be9e <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x3e>
      return nullptr;
 800be9a:	2300      	movs	r3, #0
 800be9c:	e029      	b.n	800bef2 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x92>
    }
    candidate_next_entry = &buffers_sorted_by_offset_[start->next_entry_index];
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	699a      	ldr	r2, [r3, #24]
 800bea2:	68bb      	ldr	r3, [r7, #8]
 800bea4:	689b      	ldr	r3, [r3, #8]
 800bea6:	4619      	mov	r1, r3
 800bea8:	460b      	mov	r3, r1
 800beaa:	005b      	lsls	r3, r3, #1
 800beac:	440b      	add	r3, r1
 800beae:	009b      	lsls	r3, r3, #2
 800beb0:	4413      	add	r3, r2
 800beb2:	613b      	str	r3, [r7, #16]
  }
  do {
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800beb4:	683b      	ldr	r3, [r7, #0]
 800beb6:	687a      	ldr	r2, [r7, #4]
 800beb8:	6939      	ldr	r1, [r7, #16]
 800beba:	68f8      	ldr	r0, [r7, #12]
 800bebc:	f7ff ffad 	bl	800be1a <_ZNK6tflite19GreedyMemoryPlanner22DoesEntryOverlapInTimeEPKNS0_9ListEntryEii>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d002      	beq.n	800becc <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x6c>
                               last_time_used)) {
      result = candidate_next_entry;
 800bec6:	693b      	ldr	r3, [r7, #16]
 800bec8:	617b      	str	r3, [r7, #20]
      break;
 800beca:	e011      	b.n	800bef0 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x90>
    }
    if (candidate_next_entry->next_entry_index == -1) {
 800becc:	693b      	ldr	r3, [r7, #16]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bed4:	d00b      	beq.n	800beee <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x8e>
      break;
    }
    candidate_next_entry =
        &buffers_sorted_by_offset_[candidate_next_entry->next_entry_index];
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	699a      	ldr	r2, [r3, #24]
 800beda:	693b      	ldr	r3, [r7, #16]
 800bedc:	689b      	ldr	r3, [r3, #8]
 800bede:	4619      	mov	r1, r3
 800bee0:	460b      	mov	r3, r1
 800bee2:	005b      	lsls	r3, r3, #1
 800bee4:	440b      	add	r3, r1
 800bee6:	009b      	lsls	r3, r3, #2
    candidate_next_entry =
 800bee8:	4413      	add	r3, r2
 800beea:	613b      	str	r3, [r7, #16]
    if (DoesEntryOverlapInTime(candidate_next_entry, first_time_used,
 800beec:	e7e2      	b.n	800beb4 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii+0x54>
      break;
 800beee:	bf00      	nop
  } while (true);
  return result;
 800bef0:	697b      	ldr	r3, [r7, #20]
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3718      	adds	r7, #24
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>:

void GreedyMemoryPlanner::CalculateOffsetsIfNeeded() {
 800befa:	b580      	push	{r7, lr}
 800befc:	b098      	sub	sp, #96	; 0x60
 800befe:	af00      	add	r7, sp, #0
 800bf00:	6078      	str	r0, [r7, #4]
  if (!need_to_calculate_offsets_ || (buffer_count_ == 0)) {
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf08:	f083 0301 	eor.w	r3, r3, #1
 800bf0c:	b2db      	uxtb	r3, r3
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f040 815f 	bne.w	800c1d2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	689b      	ldr	r3, [r3, #8]
 800bf18:	2b00      	cmp	r3, #0
 800bf1a:	f000 815a 	beq.w	800c1d2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d8>
    return;
  }
  need_to_calculate_offsets_ = false;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  // This helps find a more compact layout. Intuitively, you can think
  // about putting the large buffers in place first, and then the
  // smaller buffers can fit in the gaps, rather than fragmenting the
  // gaps with small buffers at the beginning. Add offline planned offsets
  // first in the list, since they have a predetermined offset.
  int idx_from_tail = buffer_count_;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  int idx_from_head = 0;
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800bf30:	2300      	movs	r3, #0
 800bf32:	657b      	str	r3, [r7, #84]	; 0x54
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf3a:	429a      	cmp	r2, r3
 800bf3c:	da4d      	bge.n	800bfda <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xe0>
    if (requirements_[i].offline_offset == kOnlinePlannedBuffer) {
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68da      	ldr	r2, [r3, #12]
 800bf42:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf44:	011b      	lsls	r3, r3, #4
 800bf46:	4413      	add	r3, r2
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf4e:	d11e      	bne.n	800bf8e <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x94>
      idx_from_tail--;
 800bf50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf52:	3b01      	subs	r3, #1
 800bf54:	65fb      	str	r3, [r7, #92]	; 0x5c
      buffer_sizes_sorted_[idx_from_tail] = requirements_[i].size;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	68da      	ldr	r2, [r3, #12]
 800bf5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf5c:	011b      	lsls	r3, r3, #4
 800bf5e:	441a      	add	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6919      	ldr	r1, [r3, #16]
 800bf64:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf66:	009b      	lsls	r3, r3, #2
 800bf68:	440b      	add	r3, r1
 800bf6a:	6812      	ldr	r2, [r2, #0]
 800bf6c:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_tail] = i;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	695a      	ldr	r2, [r3, #20]
 800bf72:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf74:	009b      	lsls	r3, r3, #2
 800bf76:	4413      	add	r3, r2
 800bf78:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bf7a:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = -1;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf82:	009b      	lsls	r3, r3, #2
 800bf84:	4413      	add	r3, r2
 800bf86:	f04f 32ff 	mov.w	r2, #4294967295
 800bf8a:	601a      	str	r2, [r3, #0]
 800bf8c:	e021      	b.n	800bfd2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0xd8>
    } else {
      buffer_sizes_sorted_[idx_from_head] = requirements_[i].size;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	68da      	ldr	r2, [r3, #12]
 800bf92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf94:	011b      	lsls	r3, r3, #4
 800bf96:	441a      	add	r2, r3
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	6919      	ldr	r1, [r3, #16]
 800bf9c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bf9e:	009b      	lsls	r3, r3, #2
 800bfa0:	440b      	add	r3, r1
 800bfa2:	6812      	ldr	r2, [r2, #0]
 800bfa4:	601a      	str	r2, [r3, #0]
      buffer_ids_sorted_[idx_from_head] = i;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	695a      	ldr	r2, [r3, #20]
 800bfaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfac:	009b      	lsls	r3, r3, #2
 800bfae:	4413      	add	r3, r2
 800bfb0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bfb2:	601a      	str	r2, [r3, #0]
      buffer_offsets_[i] = requirements_[i].offline_offset;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	68da      	ldr	r2, [r3, #12]
 800bfb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfba:	011b      	lsls	r3, r3, #4
 800bfbc:	441a      	add	r2, r3
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bfc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfc4:	009b      	lsls	r3, r3, #2
 800bfc6:	440b      	add	r3, r1
 800bfc8:	6852      	ldr	r2, [r2, #4]
 800bfca:	601a      	str	r2, [r3, #0]
      idx_from_head++;
 800bfcc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfce:	3301      	adds	r3, #1
 800bfd0:	65bb      	str	r3, [r7, #88]	; 0x58
  for (int i = 0; i < buffer_count_; ++i) {
 800bfd2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bfd4:	3301      	adds	r3, #1
 800bfd6:	657b      	str	r3, [r7, #84]	; 0x54
 800bfd8:	e7ac      	b.n	800bf34 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x3a>
    }
  }

  // This sorting algorithm is naive, and may end up taking a very long time
  // with hundreds of buffers. Do not sort the offline planned offsets.
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	691a      	ldr	r2, [r3, #16]
 800bfde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfe0:	009b      	lsls	r3, r3, #2
 800bfe2:	18d0      	adds	r0, r2, r3
                     &buffer_ids_sorted_[idx_from_head],
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	695a      	ldr	r2, [r3, #20]
 800bfe8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bfea:	009b      	lsls	r3, r3, #2
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800bfec:	18d1      	adds	r1, r2, r3
                     buffer_count_ - idx_from_head);
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	689a      	ldr	r2, [r3, #8]
  ReverseSortInPlace(&buffer_sizes_sorted_[idx_from_head],
 800bff2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800bff4:	1ad3      	subs	r3, r2, r3
 800bff6:	461a      	mov	r2, r3
 800bff8:	f7ff fdd0 	bl	800bb9c <_ZN6tflite18ReverseSortInPlaceEPiS0_i>
  // buffer_ids_sorted_.
  //   - If there are no offline planned offsets, the largest buffer will be
  //     first, and the buffers will be handled in size order.
  //   - If offline offsets are present, these will be handled first in order
  //     for the greedy algorithm to utilized gaps in the offline plan.
  first_entry_index_ = 0;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	621a      	str	r2, [r3, #32]
  next_free_entry_ = 1;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2201      	movs	r2, #1
 800c006:	61da      	str	r2, [r3, #28]
  ListEntry* first_entry = &buffers_sorted_by_offset_[first_entry_index_];
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	699a      	ldr	r2, [r3, #24]
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	6a1b      	ldr	r3, [r3, #32]
 800c010:	4619      	mov	r1, r3
 800c012:	460b      	mov	r3, r1
 800c014:	005b      	lsls	r3, r3, #1
 800c016:	440b      	add	r3, r1
 800c018:	009b      	lsls	r3, r3, #2
 800c01a:	4413      	add	r3, r2
 800c01c:	653b      	str	r3, [r7, #80]	; 0x50
  first_entry->next_entry_index = -1;  // to mark the entry as end of list
 800c01e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c020:	f04f 32ff 	mov.w	r2, #4294967295
 800c024:	609a      	str	r2, [r3, #8]
  int buffer_id = buffer_ids_sorted_[0];
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	695b      	ldr	r3, [r3, #20]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	63fb      	str	r3, [r7, #60]	; 0x3c
  first_entry->requirements_index = buffer_id;
 800c02e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c030:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c032:	605a      	str	r2, [r3, #4]
  if (requirements_[buffer_id].offline_offset == kOnlinePlannedBuffer) {
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	68da      	ldr	r2, [r3, #12]
 800c038:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c03a:	011b      	lsls	r3, r3, #4
 800c03c:	4413      	add	r3, r2
 800c03e:	685b      	ldr	r3, [r3, #4]
 800c040:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c044:	d106      	bne.n	800c054 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x15a>
    buffer_offsets_[buffer_id] = 0;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c04a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c04c:	009b      	lsls	r3, r3, #2
 800c04e:	4413      	add	r3, r2
 800c050:	2200      	movs	r2, #0
 800c052:	601a      	str	r2, [r3, #0]
  }
  first_entry->offset = buffer_offsets_[buffer_id];
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c058:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	681a      	ldr	r2, [r3, #0]
 800c060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c062:	601a      	str	r2, [r3, #0]

  // Work through the rest of the buffers to find a good gap to place each one.
  for (int i = 1; i < buffer_count_; ++i) {
 800c064:	2301      	movs	r3, #1
 800c066:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	689b      	ldr	r3, [r3, #8]
 800c06c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c06e:	429a      	cmp	r2, r3
 800c070:	f280 80b0 	bge.w	800c1d4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2da>
    // The id is the order the buffer was originally added by the client.
    buffer_id = buffer_ids_sorted_[i];
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	695a      	ldr	r2, [r3, #20]
 800c078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c07a:	009b      	lsls	r3, r3, #2
 800c07c:	4413      	add	r3, r2
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	63fb      	str	r3, [r7, #60]	; 0x3c
    // Look at what size and time range the buffer needs to be active.
    BufferRequirements* wanted_requirements = &requirements_[buffer_id];
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	68da      	ldr	r2, [r3, #12]
 800c086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c088:	011b      	lsls	r3, r3, #4
 800c08a:	4413      	add	r3, r2
 800c08c:	63bb      	str	r3, [r7, #56]	; 0x38
    const int wanted_size = wanted_requirements->size;
 800c08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c090:	681b      	ldr	r3, [r3, #0]
 800c092:	637b      	str	r3, [r7, #52]	; 0x34
    const int wanted_first_time_used = wanted_requirements->first_time_used;
 800c094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	633b      	str	r3, [r7, #48]	; 0x30
    const int wanted_last_time_used = wanted_requirements->last_time_used;
 800c09a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c09c:	68db      	ldr	r3, [r3, #12]
 800c09e:	62fb      	str	r3, [r7, #44]	; 0x2c
    // buffers are stored in the order of their starting position in the arena
    // so that it's easy to find the next buffer in memory, and so the gap.
    // The candidate_entry variable holds the buffer that we're considering
    // placing the current buffer after.

    int candidate_offset = 0;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	64bb      	str	r3, [r7, #72]	; 0x48
    // Loop through the offset-ordered list of buffers, looking for gaps.
    if (wanted_requirements->offline_offset == kOnlinePlannedBuffer) {
 800c0a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0a6:	685b      	ldr	r3, [r3, #4]
 800c0a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0ac:	d12d      	bne.n	800c10a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x210>
      ListEntry* prior_entry = nullptr;
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	647b      	str	r3, [r7, #68]	; 0x44
      while (true) {
        // Find out what the next active buffer is.
        ListEntry* next_entry = NextSimultaneouslyActiveBuffer(
            prior_entry, wanted_first_time_used, wanted_last_time_used);
 800c0b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c0b8:	6878      	ldr	r0, [r7, #4]
 800c0ba:	f7ff fed1 	bl	800be60 <_ZN6tflite19GreedyMemoryPlanner30NextSimultaneouslyActiveBufferEPKNS0_9ListEntryEii>
 800c0be:	62b8      	str	r0, [r7, #40]	; 0x28

        if (prior_entry) {
 800c0c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d012      	beq.n	800c0ec <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
          BufferRequirements* candidate_requirements =
              &requirements_[prior_entry->requirements_index];
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	68da      	ldr	r2, [r3, #12]
 800c0ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	011b      	lsls	r3, r3, #4
          BufferRequirements* candidate_requirements =
 800c0d0:	4413      	add	r3, r2
 800c0d2:	627b      	str	r3, [r7, #36]	; 0x24
          const int prior_entry_offset =
              prior_entry->offset + candidate_requirements->size;
 800c0d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c0d6:	681a      	ldr	r2, [r3, #0]
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	681b      	ldr	r3, [r3, #0]
          const int prior_entry_offset =
 800c0dc:	4413      	add	r3, r2
 800c0de:	623b      	str	r3, [r7, #32]
          if (prior_entry_offset > candidate_offset) {
 800c0e0:	6a3a      	ldr	r2, [r7, #32]
 800c0e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0e4:	429a      	cmp	r2, r3
 800c0e6:	dd01      	ble.n	800c0ec <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1f2>
            candidate_offset = prior_entry_offset;
 800c0e8:	6a3b      	ldr	r3, [r7, #32]
 800c0ea:	64bb      	str	r3, [r7, #72]	; 0x48
          }
        }
        if (next_entry == nullptr) {
 800c0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d00f      	beq.n	800c112 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x218>
          // We're at the end of the list, so we can always append the buffer
          // here.
          break;
        }
        // Find out how much space there is between us and the next buffer.
        const int gap = next_entry->offset - candidate_offset;
 800c0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0f4:	681a      	ldr	r2, [r3, #0]
 800c0f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c0f8:	1ad3      	subs	r3, r2, r3
 800c0fa:	61fb      	str	r3, [r7, #28]
        if (gap >= wanted_size) {
 800c0fc:	69fa      	ldr	r2, [r7, #28]
 800c0fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c100:	429a      	cmp	r2, r3
 800c102:	da08      	bge.n	800c116 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21c>
          // This entry has a big enough gap between it and the next, so
          // use it!
          break;
        }
        // The gap wasn't big enough, so move on to another candidate.
        prior_entry = next_entry;
 800c104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c106:	647b      	str	r3, [r7, #68]	; 0x44
      }
 800c108:	e7d3      	b.n	800c0b2 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x1b8>
    } else {
      // Offline planned offset are to be considered constant
      candidate_offset = wanted_requirements->offline_offset;
 800c10a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c10c:	685b      	ldr	r3, [r3, #4]
 800c10e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c110:	e002      	b.n	800c118 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800c112:	bf00      	nop
 800c114:	e000      	b.n	800c118 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x21e>
          break;
 800c116:	bf00      	nop
    }
    // At this point, we've either found a gap (possibly at the end of the
    // list) and want to place the buffer there, or there are no other active
    // buffers in this time range and so we can put it at offset zero.
    // Record the buffer's offset in our plan.
    buffer_offsets_[buffer_id] = candidate_offset;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	4413      	add	r3, r2
 800c122:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c124:	601a      	str	r2, [r3, #0]
    // Add the newly-placed buffer to our offset-ordered list, so that
    // subsequent passes can fit in their buffers around it.
    ListEntry* new_entry = &buffers_sorted_by_offset_[next_free_entry_];
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	699a      	ldr	r2, [r3, #24]
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	69db      	ldr	r3, [r3, #28]
 800c12e:	4619      	mov	r1, r3
 800c130:	460b      	mov	r3, r1
 800c132:	005b      	lsls	r3, r3, #1
 800c134:	440b      	add	r3, r1
 800c136:	009b      	lsls	r3, r3, #2
 800c138:	4413      	add	r3, r2
 800c13a:	61bb      	str	r3, [r7, #24]
    new_entry->offset = candidate_offset;
 800c13c:	69bb      	ldr	r3, [r7, #24]
 800c13e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c140:	601a      	str	r2, [r3, #0]
    new_entry->requirements_index = buffer_id;
 800c142:	69bb      	ldr	r3, [r7, #24]
 800c144:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c146:	605a      	str	r2, [r3, #4]
    const int new_entry_index = next_free_entry_;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	69db      	ldr	r3, [r3, #28]
 800c14c:	617b      	str	r3, [r7, #20]
    ++next_free_entry_;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	69db      	ldr	r3, [r3, #28]
 800c152:	1c5a      	adds	r2, r3, #1
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	61da      	str	r2, [r3, #28]

    if (first_entry->offset > candidate_offset) {
 800c158:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c15e:	429a      	cmp	r2, r3
 800c160:	da09      	bge.n	800c176 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x27c>
      // The new entry offset is smaller than the first entry offset =>
      // replace the first entry
      first_entry = new_entry;
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	653b      	str	r3, [r7, #80]	; 0x50
      first_entry->next_entry_index = first_entry_index_;
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	6a1a      	ldr	r2, [r3, #32]
 800c16a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c16c:	609a      	str	r2, [r3, #8]
      first_entry_index_ = new_entry_index;
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	697a      	ldr	r2, [r7, #20]
 800c172:	621a      	str	r2, [r3, #32]
 800c174:	e029      	b.n	800c1ca <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
    } else {
      ListEntry* current_entry = first_entry;
 800c176:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c178:	643b      	str	r3, [r7, #64]	; 0x40
      // Make sure that we insert the buffer at the correct place in the
      // buffer-offset-ordered list
      while (true) {
        const int next_entry_index = current_entry->next_entry_index;
 800c17a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c17c:	689b      	ldr	r3, [r3, #8]
 800c17e:	613b      	str	r3, [r7, #16]
        if (next_entry_index == -1) {
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c186:	d107      	bne.n	800c198 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x29e>
          // We're at the end of the list, so just add the new entry here.
          current_entry->next_entry_index = new_entry_index;
 800c188:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c18a:	697a      	ldr	r2, [r7, #20]
 800c18c:	609a      	str	r2, [r3, #8]
          new_entry->next_entry_index = -1;
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	f04f 32ff 	mov.w	r2, #4294967295
 800c194:	609a      	str	r2, [r3, #8]
          break;
 800c196:	e018      	b.n	800c1ca <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        // not at the end of the list -> take a look at next entry
        ListEntry* next_entry = &buffers_sorted_by_offset_[next_entry_index];
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	6999      	ldr	r1, [r3, #24]
 800c19c:	693a      	ldr	r2, [r7, #16]
 800c19e:	4613      	mov	r3, r2
 800c1a0:	005b      	lsls	r3, r3, #1
 800c1a2:	4413      	add	r3, r2
 800c1a4:	009b      	lsls	r3, r3, #2
 800c1a6:	440b      	add	r3, r1
 800c1a8:	60fb      	str	r3, [r7, #12]
        if (next_entry->offset > candidate_offset) {
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1b0:	429a      	cmp	r2, r3
 800c1b2:	da07      	bge.n	800c1c4 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2ca>
          // We're at the right spot to do an insertion and retain the sorting
          // order, so place the new entry here.
          new_entry->next_entry_index = current_entry->next_entry_index;
 800c1b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1b6:	689a      	ldr	r2, [r3, #8]
 800c1b8:	69bb      	ldr	r3, [r7, #24]
 800c1ba:	609a      	str	r2, [r3, #8]
          current_entry->next_entry_index = new_entry_index;
 800c1bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c1be:	697a      	ldr	r2, [r7, #20]
 800c1c0:	609a      	str	r2, [r3, #8]
          break;
 800c1c2:	e002      	b.n	800c1ca <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x2d0>
        }
        current_entry = next_entry;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	643b      	str	r3, [r7, #64]	; 0x40
      }
 800c1c8:	e7d7      	b.n	800c17a <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x280>
  for (int i = 1; i < buffer_count_; ++i) {
 800c1ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1cc:	3301      	adds	r3, #1
 800c1ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1d0:	e74a      	b.n	800c068 <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv+0x16e>
    return;
 800c1d2:	bf00      	nop
    }
  }
}
 800c1d4:	3760      	adds	r7, #96	; 0x60
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}

0800c1da <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv>:

size_t GreedyMemoryPlanner::GetMaximumMemorySize() {
 800c1da:	b580      	push	{r7, lr}
 800c1dc:	b086      	sub	sp, #24
 800c1de:	af00      	add	r7, sp, #0
 800c1e0:	6078      	str	r0, [r7, #4]
  CalculateOffsetsIfNeeded();
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f7ff fe89 	bl	800befa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if (buffer_count_ == 0) {
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d101      	bne.n	800c1f4 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x1a>
    return 0;
 800c1f0:	2300      	movs	r3, #0
 800c1f2:	e035      	b.n	800c260 <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x86>
  }
  ListEntry* entry = &buffers_sorted_by_offset_[first_entry_index_];
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	699a      	ldr	r2, [r3, #24]
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a1b      	ldr	r3, [r3, #32]
 800c1fc:	4619      	mov	r1, r3
 800c1fe:	460b      	mov	r3, r1
 800c200:	005b      	lsls	r3, r3, #1
 800c202:	440b      	add	r3, r1
 800c204:	009b      	lsls	r3, r3, #2
 800c206:	4413      	add	r3, r2
 800c208:	617b      	str	r3, [r7, #20]
  size_t max_size = 0;
 800c20a:	2300      	movs	r3, #0
 800c20c:	613b      	str	r3, [r7, #16]
  while (entry) {
 800c20e:	697b      	ldr	r3, [r7, #20]
 800c210:	2b00      	cmp	r3, #0
 800c212:	d024      	beq.n	800c25e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x84>
    BufferRequirements* requirements =
        &requirements_[entry->requirements_index];
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	68da      	ldr	r2, [r3, #12]
 800c218:	697b      	ldr	r3, [r7, #20]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	011b      	lsls	r3, r3, #4
    BufferRequirements* requirements =
 800c21e:	4413      	add	r3, r2
 800c220:	60fb      	str	r3, [r7, #12]
    // TODO(b/148246793): Update all size and offset variables types from
    //                    int to size_t
    const size_t current_size = entry->offset + requirements->size;
 800c222:	697b      	ldr	r3, [r7, #20]
 800c224:	681a      	ldr	r2, [r3, #0]
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	4413      	add	r3, r2
 800c22c:	60bb      	str	r3, [r7, #8]
    if (current_size > max_size) {
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	693b      	ldr	r3, [r7, #16]
 800c232:	429a      	cmp	r2, r3
 800c234:	d901      	bls.n	800c23a <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x60>
      max_size = current_size;
 800c236:	68bb      	ldr	r3, [r7, #8]
 800c238:	613b      	str	r3, [r7, #16]
    }
    if (entry->next_entry_index == -1) {
 800c23a:	697b      	ldr	r3, [r7, #20]
 800c23c:	689b      	ldr	r3, [r3, #8]
 800c23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c242:	d00b      	beq.n	800c25c <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x82>
      break;
    }
    entry = &buffers_sorted_by_offset_[entry->next_entry_index];
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	699a      	ldr	r2, [r3, #24]
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	4619      	mov	r1, r3
 800c24e:	460b      	mov	r3, r1
 800c250:	005b      	lsls	r3, r3, #1
 800c252:	440b      	add	r3, r1
 800c254:	009b      	lsls	r3, r3, #2
 800c256:	4413      	add	r3, r2
 800c258:	617b      	str	r3, [r7, #20]
  while (entry) {
 800c25a:	e7d8      	b.n	800c20e <_ZN6tflite19GreedyMemoryPlanner20GetMaximumMemorySizeEv+0x34>
      break;
 800c25c:	bf00      	nop
  }
  return max_size;
 800c25e:	693b      	ldr	r3, [r7, #16]
}
 800c260:	4618      	mov	r0, r3
 800c262:	3718      	adds	r7, #24
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <_ZN6tflite19GreedyMemoryPlanner14GetBufferCountEv>:
    line[kLineWidth] = 0;
    TF_LITE_REPORT_ERROR(error_reporter, "%s", (const char*)line);
  }
}

int GreedyMemoryPlanner::GetBufferCount() { return buffer_count_; }
 800c268:	b480      	push	{r7}
 800c26a:	b083      	sub	sp, #12
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	689b      	ldr	r3, [r3, #8]
 800c274:	4618      	mov	r0, r3
 800c276:	370c      	adds	r7, #12
 800c278:	46bd      	mov	sp, r7
 800c27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c27e:	4770      	bx	lr

0800c280 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi>:

TfLiteStatus GreedyMemoryPlanner::GetOffsetForBuffer(
    tflite::ErrorReporter* error_reporter, int buffer_index, int* offset) {
 800c280:	b580      	push	{r7, lr}
 800c282:	b084      	sub	sp, #16
 800c284:	af00      	add	r7, sp, #0
 800c286:	60f8      	str	r0, [r7, #12]
 800c288:	60b9      	str	r1, [r7, #8]
 800c28a:	607a      	str	r2, [r7, #4]
 800c28c:	603b      	str	r3, [r7, #0]
  CalculateOffsetsIfNeeded();
 800c28e:	68f8      	ldr	r0, [r7, #12]
 800c290:	f7ff fe33 	bl	800befa <_ZN6tflite19GreedyMemoryPlanner24CalculateOffsetsIfNeededEv>
  if ((buffer_index < 0) || (buffer_index >= buffer_count_)) {
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	2b00      	cmp	r3, #0
 800c298:	db04      	blt.n	800c2a4 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x24>
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	689b      	ldr	r3, [r3, #8]
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	db08      	blt.n	800c2b6 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x36>
    TF_LITE_REPORT_ERROR(error_reporter,
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	689b      	ldr	r3, [r3, #8]
 800c2a8:	687a      	ldr	r2, [r7, #4]
 800c2aa:	4909      	ldr	r1, [pc, #36]	; (800c2d0 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x50>)
 800c2ac:	68b8      	ldr	r0, [r7, #8]
 800c2ae:	f7f8 f8ed 	bl	800448c <_ZN6tflite13ErrorReporter6ReportEPKcz>
                         "buffer index %d is outside range 0 to %d",
                         buffer_index, buffer_count_);
    return kTfLiteError;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e008      	b.n	800c2c8 <_ZN6tflite19GreedyMemoryPlanner18GetOffsetForBufferEPNS_13ErrorReporterEiPi+0x48>
  }
  *offset = buffer_offsets_[buffer_index];
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	009b      	lsls	r3, r3, #2
 800c2be:	4413      	add	r3, r2
 800c2c0:	681a      	ldr	r2, [r3, #0]
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 800c2c6:	2300      	movs	r3, #0
}
 800c2c8:	4618      	mov	r0, r3
 800c2ca:	3710      	adds	r7, #16
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}
 800c2d0:	08011bd4 	.word	0x08011bd4

0800c2d4 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>:
  int8_t deprecated_builtin_code() const {
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	6078      	str	r0, [r7, #4]
    return GetField<int8_t>(VT_DEPRECATED_BUILTIN_CODE, 0);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	2104      	movs	r1, #4
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	f7f8 fb89 	bl	80049fa <_ZNK11flatbuffers5Table8GetFieldIaEET_tS2_>
 800c2e8:	4603      	mov	r3, r0
  }
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <_ZNK6tflite12OperatorCode12builtin_codeEv>:
  tflite::BuiltinOperator builtin_code() const {
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b082      	sub	sp, #8
 800c2f6:	af00      	add	r7, sp, #0
 800c2f8:	6078      	str	r0, [r7, #4]
    return static_cast<tflite::BuiltinOperator>(GetField<int32_t>(VT_BUILTIN_CODE, 0));
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	210a      	movs	r1, #10
 800c300:	4618      	mov	r0, r3
 800c302:	f7f8 fb4c 	bl	800499e <_ZNK11flatbuffers5Table8GetFieldIlEET_tS2_>
 800c306:	4603      	mov	r3, r0
 800c308:	b2db      	uxtb	r3, r3
  }
 800c30a:	4618      	mov	r0, r3
 800c30c:	3708      	adds	r7, #8
 800c30e:	46bd      	mov	sp, r7
 800c310:	bd80      	pop	{r7, pc}

0800c312 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE>:
// assigned to the `deprecated_builtin_code` field. In such cases, the
// value of the `builtin_code` field should be used for the builtin operator
// code. In the case, the maximum value of the two fields will be the value of
// the `builtin_code` as the right value.

BuiltinOperator GetBuiltinCode(const OperatorCode* op_code) {
 800c312:	b580      	push	{r7, lr}
 800c314:	b084      	sub	sp, #16
 800c316:	af00      	add	r7, sp, #0
 800c318:	6078      	str	r0, [r7, #4]
  // Caller should guarantee that the given argument value is not a nullptr.
  TFLITE_DCHECK(op_code != nullptr);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <_ZN6tflite14GetBuiltinCodeEPKNS_12OperatorCodeE+0x12>
 800c320:	f000 f918 	bl	800c554 <abort>

  return std::max(
      op_code->builtin_code(),
 800c324:	6878      	ldr	r0, [r7, #4]
 800c326:	f7ff ffe4 	bl	800c2f2 <_ZNK6tflite12OperatorCode12builtin_codeEv>
 800c32a:	4603      	mov	r3, r0
 800c32c:	73bb      	strb	r3, [r7, #14]
      static_cast<BuiltinOperator>(op_code->deprecated_builtin_code()));
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f7ff ffd0 	bl	800c2d4 <_ZNK6tflite12OperatorCode23deprecated_builtin_codeEv>
 800c334:	4603      	mov	r3, r0
 800c336:	b2db      	uxtb	r3, r3
 800c338:	73fb      	strb	r3, [r7, #15]
 800c33a:	f107 020f 	add.w	r2, r7, #15
 800c33e:	f107 030e 	add.w	r3, r7, #14
 800c342:	4611      	mov	r1, r2
 800c344:	4618      	mov	r0, r3
 800c346:	f000 f806 	bl	800c356 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>
 800c34a:	4603      	mov	r3, r0
 800c34c:	781b      	ldrb	r3, [r3, #0]
}
 800c34e:	4618      	mov	r0, r3
 800c350:	3710      	adds	r7, #16
 800c352:	46bd      	mov	sp, r7
 800c354:	bd80      	pop	{r7, pc}

0800c356 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_>:
    max(const _Tp& __a, const _Tp& __b)
 800c356:	b480      	push	{r7}
 800c358:	b083      	sub	sp, #12
 800c35a:	af00      	add	r7, sp, #0
 800c35c:	6078      	str	r0, [r7, #4]
 800c35e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	781a      	ldrb	r2, [r3, #0]
 800c364:	683b      	ldr	r3, [r7, #0]
 800c366:	781b      	ldrb	r3, [r3, #0]
 800c368:	429a      	cmp	r2, r3
 800c36a:	d201      	bcs.n	800c370 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1a>
	return __b;
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	e000      	b.n	800c372 <_ZSt3maxIN6tflite15BuiltinOperatorEERKT_S4_S4_+0x1c>
      return __a;
 800c370:	687b      	ldr	r3, [r7, #4]
    }
 800c372:	4618      	mov	r0, r3
 800c374:	370c      	adds	r7, #12
 800c376:	46bd      	mov	sp, r7
 800c378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37c:	4770      	bx	lr

0800c37e <_ZdaPv>:
 800c37e:	f000 b82f 	b.w	800c3e0 <_ZdlPv>

0800c382 <__cxa_pure_virtual>:
 800c382:	b508      	push	{r3, lr}
 800c384:	f000 f83a 	bl	800c3fc <_ZSt9terminatev>

0800c388 <_Znaj>:
 800c388:	f000 b802 	b.w	800c390 <_Znwj>

0800c38c <_ZdlPvj>:
 800c38c:	f000 b828 	b.w	800c3e0 <_ZdlPv>

0800c390 <_Znwj>:
 800c390:	b510      	push	{r4, lr}
 800c392:	2800      	cmp	r0, #0
 800c394:	bf14      	ite	ne
 800c396:	4604      	movne	r4, r0
 800c398:	2401      	moveq	r4, #1
 800c39a:	4620      	mov	r0, r4
 800c39c:	f000 f942 	bl	800c624 <malloc>
 800c3a0:	b930      	cbnz	r0, 800c3b0 <_Znwj+0x20>
 800c3a2:	f000 f815 	bl	800c3d0 <_ZSt15get_new_handlerv>
 800c3a6:	b908      	cbnz	r0, 800c3ac <_Znwj+0x1c>
 800c3a8:	f000 f8d4 	bl	800c554 <abort>
 800c3ac:	4780      	blx	r0
 800c3ae:	e7f4      	b.n	800c39a <_Znwj+0xa>
 800c3b0:	bd10      	pop	{r4, pc}

0800c3b2 <__cxa_guard_acquire>:
 800c3b2:	6803      	ldr	r3, [r0, #0]
 800c3b4:	07db      	lsls	r3, r3, #31
 800c3b6:	d406      	bmi.n	800c3c6 <__cxa_guard_acquire+0x14>
 800c3b8:	7843      	ldrb	r3, [r0, #1]
 800c3ba:	b103      	cbz	r3, 800c3be <__cxa_guard_acquire+0xc>
 800c3bc:	deff      	udf	#255	; 0xff
 800c3be:	2301      	movs	r3, #1
 800c3c0:	7043      	strb	r3, [r0, #1]
 800c3c2:	4618      	mov	r0, r3
 800c3c4:	4770      	bx	lr
 800c3c6:	2000      	movs	r0, #0
 800c3c8:	4770      	bx	lr

0800c3ca <__cxa_guard_release>:
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	6003      	str	r3, [r0, #0]
 800c3ce:	4770      	bx	lr

0800c3d0 <_ZSt15get_new_handlerv>:
 800c3d0:	4b02      	ldr	r3, [pc, #8]	; (800c3dc <_ZSt15get_new_handlerv+0xc>)
 800c3d2:	6818      	ldr	r0, [r3, #0]
 800c3d4:	f3bf 8f5b 	dmb	ish
 800c3d8:	4770      	bx	lr
 800c3da:	bf00      	nop
 800c3dc:	20001720 	.word	0x20001720

0800c3e0 <_ZdlPv>:
 800c3e0:	f000 b928 	b.w	800c634 <free>

0800c3e4 <_ZN10__cxxabiv111__terminateEPFvvE>:
 800c3e4:	b508      	push	{r3, lr}
 800c3e6:	4780      	blx	r0
 800c3e8:	f000 f8b4 	bl	800c554 <abort>

0800c3ec <_ZSt13get_terminatev>:
 800c3ec:	4b02      	ldr	r3, [pc, #8]	; (800c3f8 <_ZSt13get_terminatev+0xc>)
 800c3ee:	6818      	ldr	r0, [r3, #0]
 800c3f0:	f3bf 8f5b 	dmb	ish
 800c3f4:	4770      	bx	lr
 800c3f6:	bf00      	nop
 800c3f8:	20000b60 	.word	0x20000b60

0800c3fc <_ZSt9terminatev>:
 800c3fc:	b508      	push	{r3, lr}
 800c3fe:	f7ff fff5 	bl	800c3ec <_ZSt13get_terminatev>
 800c402:	f7ff ffef 	bl	800c3e4 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

0800c408 <frexp>:
 800c408:	b570      	push	{r4, r5, r6, lr}
 800c40a:	2100      	movs	r1, #0
 800c40c:	ec55 4b10 	vmov	r4, r5, d0
 800c410:	6001      	str	r1, [r0, #0]
 800c412:	4916      	ldr	r1, [pc, #88]	; (800c46c <frexp+0x64>)
 800c414:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c418:	428b      	cmp	r3, r1
 800c41a:	4606      	mov	r6, r0
 800c41c:	462a      	mov	r2, r5
 800c41e:	dc22      	bgt.n	800c466 <frexp+0x5e>
 800c420:	ee10 1a10 	vmov	r1, s0
 800c424:	4319      	orrs	r1, r3
 800c426:	d01e      	beq.n	800c466 <frexp+0x5e>
 800c428:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c42c:	da0d      	bge.n	800c44a <frexp+0x42>
 800c42e:	2200      	movs	r2, #0
 800c430:	4b0f      	ldr	r3, [pc, #60]	; (800c470 <frexp+0x68>)
 800c432:	ee10 0a10 	vmov	r0, s0
 800c436:	4629      	mov	r1, r5
 800c438:	f7f4 f8ee 	bl	8000618 <__aeabi_dmul>
 800c43c:	460a      	mov	r2, r1
 800c43e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c442:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800c446:	4604      	mov	r4, r0
 800c448:	6031      	str	r1, [r6, #0]
 800c44a:	6831      	ldr	r1, [r6, #0]
 800c44c:	151b      	asrs	r3, r3, #20
 800c44e:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800c452:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800c456:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
 800c45a:	440b      	add	r3, r1
 800c45c:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800c460:	6033      	str	r3, [r6, #0]
 800c462:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800c466:	ec45 4b10 	vmov	d0, r4, r5
 800c46a:	bd70      	pop	{r4, r5, r6, pc}
 800c46c:	7fefffff 	.word	0x7fefffff
 800c470:	43500000 	.word	0x43500000

0800c474 <round>:
 800c474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c476:	ec57 6b10 	vmov	r6, r7, d0
 800c47a:	f3c7 500a 	ubfx	r0, r7, #20, #11
 800c47e:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 800c482:	2c13      	cmp	r4, #19
 800c484:	463b      	mov	r3, r7
 800c486:	463d      	mov	r5, r7
 800c488:	dc17      	bgt.n	800c4ba <round+0x46>
 800c48a:	2c00      	cmp	r4, #0
 800c48c:	da09      	bge.n	800c4a2 <round+0x2e>
 800c48e:	3401      	adds	r4, #1
 800c490:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 800c494:	d103      	bne.n	800c49e <round+0x2a>
 800c496:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800c49a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c49e:	2100      	movs	r1, #0
 800c4a0:	e02c      	b.n	800c4fc <round+0x88>
 800c4a2:	4a18      	ldr	r2, [pc, #96]	; (800c504 <round+0x90>)
 800c4a4:	4122      	asrs	r2, r4
 800c4a6:	4217      	tst	r7, r2
 800c4a8:	d100      	bne.n	800c4ac <round+0x38>
 800c4aa:	b19e      	cbz	r6, 800c4d4 <round+0x60>
 800c4ac:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800c4b0:	4123      	asrs	r3, r4
 800c4b2:	442b      	add	r3, r5
 800c4b4:	ea23 0302 	bic.w	r3, r3, r2
 800c4b8:	e7f1      	b.n	800c49e <round+0x2a>
 800c4ba:	2c33      	cmp	r4, #51	; 0x33
 800c4bc:	dd0d      	ble.n	800c4da <round+0x66>
 800c4be:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800c4c2:	d107      	bne.n	800c4d4 <round+0x60>
 800c4c4:	4630      	mov	r0, r6
 800c4c6:	4639      	mov	r1, r7
 800c4c8:	ee10 2a10 	vmov	r2, s0
 800c4cc:	f7f3 feee 	bl	80002ac <__adddf3>
 800c4d0:	4606      	mov	r6, r0
 800c4d2:	460f      	mov	r7, r1
 800c4d4:	ec47 6b10 	vmov	d0, r6, r7
 800c4d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4da:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 800c4de:	f04f 30ff 	mov.w	r0, #4294967295
 800c4e2:	40d0      	lsrs	r0, r2
 800c4e4:	4206      	tst	r6, r0
 800c4e6:	d0f5      	beq.n	800c4d4 <round+0x60>
 800c4e8:	2201      	movs	r2, #1
 800c4ea:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800c4ee:	fa02 f404 	lsl.w	r4, r2, r4
 800c4f2:	1931      	adds	r1, r6, r4
 800c4f4:	bf28      	it	cs
 800c4f6:	189b      	addcs	r3, r3, r2
 800c4f8:	ea21 0100 	bic.w	r1, r1, r0
 800c4fc:	461f      	mov	r7, r3
 800c4fe:	460e      	mov	r6, r1
 800c500:	e7e8      	b.n	800c4d4 <round+0x60>
 800c502:	bf00      	nop
 800c504:	000fffff 	.word	0x000fffff

0800c508 <roundf>:
 800c508:	ee10 0a10 	vmov	r0, s0
 800c50c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c510:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800c514:	2a16      	cmp	r2, #22
 800c516:	dc15      	bgt.n	800c544 <roundf+0x3c>
 800c518:	2a00      	cmp	r2, #0
 800c51a:	da08      	bge.n	800c52e <roundf+0x26>
 800c51c:	3201      	adds	r2, #1
 800c51e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800c522:	d101      	bne.n	800c528 <roundf+0x20>
 800c524:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800c528:	ee00 3a10 	vmov	s0, r3
 800c52c:	4770      	bx	lr
 800c52e:	4908      	ldr	r1, [pc, #32]	; (800c550 <roundf+0x48>)
 800c530:	4111      	asrs	r1, r2
 800c532:	4208      	tst	r0, r1
 800c534:	d0fa      	beq.n	800c52c <roundf+0x24>
 800c536:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800c53a:	4113      	asrs	r3, r2
 800c53c:	4403      	add	r3, r0
 800c53e:	ea23 0301 	bic.w	r3, r3, r1
 800c542:	e7f1      	b.n	800c528 <roundf+0x20>
 800c544:	2a80      	cmp	r2, #128	; 0x80
 800c546:	d1f1      	bne.n	800c52c <roundf+0x24>
 800c548:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c54c:	4770      	bx	lr
 800c54e:	bf00      	nop
 800c550:	007fffff 	.word	0x007fffff

0800c554 <abort>:
 800c554:	b508      	push	{r3, lr}
 800c556:	2006      	movs	r0, #6
 800c558:	f000 ff1c 	bl	800d394 <raise>
 800c55c:	2001      	movs	r0, #1
 800c55e:	f7f5 fc43 	bl	8001de8 <_exit>
	...

0800c564 <__assert_func>:
 800c564:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c566:	461c      	mov	r4, r3
 800c568:	4b09      	ldr	r3, [pc, #36]	; (800c590 <__assert_func+0x2c>)
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	4605      	mov	r5, r0
 800c56e:	68d8      	ldr	r0, [r3, #12]
 800c570:	b152      	cbz	r2, 800c588 <__assert_func+0x24>
 800c572:	4b08      	ldr	r3, [pc, #32]	; (800c594 <__assert_func+0x30>)
 800c574:	9100      	str	r1, [sp, #0]
 800c576:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800c57a:	4907      	ldr	r1, [pc, #28]	; (800c598 <__assert_func+0x34>)
 800c57c:	462b      	mov	r3, r5
 800c57e:	4622      	mov	r2, r4
 800c580:	f000 f81a 	bl	800c5b8 <fiprintf>
 800c584:	f7ff ffe6 	bl	800c554 <abort>
 800c588:	4b04      	ldr	r3, [pc, #16]	; (800c59c <__assert_func+0x38>)
 800c58a:	461a      	mov	r2, r3
 800c58c:	e7f2      	b.n	800c574 <__assert_func+0x10>
 800c58e:	bf00      	nop
 800c590:	20000b64 	.word	0x20000b64
 800c594:	080128e0 	.word	0x080128e0
 800c598:	080128ed 	.word	0x080128ed
 800c59c:	0801291b 	.word	0x0801291b

0800c5a0 <atexit>:
 800c5a0:	2300      	movs	r3, #0
 800c5a2:	4601      	mov	r1, r0
 800c5a4:	461a      	mov	r2, r3
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	f001 b802 	b.w	800d5b0 <__register_exitproc>

0800c5ac <__errno>:
 800c5ac:	4b01      	ldr	r3, [pc, #4]	; (800c5b4 <__errno+0x8>)
 800c5ae:	6818      	ldr	r0, [r3, #0]
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	20000b64 	.word	0x20000b64

0800c5b8 <fiprintf>:
 800c5b8:	b40e      	push	{r1, r2, r3}
 800c5ba:	b503      	push	{r0, r1, lr}
 800c5bc:	4601      	mov	r1, r0
 800c5be:	ab03      	add	r3, sp, #12
 800c5c0:	4805      	ldr	r0, [pc, #20]	; (800c5d8 <fiprintf+0x20>)
 800c5c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5c6:	6800      	ldr	r0, [r0, #0]
 800c5c8:	9301      	str	r3, [sp, #4]
 800c5ca:	f000 f939 	bl	800c840 <_vfiprintf_r>
 800c5ce:	b002      	add	sp, #8
 800c5d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5d4:	b003      	add	sp, #12
 800c5d6:	4770      	bx	lr
 800c5d8:	20000b64 	.word	0x20000b64

0800c5dc <__libc_init_array>:
 800c5dc:	b570      	push	{r4, r5, r6, lr}
 800c5de:	4e0d      	ldr	r6, [pc, #52]	; (800c614 <__libc_init_array+0x38>)
 800c5e0:	4c0d      	ldr	r4, [pc, #52]	; (800c618 <__libc_init_array+0x3c>)
 800c5e2:	1ba4      	subs	r4, r4, r6
 800c5e4:	10a4      	asrs	r4, r4, #2
 800c5e6:	2500      	movs	r5, #0
 800c5e8:	42a5      	cmp	r5, r4
 800c5ea:	d109      	bne.n	800c600 <__libc_init_array+0x24>
 800c5ec:	4e0b      	ldr	r6, [pc, #44]	; (800c61c <__libc_init_array+0x40>)
 800c5ee:	4c0c      	ldr	r4, [pc, #48]	; (800c620 <__libc_init_array+0x44>)
 800c5f0:	f002 fdaa 	bl	800f148 <_init>
 800c5f4:	1ba4      	subs	r4, r4, r6
 800c5f6:	10a4      	asrs	r4, r4, #2
 800c5f8:	2500      	movs	r5, #0
 800c5fa:	42a5      	cmp	r5, r4
 800c5fc:	d105      	bne.n	800c60a <__libc_init_array+0x2e>
 800c5fe:	bd70      	pop	{r4, r5, r6, pc}
 800c600:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c604:	4798      	blx	r3
 800c606:	3501      	adds	r5, #1
 800c608:	e7ee      	b.n	800c5e8 <__libc_init_array+0xc>
 800c60a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c60e:	4798      	blx	r3
 800c610:	3501      	adds	r5, #1
 800c612:	e7f2      	b.n	800c5fa <__libc_init_array+0x1e>
 800c614:	08012be8 	.word	0x08012be8
 800c618:	08012be8 	.word	0x08012be8
 800c61c:	08012be8 	.word	0x08012be8
 800c620:	08012bec 	.word	0x08012bec

0800c624 <malloc>:
 800c624:	4b02      	ldr	r3, [pc, #8]	; (800c630 <malloc+0xc>)
 800c626:	4601      	mov	r1, r0
 800c628:	6818      	ldr	r0, [r3, #0]
 800c62a:	f000 b885 	b.w	800c738 <_malloc_r>
 800c62e:	bf00      	nop
 800c630:	20000b64 	.word	0x20000b64

0800c634 <free>:
 800c634:	4b02      	ldr	r3, [pc, #8]	; (800c640 <free+0xc>)
 800c636:	4601      	mov	r1, r0
 800c638:	6818      	ldr	r0, [r3, #0]
 800c63a:	f000 b82f 	b.w	800c69c <_free_r>
 800c63e:	bf00      	nop
 800c640:	20000b64 	.word	0x20000b64

0800c644 <memcpy>:
 800c644:	b510      	push	{r4, lr}
 800c646:	1e43      	subs	r3, r0, #1
 800c648:	440a      	add	r2, r1
 800c64a:	4291      	cmp	r1, r2
 800c64c:	d100      	bne.n	800c650 <memcpy+0xc>
 800c64e:	bd10      	pop	{r4, pc}
 800c650:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c654:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c658:	e7f7      	b.n	800c64a <memcpy+0x6>

0800c65a <memmove>:
 800c65a:	4288      	cmp	r0, r1
 800c65c:	b510      	push	{r4, lr}
 800c65e:	eb01 0302 	add.w	r3, r1, r2
 800c662:	d807      	bhi.n	800c674 <memmove+0x1a>
 800c664:	1e42      	subs	r2, r0, #1
 800c666:	4299      	cmp	r1, r3
 800c668:	d00a      	beq.n	800c680 <memmove+0x26>
 800c66a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c66e:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c672:	e7f8      	b.n	800c666 <memmove+0xc>
 800c674:	4283      	cmp	r3, r0
 800c676:	d9f5      	bls.n	800c664 <memmove+0xa>
 800c678:	1881      	adds	r1, r0, r2
 800c67a:	1ad2      	subs	r2, r2, r3
 800c67c:	42d3      	cmn	r3, r2
 800c67e:	d100      	bne.n	800c682 <memmove+0x28>
 800c680:	bd10      	pop	{r4, pc}
 800c682:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c686:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c68a:	e7f7      	b.n	800c67c <memmove+0x22>

0800c68c <memset>:
 800c68c:	4402      	add	r2, r0
 800c68e:	4603      	mov	r3, r0
 800c690:	4293      	cmp	r3, r2
 800c692:	d100      	bne.n	800c696 <memset+0xa>
 800c694:	4770      	bx	lr
 800c696:	f803 1b01 	strb.w	r1, [r3], #1
 800c69a:	e7f9      	b.n	800c690 <memset+0x4>

0800c69c <_free_r>:
 800c69c:	b538      	push	{r3, r4, r5, lr}
 800c69e:	4605      	mov	r5, r0
 800c6a0:	2900      	cmp	r1, #0
 800c6a2:	d045      	beq.n	800c730 <_free_r+0x94>
 800c6a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6a8:	1f0c      	subs	r4, r1, #4
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	bfb8      	it	lt
 800c6ae:	18e4      	addlt	r4, r4, r3
 800c6b0:	f002 f812 	bl	800e6d8 <__malloc_lock>
 800c6b4:	4a1f      	ldr	r2, [pc, #124]	; (800c734 <_free_r+0x98>)
 800c6b6:	6813      	ldr	r3, [r2, #0]
 800c6b8:	4610      	mov	r0, r2
 800c6ba:	b933      	cbnz	r3, 800c6ca <_free_r+0x2e>
 800c6bc:	6063      	str	r3, [r4, #4]
 800c6be:	6014      	str	r4, [r2, #0]
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6c6:	f002 b808 	b.w	800e6da <__malloc_unlock>
 800c6ca:	42a3      	cmp	r3, r4
 800c6cc:	d90c      	bls.n	800c6e8 <_free_r+0x4c>
 800c6ce:	6821      	ldr	r1, [r4, #0]
 800c6d0:	1862      	adds	r2, r4, r1
 800c6d2:	4293      	cmp	r3, r2
 800c6d4:	bf04      	itt	eq
 800c6d6:	681a      	ldreq	r2, [r3, #0]
 800c6d8:	685b      	ldreq	r3, [r3, #4]
 800c6da:	6063      	str	r3, [r4, #4]
 800c6dc:	bf04      	itt	eq
 800c6de:	1852      	addeq	r2, r2, r1
 800c6e0:	6022      	streq	r2, [r4, #0]
 800c6e2:	6004      	str	r4, [r0, #0]
 800c6e4:	e7ec      	b.n	800c6c0 <_free_r+0x24>
 800c6e6:	4613      	mov	r3, r2
 800c6e8:	685a      	ldr	r2, [r3, #4]
 800c6ea:	b10a      	cbz	r2, 800c6f0 <_free_r+0x54>
 800c6ec:	42a2      	cmp	r2, r4
 800c6ee:	d9fa      	bls.n	800c6e6 <_free_r+0x4a>
 800c6f0:	6819      	ldr	r1, [r3, #0]
 800c6f2:	1858      	adds	r0, r3, r1
 800c6f4:	42a0      	cmp	r0, r4
 800c6f6:	d10b      	bne.n	800c710 <_free_r+0x74>
 800c6f8:	6820      	ldr	r0, [r4, #0]
 800c6fa:	4401      	add	r1, r0
 800c6fc:	1858      	adds	r0, r3, r1
 800c6fe:	4282      	cmp	r2, r0
 800c700:	6019      	str	r1, [r3, #0]
 800c702:	d1dd      	bne.n	800c6c0 <_free_r+0x24>
 800c704:	6810      	ldr	r0, [r2, #0]
 800c706:	6852      	ldr	r2, [r2, #4]
 800c708:	605a      	str	r2, [r3, #4]
 800c70a:	4401      	add	r1, r0
 800c70c:	6019      	str	r1, [r3, #0]
 800c70e:	e7d7      	b.n	800c6c0 <_free_r+0x24>
 800c710:	d902      	bls.n	800c718 <_free_r+0x7c>
 800c712:	230c      	movs	r3, #12
 800c714:	602b      	str	r3, [r5, #0]
 800c716:	e7d3      	b.n	800c6c0 <_free_r+0x24>
 800c718:	6820      	ldr	r0, [r4, #0]
 800c71a:	1821      	adds	r1, r4, r0
 800c71c:	428a      	cmp	r2, r1
 800c71e:	bf04      	itt	eq
 800c720:	6811      	ldreq	r1, [r2, #0]
 800c722:	6852      	ldreq	r2, [r2, #4]
 800c724:	6062      	str	r2, [r4, #4]
 800c726:	bf04      	itt	eq
 800c728:	1809      	addeq	r1, r1, r0
 800c72a:	6021      	streq	r1, [r4, #0]
 800c72c:	605c      	str	r4, [r3, #4]
 800c72e:	e7c7      	b.n	800c6c0 <_free_r+0x24>
 800c730:	bd38      	pop	{r3, r4, r5, pc}
 800c732:	bf00      	nop
 800c734:	20001724 	.word	0x20001724

0800c738 <_malloc_r>:
 800c738:	b570      	push	{r4, r5, r6, lr}
 800c73a:	1ccd      	adds	r5, r1, #3
 800c73c:	f025 0503 	bic.w	r5, r5, #3
 800c740:	3508      	adds	r5, #8
 800c742:	2d0c      	cmp	r5, #12
 800c744:	bf38      	it	cc
 800c746:	250c      	movcc	r5, #12
 800c748:	2d00      	cmp	r5, #0
 800c74a:	4606      	mov	r6, r0
 800c74c:	db01      	blt.n	800c752 <_malloc_r+0x1a>
 800c74e:	42a9      	cmp	r1, r5
 800c750:	d903      	bls.n	800c75a <_malloc_r+0x22>
 800c752:	230c      	movs	r3, #12
 800c754:	6033      	str	r3, [r6, #0]
 800c756:	2000      	movs	r0, #0
 800c758:	bd70      	pop	{r4, r5, r6, pc}
 800c75a:	f001 ffbd 	bl	800e6d8 <__malloc_lock>
 800c75e:	4a21      	ldr	r2, [pc, #132]	; (800c7e4 <_malloc_r+0xac>)
 800c760:	6814      	ldr	r4, [r2, #0]
 800c762:	4621      	mov	r1, r4
 800c764:	b991      	cbnz	r1, 800c78c <_malloc_r+0x54>
 800c766:	4c20      	ldr	r4, [pc, #128]	; (800c7e8 <_malloc_r+0xb0>)
 800c768:	6823      	ldr	r3, [r4, #0]
 800c76a:	b91b      	cbnz	r3, 800c774 <_malloc_r+0x3c>
 800c76c:	4630      	mov	r0, r6
 800c76e:	f000 fdd9 	bl	800d324 <_sbrk_r>
 800c772:	6020      	str	r0, [r4, #0]
 800c774:	4629      	mov	r1, r5
 800c776:	4630      	mov	r0, r6
 800c778:	f000 fdd4 	bl	800d324 <_sbrk_r>
 800c77c:	1c43      	adds	r3, r0, #1
 800c77e:	d124      	bne.n	800c7ca <_malloc_r+0x92>
 800c780:	230c      	movs	r3, #12
 800c782:	6033      	str	r3, [r6, #0]
 800c784:	4630      	mov	r0, r6
 800c786:	f001 ffa8 	bl	800e6da <__malloc_unlock>
 800c78a:	e7e4      	b.n	800c756 <_malloc_r+0x1e>
 800c78c:	680b      	ldr	r3, [r1, #0]
 800c78e:	1b5b      	subs	r3, r3, r5
 800c790:	d418      	bmi.n	800c7c4 <_malloc_r+0x8c>
 800c792:	2b0b      	cmp	r3, #11
 800c794:	d90f      	bls.n	800c7b6 <_malloc_r+0x7e>
 800c796:	600b      	str	r3, [r1, #0]
 800c798:	50cd      	str	r5, [r1, r3]
 800c79a:	18cc      	adds	r4, r1, r3
 800c79c:	4630      	mov	r0, r6
 800c79e:	f001 ff9c 	bl	800e6da <__malloc_unlock>
 800c7a2:	f104 000b 	add.w	r0, r4, #11
 800c7a6:	1d23      	adds	r3, r4, #4
 800c7a8:	f020 0007 	bic.w	r0, r0, #7
 800c7ac:	1ac3      	subs	r3, r0, r3
 800c7ae:	d0d3      	beq.n	800c758 <_malloc_r+0x20>
 800c7b0:	425a      	negs	r2, r3
 800c7b2:	50e2      	str	r2, [r4, r3]
 800c7b4:	e7d0      	b.n	800c758 <_malloc_r+0x20>
 800c7b6:	428c      	cmp	r4, r1
 800c7b8:	684b      	ldr	r3, [r1, #4]
 800c7ba:	bf16      	itet	ne
 800c7bc:	6063      	strne	r3, [r4, #4]
 800c7be:	6013      	streq	r3, [r2, #0]
 800c7c0:	460c      	movne	r4, r1
 800c7c2:	e7eb      	b.n	800c79c <_malloc_r+0x64>
 800c7c4:	460c      	mov	r4, r1
 800c7c6:	6849      	ldr	r1, [r1, #4]
 800c7c8:	e7cc      	b.n	800c764 <_malloc_r+0x2c>
 800c7ca:	1cc4      	adds	r4, r0, #3
 800c7cc:	f024 0403 	bic.w	r4, r4, #3
 800c7d0:	42a0      	cmp	r0, r4
 800c7d2:	d005      	beq.n	800c7e0 <_malloc_r+0xa8>
 800c7d4:	1a21      	subs	r1, r4, r0
 800c7d6:	4630      	mov	r0, r6
 800c7d8:	f000 fda4 	bl	800d324 <_sbrk_r>
 800c7dc:	3001      	adds	r0, #1
 800c7de:	d0cf      	beq.n	800c780 <_malloc_r+0x48>
 800c7e0:	6025      	str	r5, [r4, #0]
 800c7e2:	e7db      	b.n	800c79c <_malloc_r+0x64>
 800c7e4:	20001724 	.word	0x20001724
 800c7e8:	20001728 	.word	0x20001728

0800c7ec <__sfputc_r>:
 800c7ec:	6893      	ldr	r3, [r2, #8]
 800c7ee:	3b01      	subs	r3, #1
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	b410      	push	{r4}
 800c7f4:	6093      	str	r3, [r2, #8]
 800c7f6:	da08      	bge.n	800c80a <__sfputc_r+0x1e>
 800c7f8:	6994      	ldr	r4, [r2, #24]
 800c7fa:	42a3      	cmp	r3, r4
 800c7fc:	db01      	blt.n	800c802 <__sfputc_r+0x16>
 800c7fe:	290a      	cmp	r1, #10
 800c800:	d103      	bne.n	800c80a <__sfputc_r+0x1e>
 800c802:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c806:	f000 be13 	b.w	800d430 <__swbuf_r>
 800c80a:	6813      	ldr	r3, [r2, #0]
 800c80c:	1c58      	adds	r0, r3, #1
 800c80e:	6010      	str	r0, [r2, #0]
 800c810:	7019      	strb	r1, [r3, #0]
 800c812:	4608      	mov	r0, r1
 800c814:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <__sfputs_r>:
 800c81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81c:	4606      	mov	r6, r0
 800c81e:	460f      	mov	r7, r1
 800c820:	4614      	mov	r4, r2
 800c822:	18d5      	adds	r5, r2, r3
 800c824:	42ac      	cmp	r4, r5
 800c826:	d101      	bne.n	800c82c <__sfputs_r+0x12>
 800c828:	2000      	movs	r0, #0
 800c82a:	e007      	b.n	800c83c <__sfputs_r+0x22>
 800c82c:	463a      	mov	r2, r7
 800c82e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c832:	4630      	mov	r0, r6
 800c834:	f7ff ffda 	bl	800c7ec <__sfputc_r>
 800c838:	1c43      	adds	r3, r0, #1
 800c83a:	d1f3      	bne.n	800c824 <__sfputs_r+0xa>
 800c83c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c840 <_vfiprintf_r>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	460c      	mov	r4, r1
 800c846:	b09d      	sub	sp, #116	; 0x74
 800c848:	4617      	mov	r7, r2
 800c84a:	461d      	mov	r5, r3
 800c84c:	4606      	mov	r6, r0
 800c84e:	b118      	cbz	r0, 800c858 <_vfiprintf_r+0x18>
 800c850:	6983      	ldr	r3, [r0, #24]
 800c852:	b90b      	cbnz	r3, 800c858 <_vfiprintf_r+0x18>
 800c854:	f001 fe44 	bl	800e4e0 <__sinit>
 800c858:	4b7c      	ldr	r3, [pc, #496]	; (800ca4c <_vfiprintf_r+0x20c>)
 800c85a:	429c      	cmp	r4, r3
 800c85c:	d158      	bne.n	800c910 <_vfiprintf_r+0xd0>
 800c85e:	6874      	ldr	r4, [r6, #4]
 800c860:	89a3      	ldrh	r3, [r4, #12]
 800c862:	0718      	lsls	r0, r3, #28
 800c864:	d55e      	bpl.n	800c924 <_vfiprintf_r+0xe4>
 800c866:	6923      	ldr	r3, [r4, #16]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d05b      	beq.n	800c924 <_vfiprintf_r+0xe4>
 800c86c:	2300      	movs	r3, #0
 800c86e:	9309      	str	r3, [sp, #36]	; 0x24
 800c870:	2320      	movs	r3, #32
 800c872:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c876:	2330      	movs	r3, #48	; 0x30
 800c878:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c87c:	9503      	str	r5, [sp, #12]
 800c87e:	f04f 0b01 	mov.w	fp, #1
 800c882:	46b8      	mov	r8, r7
 800c884:	4645      	mov	r5, r8
 800c886:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c88a:	b10b      	cbz	r3, 800c890 <_vfiprintf_r+0x50>
 800c88c:	2b25      	cmp	r3, #37	; 0x25
 800c88e:	d154      	bne.n	800c93a <_vfiprintf_r+0xfa>
 800c890:	ebb8 0a07 	subs.w	sl, r8, r7
 800c894:	d00b      	beq.n	800c8ae <_vfiprintf_r+0x6e>
 800c896:	4653      	mov	r3, sl
 800c898:	463a      	mov	r2, r7
 800c89a:	4621      	mov	r1, r4
 800c89c:	4630      	mov	r0, r6
 800c89e:	f7ff ffbc 	bl	800c81a <__sfputs_r>
 800c8a2:	3001      	adds	r0, #1
 800c8a4:	f000 80c2 	beq.w	800ca2c <_vfiprintf_r+0x1ec>
 800c8a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8aa:	4453      	add	r3, sl
 800c8ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c8ae:	f898 3000 	ldrb.w	r3, [r8]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	f000 80ba 	beq.w	800ca2c <_vfiprintf_r+0x1ec>
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	f04f 32ff 	mov.w	r2, #4294967295
 800c8be:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8c2:	9304      	str	r3, [sp, #16]
 800c8c4:	9307      	str	r3, [sp, #28]
 800c8c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8ca:	931a      	str	r3, [sp, #104]	; 0x68
 800c8cc:	46a8      	mov	r8, r5
 800c8ce:	2205      	movs	r2, #5
 800c8d0:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c8d4:	485e      	ldr	r0, [pc, #376]	; (800ca50 <_vfiprintf_r+0x210>)
 800c8d6:	f7f3 fc93 	bl	8000200 <memchr>
 800c8da:	9b04      	ldr	r3, [sp, #16]
 800c8dc:	bb78      	cbnz	r0, 800c93e <_vfiprintf_r+0xfe>
 800c8de:	06d9      	lsls	r1, r3, #27
 800c8e0:	bf44      	itt	mi
 800c8e2:	2220      	movmi	r2, #32
 800c8e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c8e8:	071a      	lsls	r2, r3, #28
 800c8ea:	bf44      	itt	mi
 800c8ec:	222b      	movmi	r2, #43	; 0x2b
 800c8ee:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c8f2:	782a      	ldrb	r2, [r5, #0]
 800c8f4:	2a2a      	cmp	r2, #42	; 0x2a
 800c8f6:	d02a      	beq.n	800c94e <_vfiprintf_r+0x10e>
 800c8f8:	9a07      	ldr	r2, [sp, #28]
 800c8fa:	46a8      	mov	r8, r5
 800c8fc:	2000      	movs	r0, #0
 800c8fe:	250a      	movs	r5, #10
 800c900:	4641      	mov	r1, r8
 800c902:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c906:	3b30      	subs	r3, #48	; 0x30
 800c908:	2b09      	cmp	r3, #9
 800c90a:	d969      	bls.n	800c9e0 <_vfiprintf_r+0x1a0>
 800c90c:	b360      	cbz	r0, 800c968 <_vfiprintf_r+0x128>
 800c90e:	e024      	b.n	800c95a <_vfiprintf_r+0x11a>
 800c910:	4b50      	ldr	r3, [pc, #320]	; (800ca54 <_vfiprintf_r+0x214>)
 800c912:	429c      	cmp	r4, r3
 800c914:	d101      	bne.n	800c91a <_vfiprintf_r+0xda>
 800c916:	68b4      	ldr	r4, [r6, #8]
 800c918:	e7a2      	b.n	800c860 <_vfiprintf_r+0x20>
 800c91a:	4b4f      	ldr	r3, [pc, #316]	; (800ca58 <_vfiprintf_r+0x218>)
 800c91c:	429c      	cmp	r4, r3
 800c91e:	bf08      	it	eq
 800c920:	68f4      	ldreq	r4, [r6, #12]
 800c922:	e79d      	b.n	800c860 <_vfiprintf_r+0x20>
 800c924:	4621      	mov	r1, r4
 800c926:	4630      	mov	r0, r6
 800c928:	f000 fdd4 	bl	800d4d4 <__swsetup_r>
 800c92c:	2800      	cmp	r0, #0
 800c92e:	d09d      	beq.n	800c86c <_vfiprintf_r+0x2c>
 800c930:	f04f 30ff 	mov.w	r0, #4294967295
 800c934:	b01d      	add	sp, #116	; 0x74
 800c936:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c93a:	46a8      	mov	r8, r5
 800c93c:	e7a2      	b.n	800c884 <_vfiprintf_r+0x44>
 800c93e:	4a44      	ldr	r2, [pc, #272]	; (800ca50 <_vfiprintf_r+0x210>)
 800c940:	1a80      	subs	r0, r0, r2
 800c942:	fa0b f000 	lsl.w	r0, fp, r0
 800c946:	4318      	orrs	r0, r3
 800c948:	9004      	str	r0, [sp, #16]
 800c94a:	4645      	mov	r5, r8
 800c94c:	e7be      	b.n	800c8cc <_vfiprintf_r+0x8c>
 800c94e:	9a03      	ldr	r2, [sp, #12]
 800c950:	1d11      	adds	r1, r2, #4
 800c952:	6812      	ldr	r2, [r2, #0]
 800c954:	9103      	str	r1, [sp, #12]
 800c956:	2a00      	cmp	r2, #0
 800c958:	db01      	blt.n	800c95e <_vfiprintf_r+0x11e>
 800c95a:	9207      	str	r2, [sp, #28]
 800c95c:	e004      	b.n	800c968 <_vfiprintf_r+0x128>
 800c95e:	4252      	negs	r2, r2
 800c960:	f043 0302 	orr.w	r3, r3, #2
 800c964:	9207      	str	r2, [sp, #28]
 800c966:	9304      	str	r3, [sp, #16]
 800c968:	f898 3000 	ldrb.w	r3, [r8]
 800c96c:	2b2e      	cmp	r3, #46	; 0x2e
 800c96e:	d10e      	bne.n	800c98e <_vfiprintf_r+0x14e>
 800c970:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c974:	2b2a      	cmp	r3, #42	; 0x2a
 800c976:	d138      	bne.n	800c9ea <_vfiprintf_r+0x1aa>
 800c978:	9b03      	ldr	r3, [sp, #12]
 800c97a:	1d1a      	adds	r2, r3, #4
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	9203      	str	r2, [sp, #12]
 800c980:	2b00      	cmp	r3, #0
 800c982:	bfb8      	it	lt
 800c984:	f04f 33ff 	movlt.w	r3, #4294967295
 800c988:	f108 0802 	add.w	r8, r8, #2
 800c98c:	9305      	str	r3, [sp, #20]
 800c98e:	4d33      	ldr	r5, [pc, #204]	; (800ca5c <_vfiprintf_r+0x21c>)
 800c990:	f898 1000 	ldrb.w	r1, [r8]
 800c994:	2203      	movs	r2, #3
 800c996:	4628      	mov	r0, r5
 800c998:	f7f3 fc32 	bl	8000200 <memchr>
 800c99c:	b140      	cbz	r0, 800c9b0 <_vfiprintf_r+0x170>
 800c99e:	2340      	movs	r3, #64	; 0x40
 800c9a0:	1b40      	subs	r0, r0, r5
 800c9a2:	fa03 f000 	lsl.w	r0, r3, r0
 800c9a6:	9b04      	ldr	r3, [sp, #16]
 800c9a8:	4303      	orrs	r3, r0
 800c9aa:	f108 0801 	add.w	r8, r8, #1
 800c9ae:	9304      	str	r3, [sp, #16]
 800c9b0:	f898 1000 	ldrb.w	r1, [r8]
 800c9b4:	482a      	ldr	r0, [pc, #168]	; (800ca60 <_vfiprintf_r+0x220>)
 800c9b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c9ba:	2206      	movs	r2, #6
 800c9bc:	f108 0701 	add.w	r7, r8, #1
 800c9c0:	f7f3 fc1e 	bl	8000200 <memchr>
 800c9c4:	2800      	cmp	r0, #0
 800c9c6:	d037      	beq.n	800ca38 <_vfiprintf_r+0x1f8>
 800c9c8:	4b26      	ldr	r3, [pc, #152]	; (800ca64 <_vfiprintf_r+0x224>)
 800c9ca:	bb1b      	cbnz	r3, 800ca14 <_vfiprintf_r+0x1d4>
 800c9cc:	9b03      	ldr	r3, [sp, #12]
 800c9ce:	3307      	adds	r3, #7
 800c9d0:	f023 0307 	bic.w	r3, r3, #7
 800c9d4:	3308      	adds	r3, #8
 800c9d6:	9303      	str	r3, [sp, #12]
 800c9d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9da:	444b      	add	r3, r9
 800c9dc:	9309      	str	r3, [sp, #36]	; 0x24
 800c9de:	e750      	b.n	800c882 <_vfiprintf_r+0x42>
 800c9e0:	fb05 3202 	mla	r2, r5, r2, r3
 800c9e4:	2001      	movs	r0, #1
 800c9e6:	4688      	mov	r8, r1
 800c9e8:	e78a      	b.n	800c900 <_vfiprintf_r+0xc0>
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	f108 0801 	add.w	r8, r8, #1
 800c9f0:	9305      	str	r3, [sp, #20]
 800c9f2:	4619      	mov	r1, r3
 800c9f4:	250a      	movs	r5, #10
 800c9f6:	4640      	mov	r0, r8
 800c9f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9fc:	3a30      	subs	r2, #48	; 0x30
 800c9fe:	2a09      	cmp	r2, #9
 800ca00:	d903      	bls.n	800ca0a <_vfiprintf_r+0x1ca>
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d0c3      	beq.n	800c98e <_vfiprintf_r+0x14e>
 800ca06:	9105      	str	r1, [sp, #20]
 800ca08:	e7c1      	b.n	800c98e <_vfiprintf_r+0x14e>
 800ca0a:	fb05 2101 	mla	r1, r5, r1, r2
 800ca0e:	2301      	movs	r3, #1
 800ca10:	4680      	mov	r8, r0
 800ca12:	e7f0      	b.n	800c9f6 <_vfiprintf_r+0x1b6>
 800ca14:	ab03      	add	r3, sp, #12
 800ca16:	9300      	str	r3, [sp, #0]
 800ca18:	4622      	mov	r2, r4
 800ca1a:	4b13      	ldr	r3, [pc, #76]	; (800ca68 <_vfiprintf_r+0x228>)
 800ca1c:	a904      	add	r1, sp, #16
 800ca1e:	4630      	mov	r0, r6
 800ca20:	f000 f8b8 	bl	800cb94 <_printf_float>
 800ca24:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ca28:	4681      	mov	r9, r0
 800ca2a:	d1d5      	bne.n	800c9d8 <_vfiprintf_r+0x198>
 800ca2c:	89a3      	ldrh	r3, [r4, #12]
 800ca2e:	065b      	lsls	r3, r3, #25
 800ca30:	f53f af7e 	bmi.w	800c930 <_vfiprintf_r+0xf0>
 800ca34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca36:	e77d      	b.n	800c934 <_vfiprintf_r+0xf4>
 800ca38:	ab03      	add	r3, sp, #12
 800ca3a:	9300      	str	r3, [sp, #0]
 800ca3c:	4622      	mov	r2, r4
 800ca3e:	4b0a      	ldr	r3, [pc, #40]	; (800ca68 <_vfiprintf_r+0x228>)
 800ca40:	a904      	add	r1, sp, #16
 800ca42:	4630      	mov	r0, r6
 800ca44:	f000 fb5c 	bl	800d100 <_printf_i>
 800ca48:	e7ec      	b.n	800ca24 <_vfiprintf_r+0x1e4>
 800ca4a:	bf00      	nop
 800ca4c:	08012994 	.word	0x08012994
 800ca50:	08012920 	.word	0x08012920
 800ca54:	080129b4 	.word	0x080129b4
 800ca58:	08012974 	.word	0x08012974
 800ca5c:	08012926 	.word	0x08012926
 800ca60:	0801292a 	.word	0x0801292a
 800ca64:	0800cb95 	.word	0x0800cb95
 800ca68:	0800c81b 	.word	0x0800c81b

0800ca6c <__cvt>:
 800ca6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca70:	ec55 4b10 	vmov	r4, r5, d0
 800ca74:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800ca76:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ca7a:	2d00      	cmp	r5, #0
 800ca7c:	460e      	mov	r6, r1
 800ca7e:	4691      	mov	r9, r2
 800ca80:	4619      	mov	r1, r3
 800ca82:	bfb8      	it	lt
 800ca84:	4622      	movlt	r2, r4
 800ca86:	462b      	mov	r3, r5
 800ca88:	f027 0720 	bic.w	r7, r7, #32
 800ca8c:	bfbb      	ittet	lt
 800ca8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca92:	461d      	movlt	r5, r3
 800ca94:	2300      	movge	r3, #0
 800ca96:	232d      	movlt	r3, #45	; 0x2d
 800ca98:	bfb8      	it	lt
 800ca9a:	4614      	movlt	r4, r2
 800ca9c:	2f46      	cmp	r7, #70	; 0x46
 800ca9e:	700b      	strb	r3, [r1, #0]
 800caa0:	d004      	beq.n	800caac <__cvt+0x40>
 800caa2:	2f45      	cmp	r7, #69	; 0x45
 800caa4:	d100      	bne.n	800caa8 <__cvt+0x3c>
 800caa6:	3601      	adds	r6, #1
 800caa8:	2102      	movs	r1, #2
 800caaa:	e000      	b.n	800caae <__cvt+0x42>
 800caac:	2103      	movs	r1, #3
 800caae:	ab03      	add	r3, sp, #12
 800cab0:	9301      	str	r3, [sp, #4]
 800cab2:	ab02      	add	r3, sp, #8
 800cab4:	9300      	str	r3, [sp, #0]
 800cab6:	4632      	mov	r2, r6
 800cab8:	4653      	mov	r3, sl
 800caba:	ec45 4b10 	vmov	d0, r4, r5
 800cabe:	f000 fe67 	bl	800d790 <_dtoa_r>
 800cac2:	2f47      	cmp	r7, #71	; 0x47
 800cac4:	4680      	mov	r8, r0
 800cac6:	d102      	bne.n	800cace <__cvt+0x62>
 800cac8:	f019 0f01 	tst.w	r9, #1
 800cacc:	d026      	beq.n	800cb1c <__cvt+0xb0>
 800cace:	2f46      	cmp	r7, #70	; 0x46
 800cad0:	eb08 0906 	add.w	r9, r8, r6
 800cad4:	d111      	bne.n	800cafa <__cvt+0x8e>
 800cad6:	f898 3000 	ldrb.w	r3, [r8]
 800cada:	2b30      	cmp	r3, #48	; 0x30
 800cadc:	d10a      	bne.n	800caf4 <__cvt+0x88>
 800cade:	2200      	movs	r2, #0
 800cae0:	2300      	movs	r3, #0
 800cae2:	4620      	mov	r0, r4
 800cae4:	4629      	mov	r1, r5
 800cae6:	f7f3 ffff 	bl	8000ae8 <__aeabi_dcmpeq>
 800caea:	b918      	cbnz	r0, 800caf4 <__cvt+0x88>
 800caec:	f1c6 0601 	rsb	r6, r6, #1
 800caf0:	f8ca 6000 	str.w	r6, [sl]
 800caf4:	f8da 3000 	ldr.w	r3, [sl]
 800caf8:	4499      	add	r9, r3
 800cafa:	2200      	movs	r2, #0
 800cafc:	2300      	movs	r3, #0
 800cafe:	4620      	mov	r0, r4
 800cb00:	4629      	mov	r1, r5
 800cb02:	f7f3 fff1 	bl	8000ae8 <__aeabi_dcmpeq>
 800cb06:	b938      	cbnz	r0, 800cb18 <__cvt+0xac>
 800cb08:	2230      	movs	r2, #48	; 0x30
 800cb0a:	9b03      	ldr	r3, [sp, #12]
 800cb0c:	454b      	cmp	r3, r9
 800cb0e:	d205      	bcs.n	800cb1c <__cvt+0xb0>
 800cb10:	1c59      	adds	r1, r3, #1
 800cb12:	9103      	str	r1, [sp, #12]
 800cb14:	701a      	strb	r2, [r3, #0]
 800cb16:	e7f8      	b.n	800cb0a <__cvt+0x9e>
 800cb18:	f8cd 900c 	str.w	r9, [sp, #12]
 800cb1c:	9b03      	ldr	r3, [sp, #12]
 800cb1e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb20:	eba3 0308 	sub.w	r3, r3, r8
 800cb24:	4640      	mov	r0, r8
 800cb26:	6013      	str	r3, [r2, #0]
 800cb28:	b004      	add	sp, #16
 800cb2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800cb2e <__exponent>:
 800cb2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cb30:	2900      	cmp	r1, #0
 800cb32:	4604      	mov	r4, r0
 800cb34:	bfba      	itte	lt
 800cb36:	4249      	neglt	r1, r1
 800cb38:	232d      	movlt	r3, #45	; 0x2d
 800cb3a:	232b      	movge	r3, #43	; 0x2b
 800cb3c:	2909      	cmp	r1, #9
 800cb3e:	f804 2b02 	strb.w	r2, [r4], #2
 800cb42:	7043      	strb	r3, [r0, #1]
 800cb44:	dd20      	ble.n	800cb88 <__exponent+0x5a>
 800cb46:	f10d 0307 	add.w	r3, sp, #7
 800cb4a:	461f      	mov	r7, r3
 800cb4c:	260a      	movs	r6, #10
 800cb4e:	fb91 f5f6 	sdiv	r5, r1, r6
 800cb52:	fb06 1115 	mls	r1, r6, r5, r1
 800cb56:	3130      	adds	r1, #48	; 0x30
 800cb58:	2d09      	cmp	r5, #9
 800cb5a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cb5e:	f103 32ff 	add.w	r2, r3, #4294967295
 800cb62:	4629      	mov	r1, r5
 800cb64:	dc09      	bgt.n	800cb7a <__exponent+0x4c>
 800cb66:	3130      	adds	r1, #48	; 0x30
 800cb68:	3b02      	subs	r3, #2
 800cb6a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800cb6e:	42bb      	cmp	r3, r7
 800cb70:	4622      	mov	r2, r4
 800cb72:	d304      	bcc.n	800cb7e <__exponent+0x50>
 800cb74:	1a10      	subs	r0, r2, r0
 800cb76:	b003      	add	sp, #12
 800cb78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb7a:	4613      	mov	r3, r2
 800cb7c:	e7e7      	b.n	800cb4e <__exponent+0x20>
 800cb7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb82:	f804 2b01 	strb.w	r2, [r4], #1
 800cb86:	e7f2      	b.n	800cb6e <__exponent+0x40>
 800cb88:	2330      	movs	r3, #48	; 0x30
 800cb8a:	4419      	add	r1, r3
 800cb8c:	7083      	strb	r3, [r0, #2]
 800cb8e:	1d02      	adds	r2, r0, #4
 800cb90:	70c1      	strb	r1, [r0, #3]
 800cb92:	e7ef      	b.n	800cb74 <__exponent+0x46>

0800cb94 <_printf_float>:
 800cb94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb98:	b08d      	sub	sp, #52	; 0x34
 800cb9a:	460c      	mov	r4, r1
 800cb9c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800cba0:	4616      	mov	r6, r2
 800cba2:	461f      	mov	r7, r3
 800cba4:	4605      	mov	r5, r0
 800cba6:	f001 fd25 	bl	800e5f4 <_localeconv_r>
 800cbaa:	6803      	ldr	r3, [r0, #0]
 800cbac:	9304      	str	r3, [sp, #16]
 800cbae:	4618      	mov	r0, r3
 800cbb0:	f7f3 fb18 	bl	80001e4 <strlen>
 800cbb4:	2300      	movs	r3, #0
 800cbb6:	930a      	str	r3, [sp, #40]	; 0x28
 800cbb8:	f8d8 3000 	ldr.w	r3, [r8]
 800cbbc:	9005      	str	r0, [sp, #20]
 800cbbe:	3307      	adds	r3, #7
 800cbc0:	f023 0307 	bic.w	r3, r3, #7
 800cbc4:	f103 0208 	add.w	r2, r3, #8
 800cbc8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cbcc:	f8d4 b000 	ldr.w	fp, [r4]
 800cbd0:	f8c8 2000 	str.w	r2, [r8]
 800cbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbd8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cbdc:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cbe0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cbe4:	9307      	str	r3, [sp, #28]
 800cbe6:	f8cd 8018 	str.w	r8, [sp, #24]
 800cbea:	f04f 32ff 	mov.w	r2, #4294967295
 800cbee:	4ba7      	ldr	r3, [pc, #668]	; (800ce8c <_printf_float+0x2f8>)
 800cbf0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbf4:	f7f3 ffaa 	bl	8000b4c <__aeabi_dcmpun>
 800cbf8:	bb70      	cbnz	r0, 800cc58 <_printf_float+0xc4>
 800cbfa:	f04f 32ff 	mov.w	r2, #4294967295
 800cbfe:	4ba3      	ldr	r3, [pc, #652]	; (800ce8c <_printf_float+0x2f8>)
 800cc00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cc04:	f7f3 ff84 	bl	8000b10 <__aeabi_dcmple>
 800cc08:	bb30      	cbnz	r0, 800cc58 <_printf_float+0xc4>
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	2300      	movs	r3, #0
 800cc0e:	4640      	mov	r0, r8
 800cc10:	4649      	mov	r1, r9
 800cc12:	f7f3 ff73 	bl	8000afc <__aeabi_dcmplt>
 800cc16:	b110      	cbz	r0, 800cc1e <_printf_float+0x8a>
 800cc18:	232d      	movs	r3, #45	; 0x2d
 800cc1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc1e:	4a9c      	ldr	r2, [pc, #624]	; (800ce90 <_printf_float+0x2fc>)
 800cc20:	4b9c      	ldr	r3, [pc, #624]	; (800ce94 <_printf_float+0x300>)
 800cc22:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cc26:	bf8c      	ite	hi
 800cc28:	4690      	movhi	r8, r2
 800cc2a:	4698      	movls	r8, r3
 800cc2c:	2303      	movs	r3, #3
 800cc2e:	f02b 0204 	bic.w	r2, fp, #4
 800cc32:	6123      	str	r3, [r4, #16]
 800cc34:	6022      	str	r2, [r4, #0]
 800cc36:	f04f 0900 	mov.w	r9, #0
 800cc3a:	9700      	str	r7, [sp, #0]
 800cc3c:	4633      	mov	r3, r6
 800cc3e:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc40:	4621      	mov	r1, r4
 800cc42:	4628      	mov	r0, r5
 800cc44:	f000 f9e6 	bl	800d014 <_printf_common>
 800cc48:	3001      	adds	r0, #1
 800cc4a:	f040 808d 	bne.w	800cd68 <_printf_float+0x1d4>
 800cc4e:	f04f 30ff 	mov.w	r0, #4294967295
 800cc52:	b00d      	add	sp, #52	; 0x34
 800cc54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc58:	4642      	mov	r2, r8
 800cc5a:	464b      	mov	r3, r9
 800cc5c:	4640      	mov	r0, r8
 800cc5e:	4649      	mov	r1, r9
 800cc60:	f7f3 ff74 	bl	8000b4c <__aeabi_dcmpun>
 800cc64:	b110      	cbz	r0, 800cc6c <_printf_float+0xd8>
 800cc66:	4a8c      	ldr	r2, [pc, #560]	; (800ce98 <_printf_float+0x304>)
 800cc68:	4b8c      	ldr	r3, [pc, #560]	; (800ce9c <_printf_float+0x308>)
 800cc6a:	e7da      	b.n	800cc22 <_printf_float+0x8e>
 800cc6c:	6861      	ldr	r1, [r4, #4]
 800cc6e:	1c4b      	adds	r3, r1, #1
 800cc70:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800cc74:	a80a      	add	r0, sp, #40	; 0x28
 800cc76:	d13e      	bne.n	800ccf6 <_printf_float+0x162>
 800cc78:	2306      	movs	r3, #6
 800cc7a:	6063      	str	r3, [r4, #4]
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cc82:	ab09      	add	r3, sp, #36	; 0x24
 800cc84:	9300      	str	r3, [sp, #0]
 800cc86:	ec49 8b10 	vmov	d0, r8, r9
 800cc8a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cc8e:	6022      	str	r2, [r4, #0]
 800cc90:	f8cd a004 	str.w	sl, [sp, #4]
 800cc94:	6861      	ldr	r1, [r4, #4]
 800cc96:	4628      	mov	r0, r5
 800cc98:	f7ff fee8 	bl	800ca6c <__cvt>
 800cc9c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800cca0:	2b47      	cmp	r3, #71	; 0x47
 800cca2:	4680      	mov	r8, r0
 800cca4:	d109      	bne.n	800ccba <_printf_float+0x126>
 800cca6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cca8:	1cd8      	adds	r0, r3, #3
 800ccaa:	db02      	blt.n	800ccb2 <_printf_float+0x11e>
 800ccac:	6862      	ldr	r2, [r4, #4]
 800ccae:	4293      	cmp	r3, r2
 800ccb0:	dd47      	ble.n	800cd42 <_printf_float+0x1ae>
 800ccb2:	f1aa 0a02 	sub.w	sl, sl, #2
 800ccb6:	fa5f fa8a 	uxtb.w	sl, sl
 800ccba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800ccbe:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ccc0:	d824      	bhi.n	800cd0c <_printf_float+0x178>
 800ccc2:	3901      	subs	r1, #1
 800ccc4:	4652      	mov	r2, sl
 800ccc6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ccca:	9109      	str	r1, [sp, #36]	; 0x24
 800cccc:	f7ff ff2f 	bl	800cb2e <__exponent>
 800ccd0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ccd2:	1813      	adds	r3, r2, r0
 800ccd4:	2a01      	cmp	r2, #1
 800ccd6:	4681      	mov	r9, r0
 800ccd8:	6123      	str	r3, [r4, #16]
 800ccda:	dc02      	bgt.n	800cce2 <_printf_float+0x14e>
 800ccdc:	6822      	ldr	r2, [r4, #0]
 800ccde:	07d1      	lsls	r1, r2, #31
 800cce0:	d501      	bpl.n	800cce6 <_printf_float+0x152>
 800cce2:	3301      	adds	r3, #1
 800cce4:	6123      	str	r3, [r4, #16]
 800cce6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d0a5      	beq.n	800cc3a <_printf_float+0xa6>
 800ccee:	232d      	movs	r3, #45	; 0x2d
 800ccf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccf4:	e7a1      	b.n	800cc3a <_printf_float+0xa6>
 800ccf6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800ccfa:	f000 8177 	beq.w	800cfec <_printf_float+0x458>
 800ccfe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800cd02:	d1bb      	bne.n	800cc7c <_printf_float+0xe8>
 800cd04:	2900      	cmp	r1, #0
 800cd06:	d1b9      	bne.n	800cc7c <_printf_float+0xe8>
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e7b6      	b.n	800cc7a <_printf_float+0xe6>
 800cd0c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800cd10:	d119      	bne.n	800cd46 <_printf_float+0x1b2>
 800cd12:	2900      	cmp	r1, #0
 800cd14:	6863      	ldr	r3, [r4, #4]
 800cd16:	dd0c      	ble.n	800cd32 <_printf_float+0x19e>
 800cd18:	6121      	str	r1, [r4, #16]
 800cd1a:	b913      	cbnz	r3, 800cd22 <_printf_float+0x18e>
 800cd1c:	6822      	ldr	r2, [r4, #0]
 800cd1e:	07d2      	lsls	r2, r2, #31
 800cd20:	d502      	bpl.n	800cd28 <_printf_float+0x194>
 800cd22:	3301      	adds	r3, #1
 800cd24:	440b      	add	r3, r1
 800cd26:	6123      	str	r3, [r4, #16]
 800cd28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd2a:	65a3      	str	r3, [r4, #88]	; 0x58
 800cd2c:	f04f 0900 	mov.w	r9, #0
 800cd30:	e7d9      	b.n	800cce6 <_printf_float+0x152>
 800cd32:	b913      	cbnz	r3, 800cd3a <_printf_float+0x1a6>
 800cd34:	6822      	ldr	r2, [r4, #0]
 800cd36:	07d0      	lsls	r0, r2, #31
 800cd38:	d501      	bpl.n	800cd3e <_printf_float+0x1aa>
 800cd3a:	3302      	adds	r3, #2
 800cd3c:	e7f3      	b.n	800cd26 <_printf_float+0x192>
 800cd3e:	2301      	movs	r3, #1
 800cd40:	e7f1      	b.n	800cd26 <_printf_float+0x192>
 800cd42:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800cd46:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800cd4a:	4293      	cmp	r3, r2
 800cd4c:	db05      	blt.n	800cd5a <_printf_float+0x1c6>
 800cd4e:	6822      	ldr	r2, [r4, #0]
 800cd50:	6123      	str	r3, [r4, #16]
 800cd52:	07d1      	lsls	r1, r2, #31
 800cd54:	d5e8      	bpl.n	800cd28 <_printf_float+0x194>
 800cd56:	3301      	adds	r3, #1
 800cd58:	e7e5      	b.n	800cd26 <_printf_float+0x192>
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	bfd4      	ite	le
 800cd5e:	f1c3 0302 	rsble	r3, r3, #2
 800cd62:	2301      	movgt	r3, #1
 800cd64:	4413      	add	r3, r2
 800cd66:	e7de      	b.n	800cd26 <_printf_float+0x192>
 800cd68:	6823      	ldr	r3, [r4, #0]
 800cd6a:	055a      	lsls	r2, r3, #21
 800cd6c:	d407      	bmi.n	800cd7e <_printf_float+0x1ea>
 800cd6e:	6923      	ldr	r3, [r4, #16]
 800cd70:	4642      	mov	r2, r8
 800cd72:	4631      	mov	r1, r6
 800cd74:	4628      	mov	r0, r5
 800cd76:	47b8      	blx	r7
 800cd78:	3001      	adds	r0, #1
 800cd7a:	d12b      	bne.n	800cdd4 <_printf_float+0x240>
 800cd7c:	e767      	b.n	800cc4e <_printf_float+0xba>
 800cd7e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800cd82:	f240 80dc 	bls.w	800cf3e <_printf_float+0x3aa>
 800cd86:	2200      	movs	r2, #0
 800cd88:	2300      	movs	r3, #0
 800cd8a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd8e:	f7f3 feab 	bl	8000ae8 <__aeabi_dcmpeq>
 800cd92:	2800      	cmp	r0, #0
 800cd94:	d033      	beq.n	800cdfe <_printf_float+0x26a>
 800cd96:	2301      	movs	r3, #1
 800cd98:	4a41      	ldr	r2, [pc, #260]	; (800cea0 <_printf_float+0x30c>)
 800cd9a:	4631      	mov	r1, r6
 800cd9c:	4628      	mov	r0, r5
 800cd9e:	47b8      	blx	r7
 800cda0:	3001      	adds	r0, #1
 800cda2:	f43f af54 	beq.w	800cc4e <_printf_float+0xba>
 800cda6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cdaa:	429a      	cmp	r2, r3
 800cdac:	db02      	blt.n	800cdb4 <_printf_float+0x220>
 800cdae:	6823      	ldr	r3, [r4, #0]
 800cdb0:	07d8      	lsls	r0, r3, #31
 800cdb2:	d50f      	bpl.n	800cdd4 <_printf_float+0x240>
 800cdb4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cdb8:	4631      	mov	r1, r6
 800cdba:	4628      	mov	r0, r5
 800cdbc:	47b8      	blx	r7
 800cdbe:	3001      	adds	r0, #1
 800cdc0:	f43f af45 	beq.w	800cc4e <_printf_float+0xba>
 800cdc4:	f04f 0800 	mov.w	r8, #0
 800cdc8:	f104 091a 	add.w	r9, r4, #26
 800cdcc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdce:	3b01      	subs	r3, #1
 800cdd0:	4543      	cmp	r3, r8
 800cdd2:	dc09      	bgt.n	800cde8 <_printf_float+0x254>
 800cdd4:	6823      	ldr	r3, [r4, #0]
 800cdd6:	079b      	lsls	r3, r3, #30
 800cdd8:	f100 8103 	bmi.w	800cfe2 <_printf_float+0x44e>
 800cddc:	68e0      	ldr	r0, [r4, #12]
 800cdde:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cde0:	4298      	cmp	r0, r3
 800cde2:	bfb8      	it	lt
 800cde4:	4618      	movlt	r0, r3
 800cde6:	e734      	b.n	800cc52 <_printf_float+0xbe>
 800cde8:	2301      	movs	r3, #1
 800cdea:	464a      	mov	r2, r9
 800cdec:	4631      	mov	r1, r6
 800cdee:	4628      	mov	r0, r5
 800cdf0:	47b8      	blx	r7
 800cdf2:	3001      	adds	r0, #1
 800cdf4:	f43f af2b 	beq.w	800cc4e <_printf_float+0xba>
 800cdf8:	f108 0801 	add.w	r8, r8, #1
 800cdfc:	e7e6      	b.n	800cdcc <_printf_float+0x238>
 800cdfe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	dc2b      	bgt.n	800ce5c <_printf_float+0x2c8>
 800ce04:	2301      	movs	r3, #1
 800ce06:	4a26      	ldr	r2, [pc, #152]	; (800cea0 <_printf_float+0x30c>)
 800ce08:	4631      	mov	r1, r6
 800ce0a:	4628      	mov	r0, r5
 800ce0c:	47b8      	blx	r7
 800ce0e:	3001      	adds	r0, #1
 800ce10:	f43f af1d 	beq.w	800cc4e <_printf_float+0xba>
 800ce14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce16:	b923      	cbnz	r3, 800ce22 <_printf_float+0x28e>
 800ce18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce1a:	b913      	cbnz	r3, 800ce22 <_printf_float+0x28e>
 800ce1c:	6823      	ldr	r3, [r4, #0]
 800ce1e:	07d9      	lsls	r1, r3, #31
 800ce20:	d5d8      	bpl.n	800cdd4 <_printf_float+0x240>
 800ce22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ce26:	4631      	mov	r1, r6
 800ce28:	4628      	mov	r0, r5
 800ce2a:	47b8      	blx	r7
 800ce2c:	3001      	adds	r0, #1
 800ce2e:	f43f af0e 	beq.w	800cc4e <_printf_float+0xba>
 800ce32:	f04f 0900 	mov.w	r9, #0
 800ce36:	f104 0a1a 	add.w	sl, r4, #26
 800ce3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce3c:	425b      	negs	r3, r3
 800ce3e:	454b      	cmp	r3, r9
 800ce40:	dc01      	bgt.n	800ce46 <_printf_float+0x2b2>
 800ce42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce44:	e794      	b.n	800cd70 <_printf_float+0x1dc>
 800ce46:	2301      	movs	r3, #1
 800ce48:	4652      	mov	r2, sl
 800ce4a:	4631      	mov	r1, r6
 800ce4c:	4628      	mov	r0, r5
 800ce4e:	47b8      	blx	r7
 800ce50:	3001      	adds	r0, #1
 800ce52:	f43f aefc 	beq.w	800cc4e <_printf_float+0xba>
 800ce56:	f109 0901 	add.w	r9, r9, #1
 800ce5a:	e7ee      	b.n	800ce3a <_printf_float+0x2a6>
 800ce5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce5e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce60:	429a      	cmp	r2, r3
 800ce62:	bfa8      	it	ge
 800ce64:	461a      	movge	r2, r3
 800ce66:	2a00      	cmp	r2, #0
 800ce68:	4691      	mov	r9, r2
 800ce6a:	dd07      	ble.n	800ce7c <_printf_float+0x2e8>
 800ce6c:	4613      	mov	r3, r2
 800ce6e:	4631      	mov	r1, r6
 800ce70:	4642      	mov	r2, r8
 800ce72:	4628      	mov	r0, r5
 800ce74:	47b8      	blx	r7
 800ce76:	3001      	adds	r0, #1
 800ce78:	f43f aee9 	beq.w	800cc4e <_printf_float+0xba>
 800ce7c:	f104 031a 	add.w	r3, r4, #26
 800ce80:	f04f 0b00 	mov.w	fp, #0
 800ce84:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce88:	9306      	str	r3, [sp, #24]
 800ce8a:	e015      	b.n	800ceb8 <_printf_float+0x324>
 800ce8c:	7fefffff 	.word	0x7fefffff
 800ce90:	08012935 	.word	0x08012935
 800ce94:	08012931 	.word	0x08012931
 800ce98:	0801293d 	.word	0x0801293d
 800ce9c:	08012939 	.word	0x08012939
 800cea0:	08012941 	.word	0x08012941
 800cea4:	2301      	movs	r3, #1
 800cea6:	9a06      	ldr	r2, [sp, #24]
 800cea8:	4631      	mov	r1, r6
 800ceaa:	4628      	mov	r0, r5
 800ceac:	47b8      	blx	r7
 800ceae:	3001      	adds	r0, #1
 800ceb0:	f43f aecd 	beq.w	800cc4e <_printf_float+0xba>
 800ceb4:	f10b 0b01 	add.w	fp, fp, #1
 800ceb8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800cebc:	ebaa 0309 	sub.w	r3, sl, r9
 800cec0:	455b      	cmp	r3, fp
 800cec2:	dcef      	bgt.n	800cea4 <_printf_float+0x310>
 800cec4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cec8:	429a      	cmp	r2, r3
 800ceca:	44d0      	add	r8, sl
 800cecc:	db15      	blt.n	800cefa <_printf_float+0x366>
 800cece:	6823      	ldr	r3, [r4, #0]
 800ced0:	07da      	lsls	r2, r3, #31
 800ced2:	d412      	bmi.n	800cefa <_printf_float+0x366>
 800ced4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ced6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ced8:	eba3 020a 	sub.w	r2, r3, sl
 800cedc:	eba3 0a01 	sub.w	sl, r3, r1
 800cee0:	4592      	cmp	sl, r2
 800cee2:	bfa8      	it	ge
 800cee4:	4692      	movge	sl, r2
 800cee6:	f1ba 0f00 	cmp.w	sl, #0
 800ceea:	dc0e      	bgt.n	800cf0a <_printf_float+0x376>
 800ceec:	f04f 0800 	mov.w	r8, #0
 800cef0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cef4:	f104 091a 	add.w	r9, r4, #26
 800cef8:	e019      	b.n	800cf2e <_printf_float+0x39a>
 800cefa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cefe:	4631      	mov	r1, r6
 800cf00:	4628      	mov	r0, r5
 800cf02:	47b8      	blx	r7
 800cf04:	3001      	adds	r0, #1
 800cf06:	d1e5      	bne.n	800ced4 <_printf_float+0x340>
 800cf08:	e6a1      	b.n	800cc4e <_printf_float+0xba>
 800cf0a:	4653      	mov	r3, sl
 800cf0c:	4642      	mov	r2, r8
 800cf0e:	4631      	mov	r1, r6
 800cf10:	4628      	mov	r0, r5
 800cf12:	47b8      	blx	r7
 800cf14:	3001      	adds	r0, #1
 800cf16:	d1e9      	bne.n	800ceec <_printf_float+0x358>
 800cf18:	e699      	b.n	800cc4e <_printf_float+0xba>
 800cf1a:	2301      	movs	r3, #1
 800cf1c:	464a      	mov	r2, r9
 800cf1e:	4631      	mov	r1, r6
 800cf20:	4628      	mov	r0, r5
 800cf22:	47b8      	blx	r7
 800cf24:	3001      	adds	r0, #1
 800cf26:	f43f ae92 	beq.w	800cc4e <_printf_float+0xba>
 800cf2a:	f108 0801 	add.w	r8, r8, #1
 800cf2e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cf32:	1a9b      	subs	r3, r3, r2
 800cf34:	eba3 030a 	sub.w	r3, r3, sl
 800cf38:	4543      	cmp	r3, r8
 800cf3a:	dcee      	bgt.n	800cf1a <_printf_float+0x386>
 800cf3c:	e74a      	b.n	800cdd4 <_printf_float+0x240>
 800cf3e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf40:	2a01      	cmp	r2, #1
 800cf42:	dc01      	bgt.n	800cf48 <_printf_float+0x3b4>
 800cf44:	07db      	lsls	r3, r3, #31
 800cf46:	d53a      	bpl.n	800cfbe <_printf_float+0x42a>
 800cf48:	2301      	movs	r3, #1
 800cf4a:	4642      	mov	r2, r8
 800cf4c:	4631      	mov	r1, r6
 800cf4e:	4628      	mov	r0, r5
 800cf50:	47b8      	blx	r7
 800cf52:	3001      	adds	r0, #1
 800cf54:	f43f ae7b 	beq.w	800cc4e <_printf_float+0xba>
 800cf58:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4628      	mov	r0, r5
 800cf60:	47b8      	blx	r7
 800cf62:	3001      	adds	r0, #1
 800cf64:	f108 0801 	add.w	r8, r8, #1
 800cf68:	f43f ae71 	beq.w	800cc4e <_printf_float+0xba>
 800cf6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf6e:	2200      	movs	r2, #0
 800cf70:	f103 3aff 	add.w	sl, r3, #4294967295
 800cf74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf78:	2300      	movs	r3, #0
 800cf7a:	f7f3 fdb5 	bl	8000ae8 <__aeabi_dcmpeq>
 800cf7e:	b9c8      	cbnz	r0, 800cfb4 <_printf_float+0x420>
 800cf80:	4653      	mov	r3, sl
 800cf82:	4642      	mov	r2, r8
 800cf84:	4631      	mov	r1, r6
 800cf86:	4628      	mov	r0, r5
 800cf88:	47b8      	blx	r7
 800cf8a:	3001      	adds	r0, #1
 800cf8c:	d10e      	bne.n	800cfac <_printf_float+0x418>
 800cf8e:	e65e      	b.n	800cc4e <_printf_float+0xba>
 800cf90:	2301      	movs	r3, #1
 800cf92:	4652      	mov	r2, sl
 800cf94:	4631      	mov	r1, r6
 800cf96:	4628      	mov	r0, r5
 800cf98:	47b8      	blx	r7
 800cf9a:	3001      	adds	r0, #1
 800cf9c:	f43f ae57 	beq.w	800cc4e <_printf_float+0xba>
 800cfa0:	f108 0801 	add.w	r8, r8, #1
 800cfa4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cfa6:	3b01      	subs	r3, #1
 800cfa8:	4543      	cmp	r3, r8
 800cfaa:	dcf1      	bgt.n	800cf90 <_printf_float+0x3fc>
 800cfac:	464b      	mov	r3, r9
 800cfae:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cfb2:	e6de      	b.n	800cd72 <_printf_float+0x1de>
 800cfb4:	f04f 0800 	mov.w	r8, #0
 800cfb8:	f104 0a1a 	add.w	sl, r4, #26
 800cfbc:	e7f2      	b.n	800cfa4 <_printf_float+0x410>
 800cfbe:	2301      	movs	r3, #1
 800cfc0:	e7df      	b.n	800cf82 <_printf_float+0x3ee>
 800cfc2:	2301      	movs	r3, #1
 800cfc4:	464a      	mov	r2, r9
 800cfc6:	4631      	mov	r1, r6
 800cfc8:	4628      	mov	r0, r5
 800cfca:	47b8      	blx	r7
 800cfcc:	3001      	adds	r0, #1
 800cfce:	f43f ae3e 	beq.w	800cc4e <_printf_float+0xba>
 800cfd2:	f108 0801 	add.w	r8, r8, #1
 800cfd6:	68e3      	ldr	r3, [r4, #12]
 800cfd8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cfda:	1a9b      	subs	r3, r3, r2
 800cfdc:	4543      	cmp	r3, r8
 800cfde:	dcf0      	bgt.n	800cfc2 <_printf_float+0x42e>
 800cfe0:	e6fc      	b.n	800cddc <_printf_float+0x248>
 800cfe2:	f04f 0800 	mov.w	r8, #0
 800cfe6:	f104 0919 	add.w	r9, r4, #25
 800cfea:	e7f4      	b.n	800cfd6 <_printf_float+0x442>
 800cfec:	2900      	cmp	r1, #0
 800cfee:	f43f ae8b 	beq.w	800cd08 <_printf_float+0x174>
 800cff2:	2300      	movs	r3, #0
 800cff4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cff8:	ab09      	add	r3, sp, #36	; 0x24
 800cffa:	9300      	str	r3, [sp, #0]
 800cffc:	ec49 8b10 	vmov	d0, r8, r9
 800d000:	6022      	str	r2, [r4, #0]
 800d002:	f8cd a004 	str.w	sl, [sp, #4]
 800d006:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800d00a:	4628      	mov	r0, r5
 800d00c:	f7ff fd2e 	bl	800ca6c <__cvt>
 800d010:	4680      	mov	r8, r0
 800d012:	e648      	b.n	800cca6 <_printf_float+0x112>

0800d014 <_printf_common>:
 800d014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d018:	4691      	mov	r9, r2
 800d01a:	461f      	mov	r7, r3
 800d01c:	688a      	ldr	r2, [r1, #8]
 800d01e:	690b      	ldr	r3, [r1, #16]
 800d020:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d024:	4293      	cmp	r3, r2
 800d026:	bfb8      	it	lt
 800d028:	4613      	movlt	r3, r2
 800d02a:	f8c9 3000 	str.w	r3, [r9]
 800d02e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d032:	4606      	mov	r6, r0
 800d034:	460c      	mov	r4, r1
 800d036:	b112      	cbz	r2, 800d03e <_printf_common+0x2a>
 800d038:	3301      	adds	r3, #1
 800d03a:	f8c9 3000 	str.w	r3, [r9]
 800d03e:	6823      	ldr	r3, [r4, #0]
 800d040:	0699      	lsls	r1, r3, #26
 800d042:	bf42      	ittt	mi
 800d044:	f8d9 3000 	ldrmi.w	r3, [r9]
 800d048:	3302      	addmi	r3, #2
 800d04a:	f8c9 3000 	strmi.w	r3, [r9]
 800d04e:	6825      	ldr	r5, [r4, #0]
 800d050:	f015 0506 	ands.w	r5, r5, #6
 800d054:	d107      	bne.n	800d066 <_printf_common+0x52>
 800d056:	f104 0a19 	add.w	sl, r4, #25
 800d05a:	68e3      	ldr	r3, [r4, #12]
 800d05c:	f8d9 2000 	ldr.w	r2, [r9]
 800d060:	1a9b      	subs	r3, r3, r2
 800d062:	42ab      	cmp	r3, r5
 800d064:	dc28      	bgt.n	800d0b8 <_printf_common+0xa4>
 800d066:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800d06a:	6822      	ldr	r2, [r4, #0]
 800d06c:	3300      	adds	r3, #0
 800d06e:	bf18      	it	ne
 800d070:	2301      	movne	r3, #1
 800d072:	0692      	lsls	r2, r2, #26
 800d074:	d42d      	bmi.n	800d0d2 <_printf_common+0xbe>
 800d076:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d07a:	4639      	mov	r1, r7
 800d07c:	4630      	mov	r0, r6
 800d07e:	47c0      	blx	r8
 800d080:	3001      	adds	r0, #1
 800d082:	d020      	beq.n	800d0c6 <_printf_common+0xb2>
 800d084:	6823      	ldr	r3, [r4, #0]
 800d086:	68e5      	ldr	r5, [r4, #12]
 800d088:	f8d9 2000 	ldr.w	r2, [r9]
 800d08c:	f003 0306 	and.w	r3, r3, #6
 800d090:	2b04      	cmp	r3, #4
 800d092:	bf08      	it	eq
 800d094:	1aad      	subeq	r5, r5, r2
 800d096:	68a3      	ldr	r3, [r4, #8]
 800d098:	6922      	ldr	r2, [r4, #16]
 800d09a:	bf0c      	ite	eq
 800d09c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d0a0:	2500      	movne	r5, #0
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	bfc4      	itt	gt
 800d0a6:	1a9b      	subgt	r3, r3, r2
 800d0a8:	18ed      	addgt	r5, r5, r3
 800d0aa:	f04f 0900 	mov.w	r9, #0
 800d0ae:	341a      	adds	r4, #26
 800d0b0:	454d      	cmp	r5, r9
 800d0b2:	d11a      	bne.n	800d0ea <_printf_common+0xd6>
 800d0b4:	2000      	movs	r0, #0
 800d0b6:	e008      	b.n	800d0ca <_printf_common+0xb6>
 800d0b8:	2301      	movs	r3, #1
 800d0ba:	4652      	mov	r2, sl
 800d0bc:	4639      	mov	r1, r7
 800d0be:	4630      	mov	r0, r6
 800d0c0:	47c0      	blx	r8
 800d0c2:	3001      	adds	r0, #1
 800d0c4:	d103      	bne.n	800d0ce <_printf_common+0xba>
 800d0c6:	f04f 30ff 	mov.w	r0, #4294967295
 800d0ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0ce:	3501      	adds	r5, #1
 800d0d0:	e7c3      	b.n	800d05a <_printf_common+0x46>
 800d0d2:	18e1      	adds	r1, r4, r3
 800d0d4:	1c5a      	adds	r2, r3, #1
 800d0d6:	2030      	movs	r0, #48	; 0x30
 800d0d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d0dc:	4422      	add	r2, r4
 800d0de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0e6:	3302      	adds	r3, #2
 800d0e8:	e7c5      	b.n	800d076 <_printf_common+0x62>
 800d0ea:	2301      	movs	r3, #1
 800d0ec:	4622      	mov	r2, r4
 800d0ee:	4639      	mov	r1, r7
 800d0f0:	4630      	mov	r0, r6
 800d0f2:	47c0      	blx	r8
 800d0f4:	3001      	adds	r0, #1
 800d0f6:	d0e6      	beq.n	800d0c6 <_printf_common+0xb2>
 800d0f8:	f109 0901 	add.w	r9, r9, #1
 800d0fc:	e7d8      	b.n	800d0b0 <_printf_common+0x9c>
	...

0800d100 <_printf_i>:
 800d100:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d104:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800d108:	460c      	mov	r4, r1
 800d10a:	7e09      	ldrb	r1, [r1, #24]
 800d10c:	b085      	sub	sp, #20
 800d10e:	296e      	cmp	r1, #110	; 0x6e
 800d110:	4617      	mov	r7, r2
 800d112:	4606      	mov	r6, r0
 800d114:	4698      	mov	r8, r3
 800d116:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d118:	f000 80b3 	beq.w	800d282 <_printf_i+0x182>
 800d11c:	d822      	bhi.n	800d164 <_printf_i+0x64>
 800d11e:	2963      	cmp	r1, #99	; 0x63
 800d120:	d036      	beq.n	800d190 <_printf_i+0x90>
 800d122:	d80a      	bhi.n	800d13a <_printf_i+0x3a>
 800d124:	2900      	cmp	r1, #0
 800d126:	f000 80b9 	beq.w	800d29c <_printf_i+0x19c>
 800d12a:	2958      	cmp	r1, #88	; 0x58
 800d12c:	f000 8083 	beq.w	800d236 <_printf_i+0x136>
 800d130:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d134:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800d138:	e032      	b.n	800d1a0 <_printf_i+0xa0>
 800d13a:	2964      	cmp	r1, #100	; 0x64
 800d13c:	d001      	beq.n	800d142 <_printf_i+0x42>
 800d13e:	2969      	cmp	r1, #105	; 0x69
 800d140:	d1f6      	bne.n	800d130 <_printf_i+0x30>
 800d142:	6820      	ldr	r0, [r4, #0]
 800d144:	6813      	ldr	r3, [r2, #0]
 800d146:	0605      	lsls	r5, r0, #24
 800d148:	f103 0104 	add.w	r1, r3, #4
 800d14c:	d52a      	bpl.n	800d1a4 <_printf_i+0xa4>
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	6011      	str	r1, [r2, #0]
 800d152:	2b00      	cmp	r3, #0
 800d154:	da03      	bge.n	800d15e <_printf_i+0x5e>
 800d156:	222d      	movs	r2, #45	; 0x2d
 800d158:	425b      	negs	r3, r3
 800d15a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800d15e:	486f      	ldr	r0, [pc, #444]	; (800d31c <_printf_i+0x21c>)
 800d160:	220a      	movs	r2, #10
 800d162:	e039      	b.n	800d1d8 <_printf_i+0xd8>
 800d164:	2973      	cmp	r1, #115	; 0x73
 800d166:	f000 809d 	beq.w	800d2a4 <_printf_i+0x1a4>
 800d16a:	d808      	bhi.n	800d17e <_printf_i+0x7e>
 800d16c:	296f      	cmp	r1, #111	; 0x6f
 800d16e:	d020      	beq.n	800d1b2 <_printf_i+0xb2>
 800d170:	2970      	cmp	r1, #112	; 0x70
 800d172:	d1dd      	bne.n	800d130 <_printf_i+0x30>
 800d174:	6823      	ldr	r3, [r4, #0]
 800d176:	f043 0320 	orr.w	r3, r3, #32
 800d17a:	6023      	str	r3, [r4, #0]
 800d17c:	e003      	b.n	800d186 <_printf_i+0x86>
 800d17e:	2975      	cmp	r1, #117	; 0x75
 800d180:	d017      	beq.n	800d1b2 <_printf_i+0xb2>
 800d182:	2978      	cmp	r1, #120	; 0x78
 800d184:	d1d4      	bne.n	800d130 <_printf_i+0x30>
 800d186:	2378      	movs	r3, #120	; 0x78
 800d188:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d18c:	4864      	ldr	r0, [pc, #400]	; (800d320 <_printf_i+0x220>)
 800d18e:	e055      	b.n	800d23c <_printf_i+0x13c>
 800d190:	6813      	ldr	r3, [r2, #0]
 800d192:	1d19      	adds	r1, r3, #4
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	6011      	str	r1, [r2, #0]
 800d198:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d19c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d1a0:	2301      	movs	r3, #1
 800d1a2:	e08c      	b.n	800d2be <_printf_i+0x1be>
 800d1a4:	681b      	ldr	r3, [r3, #0]
 800d1a6:	6011      	str	r1, [r2, #0]
 800d1a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d1ac:	bf18      	it	ne
 800d1ae:	b21b      	sxthne	r3, r3
 800d1b0:	e7cf      	b.n	800d152 <_printf_i+0x52>
 800d1b2:	6813      	ldr	r3, [r2, #0]
 800d1b4:	6825      	ldr	r5, [r4, #0]
 800d1b6:	1d18      	adds	r0, r3, #4
 800d1b8:	6010      	str	r0, [r2, #0]
 800d1ba:	0628      	lsls	r0, r5, #24
 800d1bc:	d501      	bpl.n	800d1c2 <_printf_i+0xc2>
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	e002      	b.n	800d1c8 <_printf_i+0xc8>
 800d1c2:	0668      	lsls	r0, r5, #25
 800d1c4:	d5fb      	bpl.n	800d1be <_printf_i+0xbe>
 800d1c6:	881b      	ldrh	r3, [r3, #0]
 800d1c8:	4854      	ldr	r0, [pc, #336]	; (800d31c <_printf_i+0x21c>)
 800d1ca:	296f      	cmp	r1, #111	; 0x6f
 800d1cc:	bf14      	ite	ne
 800d1ce:	220a      	movne	r2, #10
 800d1d0:	2208      	moveq	r2, #8
 800d1d2:	2100      	movs	r1, #0
 800d1d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1d8:	6865      	ldr	r5, [r4, #4]
 800d1da:	60a5      	str	r5, [r4, #8]
 800d1dc:	2d00      	cmp	r5, #0
 800d1de:	f2c0 8095 	blt.w	800d30c <_printf_i+0x20c>
 800d1e2:	6821      	ldr	r1, [r4, #0]
 800d1e4:	f021 0104 	bic.w	r1, r1, #4
 800d1e8:	6021      	str	r1, [r4, #0]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d13d      	bne.n	800d26a <_printf_i+0x16a>
 800d1ee:	2d00      	cmp	r5, #0
 800d1f0:	f040 808e 	bne.w	800d310 <_printf_i+0x210>
 800d1f4:	4665      	mov	r5, ip
 800d1f6:	2a08      	cmp	r2, #8
 800d1f8:	d10b      	bne.n	800d212 <_printf_i+0x112>
 800d1fa:	6823      	ldr	r3, [r4, #0]
 800d1fc:	07db      	lsls	r3, r3, #31
 800d1fe:	d508      	bpl.n	800d212 <_printf_i+0x112>
 800d200:	6923      	ldr	r3, [r4, #16]
 800d202:	6862      	ldr	r2, [r4, #4]
 800d204:	429a      	cmp	r2, r3
 800d206:	bfde      	ittt	le
 800d208:	2330      	movle	r3, #48	; 0x30
 800d20a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d20e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d212:	ebac 0305 	sub.w	r3, ip, r5
 800d216:	6123      	str	r3, [r4, #16]
 800d218:	f8cd 8000 	str.w	r8, [sp]
 800d21c:	463b      	mov	r3, r7
 800d21e:	aa03      	add	r2, sp, #12
 800d220:	4621      	mov	r1, r4
 800d222:	4630      	mov	r0, r6
 800d224:	f7ff fef6 	bl	800d014 <_printf_common>
 800d228:	3001      	adds	r0, #1
 800d22a:	d14d      	bne.n	800d2c8 <_printf_i+0x1c8>
 800d22c:	f04f 30ff 	mov.w	r0, #4294967295
 800d230:	b005      	add	sp, #20
 800d232:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d236:	4839      	ldr	r0, [pc, #228]	; (800d31c <_printf_i+0x21c>)
 800d238:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800d23c:	6813      	ldr	r3, [r2, #0]
 800d23e:	6821      	ldr	r1, [r4, #0]
 800d240:	1d1d      	adds	r5, r3, #4
 800d242:	681b      	ldr	r3, [r3, #0]
 800d244:	6015      	str	r5, [r2, #0]
 800d246:	060a      	lsls	r2, r1, #24
 800d248:	d50b      	bpl.n	800d262 <_printf_i+0x162>
 800d24a:	07ca      	lsls	r2, r1, #31
 800d24c:	bf44      	itt	mi
 800d24e:	f041 0120 	orrmi.w	r1, r1, #32
 800d252:	6021      	strmi	r1, [r4, #0]
 800d254:	b91b      	cbnz	r3, 800d25e <_printf_i+0x15e>
 800d256:	6822      	ldr	r2, [r4, #0]
 800d258:	f022 0220 	bic.w	r2, r2, #32
 800d25c:	6022      	str	r2, [r4, #0]
 800d25e:	2210      	movs	r2, #16
 800d260:	e7b7      	b.n	800d1d2 <_printf_i+0xd2>
 800d262:	064d      	lsls	r5, r1, #25
 800d264:	bf48      	it	mi
 800d266:	b29b      	uxthmi	r3, r3
 800d268:	e7ef      	b.n	800d24a <_printf_i+0x14a>
 800d26a:	4665      	mov	r5, ip
 800d26c:	fbb3 f1f2 	udiv	r1, r3, r2
 800d270:	fb02 3311 	mls	r3, r2, r1, r3
 800d274:	5cc3      	ldrb	r3, [r0, r3]
 800d276:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800d27a:	460b      	mov	r3, r1
 800d27c:	2900      	cmp	r1, #0
 800d27e:	d1f5      	bne.n	800d26c <_printf_i+0x16c>
 800d280:	e7b9      	b.n	800d1f6 <_printf_i+0xf6>
 800d282:	6813      	ldr	r3, [r2, #0]
 800d284:	6825      	ldr	r5, [r4, #0]
 800d286:	6961      	ldr	r1, [r4, #20]
 800d288:	1d18      	adds	r0, r3, #4
 800d28a:	6010      	str	r0, [r2, #0]
 800d28c:	0628      	lsls	r0, r5, #24
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	d501      	bpl.n	800d296 <_printf_i+0x196>
 800d292:	6019      	str	r1, [r3, #0]
 800d294:	e002      	b.n	800d29c <_printf_i+0x19c>
 800d296:	066a      	lsls	r2, r5, #25
 800d298:	d5fb      	bpl.n	800d292 <_printf_i+0x192>
 800d29a:	8019      	strh	r1, [r3, #0]
 800d29c:	2300      	movs	r3, #0
 800d29e:	6123      	str	r3, [r4, #16]
 800d2a0:	4665      	mov	r5, ip
 800d2a2:	e7b9      	b.n	800d218 <_printf_i+0x118>
 800d2a4:	6813      	ldr	r3, [r2, #0]
 800d2a6:	1d19      	adds	r1, r3, #4
 800d2a8:	6011      	str	r1, [r2, #0]
 800d2aa:	681d      	ldr	r5, [r3, #0]
 800d2ac:	6862      	ldr	r2, [r4, #4]
 800d2ae:	2100      	movs	r1, #0
 800d2b0:	4628      	mov	r0, r5
 800d2b2:	f7f2 ffa5 	bl	8000200 <memchr>
 800d2b6:	b108      	cbz	r0, 800d2bc <_printf_i+0x1bc>
 800d2b8:	1b40      	subs	r0, r0, r5
 800d2ba:	6060      	str	r0, [r4, #4]
 800d2bc:	6863      	ldr	r3, [r4, #4]
 800d2be:	6123      	str	r3, [r4, #16]
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2c6:	e7a7      	b.n	800d218 <_printf_i+0x118>
 800d2c8:	6923      	ldr	r3, [r4, #16]
 800d2ca:	462a      	mov	r2, r5
 800d2cc:	4639      	mov	r1, r7
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	47c0      	blx	r8
 800d2d2:	3001      	adds	r0, #1
 800d2d4:	d0aa      	beq.n	800d22c <_printf_i+0x12c>
 800d2d6:	6823      	ldr	r3, [r4, #0]
 800d2d8:	079b      	lsls	r3, r3, #30
 800d2da:	d413      	bmi.n	800d304 <_printf_i+0x204>
 800d2dc:	68e0      	ldr	r0, [r4, #12]
 800d2de:	9b03      	ldr	r3, [sp, #12]
 800d2e0:	4298      	cmp	r0, r3
 800d2e2:	bfb8      	it	lt
 800d2e4:	4618      	movlt	r0, r3
 800d2e6:	e7a3      	b.n	800d230 <_printf_i+0x130>
 800d2e8:	2301      	movs	r3, #1
 800d2ea:	464a      	mov	r2, r9
 800d2ec:	4639      	mov	r1, r7
 800d2ee:	4630      	mov	r0, r6
 800d2f0:	47c0      	blx	r8
 800d2f2:	3001      	adds	r0, #1
 800d2f4:	d09a      	beq.n	800d22c <_printf_i+0x12c>
 800d2f6:	3501      	adds	r5, #1
 800d2f8:	68e3      	ldr	r3, [r4, #12]
 800d2fa:	9a03      	ldr	r2, [sp, #12]
 800d2fc:	1a9b      	subs	r3, r3, r2
 800d2fe:	42ab      	cmp	r3, r5
 800d300:	dcf2      	bgt.n	800d2e8 <_printf_i+0x1e8>
 800d302:	e7eb      	b.n	800d2dc <_printf_i+0x1dc>
 800d304:	2500      	movs	r5, #0
 800d306:	f104 0919 	add.w	r9, r4, #25
 800d30a:	e7f5      	b.n	800d2f8 <_printf_i+0x1f8>
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1ac      	bne.n	800d26a <_printf_i+0x16a>
 800d310:	7803      	ldrb	r3, [r0, #0]
 800d312:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d316:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d31a:	e76c      	b.n	800d1f6 <_printf_i+0xf6>
 800d31c:	08012943 	.word	0x08012943
 800d320:	08012954 	.word	0x08012954

0800d324 <_sbrk_r>:
 800d324:	b538      	push	{r3, r4, r5, lr}
 800d326:	4c06      	ldr	r4, [pc, #24]	; (800d340 <_sbrk_r+0x1c>)
 800d328:	2300      	movs	r3, #0
 800d32a:	4605      	mov	r5, r0
 800d32c:	4608      	mov	r0, r1
 800d32e:	6023      	str	r3, [r4, #0]
 800d330:	f7f4 fdd2 	bl	8001ed8 <_sbrk>
 800d334:	1c43      	adds	r3, r0, #1
 800d336:	d102      	bne.n	800d33e <_sbrk_r+0x1a>
 800d338:	6823      	ldr	r3, [r4, #0]
 800d33a:	b103      	cbz	r3, 800d33e <_sbrk_r+0x1a>
 800d33c:	602b      	str	r3, [r5, #0]
 800d33e:	bd38      	pop	{r3, r4, r5, pc}
 800d340:	200017c0 	.word	0x200017c0

0800d344 <_raise_r>:
 800d344:	291f      	cmp	r1, #31
 800d346:	b538      	push	{r3, r4, r5, lr}
 800d348:	4604      	mov	r4, r0
 800d34a:	460d      	mov	r5, r1
 800d34c:	d904      	bls.n	800d358 <_raise_r+0x14>
 800d34e:	2316      	movs	r3, #22
 800d350:	6003      	str	r3, [r0, #0]
 800d352:	f04f 30ff 	mov.w	r0, #4294967295
 800d356:	bd38      	pop	{r3, r4, r5, pc}
 800d358:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d35a:	b112      	cbz	r2, 800d362 <_raise_r+0x1e>
 800d35c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d360:	b94b      	cbnz	r3, 800d376 <_raise_r+0x32>
 800d362:	4620      	mov	r0, r4
 800d364:	f000 f830 	bl	800d3c8 <_getpid_r>
 800d368:	462a      	mov	r2, r5
 800d36a:	4601      	mov	r1, r0
 800d36c:	4620      	mov	r0, r4
 800d36e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d372:	f000 b817 	b.w	800d3a4 <_kill_r>
 800d376:	2b01      	cmp	r3, #1
 800d378:	d00a      	beq.n	800d390 <_raise_r+0x4c>
 800d37a:	1c59      	adds	r1, r3, #1
 800d37c:	d103      	bne.n	800d386 <_raise_r+0x42>
 800d37e:	2316      	movs	r3, #22
 800d380:	6003      	str	r3, [r0, #0]
 800d382:	2001      	movs	r0, #1
 800d384:	e7e7      	b.n	800d356 <_raise_r+0x12>
 800d386:	2400      	movs	r4, #0
 800d388:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d38c:	4628      	mov	r0, r5
 800d38e:	4798      	blx	r3
 800d390:	2000      	movs	r0, #0
 800d392:	e7e0      	b.n	800d356 <_raise_r+0x12>

0800d394 <raise>:
 800d394:	4b02      	ldr	r3, [pc, #8]	; (800d3a0 <raise+0xc>)
 800d396:	4601      	mov	r1, r0
 800d398:	6818      	ldr	r0, [r3, #0]
 800d39a:	f7ff bfd3 	b.w	800d344 <_raise_r>
 800d39e:	bf00      	nop
 800d3a0:	20000b64 	.word	0x20000b64

0800d3a4 <_kill_r>:
 800d3a4:	b538      	push	{r3, r4, r5, lr}
 800d3a6:	4c07      	ldr	r4, [pc, #28]	; (800d3c4 <_kill_r+0x20>)
 800d3a8:	2300      	movs	r3, #0
 800d3aa:	4605      	mov	r5, r0
 800d3ac:	4608      	mov	r0, r1
 800d3ae:	4611      	mov	r1, r2
 800d3b0:	6023      	str	r3, [r4, #0]
 800d3b2:	f7f4 fd09 	bl	8001dc8 <_kill>
 800d3b6:	1c43      	adds	r3, r0, #1
 800d3b8:	d102      	bne.n	800d3c0 <_kill_r+0x1c>
 800d3ba:	6823      	ldr	r3, [r4, #0]
 800d3bc:	b103      	cbz	r3, 800d3c0 <_kill_r+0x1c>
 800d3be:	602b      	str	r3, [r5, #0]
 800d3c0:	bd38      	pop	{r3, r4, r5, pc}
 800d3c2:	bf00      	nop
 800d3c4:	200017c0 	.word	0x200017c0

0800d3c8 <_getpid_r>:
 800d3c8:	f7f4 bcf6 	b.w	8001db8 <_getpid>

0800d3cc <siprintf>:
 800d3cc:	b40e      	push	{r1, r2, r3}
 800d3ce:	b500      	push	{lr}
 800d3d0:	b09c      	sub	sp, #112	; 0x70
 800d3d2:	ab1d      	add	r3, sp, #116	; 0x74
 800d3d4:	9002      	str	r0, [sp, #8]
 800d3d6:	9006      	str	r0, [sp, #24]
 800d3d8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d3dc:	4809      	ldr	r0, [pc, #36]	; (800d404 <siprintf+0x38>)
 800d3de:	9107      	str	r1, [sp, #28]
 800d3e0:	9104      	str	r1, [sp, #16]
 800d3e2:	4909      	ldr	r1, [pc, #36]	; (800d408 <siprintf+0x3c>)
 800d3e4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d3e8:	9105      	str	r1, [sp, #20]
 800d3ea:	6800      	ldr	r0, [r0, #0]
 800d3ec:	9301      	str	r3, [sp, #4]
 800d3ee:	a902      	add	r1, sp, #8
 800d3f0:	f001 fcde 	bl	800edb0 <_svfiprintf_r>
 800d3f4:	9b02      	ldr	r3, [sp, #8]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	701a      	strb	r2, [r3, #0]
 800d3fa:	b01c      	add	sp, #112	; 0x70
 800d3fc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d400:	b003      	add	sp, #12
 800d402:	4770      	bx	lr
 800d404:	20000b64 	.word	0x20000b64
 800d408:	ffff0208 	.word	0xffff0208

0800d40c <strncmp>:
 800d40c:	b510      	push	{r4, lr}
 800d40e:	b16a      	cbz	r2, 800d42c <strncmp+0x20>
 800d410:	3901      	subs	r1, #1
 800d412:	1884      	adds	r4, r0, r2
 800d414:	f810 3b01 	ldrb.w	r3, [r0], #1
 800d418:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d41c:	4293      	cmp	r3, r2
 800d41e:	d103      	bne.n	800d428 <strncmp+0x1c>
 800d420:	42a0      	cmp	r0, r4
 800d422:	d001      	beq.n	800d428 <strncmp+0x1c>
 800d424:	2b00      	cmp	r3, #0
 800d426:	d1f5      	bne.n	800d414 <strncmp+0x8>
 800d428:	1a98      	subs	r0, r3, r2
 800d42a:	bd10      	pop	{r4, pc}
 800d42c:	4610      	mov	r0, r2
 800d42e:	e7fc      	b.n	800d42a <strncmp+0x1e>

0800d430 <__swbuf_r>:
 800d430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d432:	460e      	mov	r6, r1
 800d434:	4614      	mov	r4, r2
 800d436:	4605      	mov	r5, r0
 800d438:	b118      	cbz	r0, 800d442 <__swbuf_r+0x12>
 800d43a:	6983      	ldr	r3, [r0, #24]
 800d43c:	b90b      	cbnz	r3, 800d442 <__swbuf_r+0x12>
 800d43e:	f001 f84f 	bl	800e4e0 <__sinit>
 800d442:	4b21      	ldr	r3, [pc, #132]	; (800d4c8 <__swbuf_r+0x98>)
 800d444:	429c      	cmp	r4, r3
 800d446:	d12a      	bne.n	800d49e <__swbuf_r+0x6e>
 800d448:	686c      	ldr	r4, [r5, #4]
 800d44a:	69a3      	ldr	r3, [r4, #24]
 800d44c:	60a3      	str	r3, [r4, #8]
 800d44e:	89a3      	ldrh	r3, [r4, #12]
 800d450:	071a      	lsls	r2, r3, #28
 800d452:	d52e      	bpl.n	800d4b2 <__swbuf_r+0x82>
 800d454:	6923      	ldr	r3, [r4, #16]
 800d456:	b363      	cbz	r3, 800d4b2 <__swbuf_r+0x82>
 800d458:	6923      	ldr	r3, [r4, #16]
 800d45a:	6820      	ldr	r0, [r4, #0]
 800d45c:	1ac0      	subs	r0, r0, r3
 800d45e:	6963      	ldr	r3, [r4, #20]
 800d460:	b2f6      	uxtb	r6, r6
 800d462:	4283      	cmp	r3, r0
 800d464:	4637      	mov	r7, r6
 800d466:	dc04      	bgt.n	800d472 <__swbuf_r+0x42>
 800d468:	4621      	mov	r1, r4
 800d46a:	4628      	mov	r0, r5
 800d46c:	f000 ffce 	bl	800e40c <_fflush_r>
 800d470:	bb28      	cbnz	r0, 800d4be <__swbuf_r+0x8e>
 800d472:	68a3      	ldr	r3, [r4, #8]
 800d474:	3b01      	subs	r3, #1
 800d476:	60a3      	str	r3, [r4, #8]
 800d478:	6823      	ldr	r3, [r4, #0]
 800d47a:	1c5a      	adds	r2, r3, #1
 800d47c:	6022      	str	r2, [r4, #0]
 800d47e:	701e      	strb	r6, [r3, #0]
 800d480:	6963      	ldr	r3, [r4, #20]
 800d482:	3001      	adds	r0, #1
 800d484:	4283      	cmp	r3, r0
 800d486:	d004      	beq.n	800d492 <__swbuf_r+0x62>
 800d488:	89a3      	ldrh	r3, [r4, #12]
 800d48a:	07db      	lsls	r3, r3, #31
 800d48c:	d519      	bpl.n	800d4c2 <__swbuf_r+0x92>
 800d48e:	2e0a      	cmp	r6, #10
 800d490:	d117      	bne.n	800d4c2 <__swbuf_r+0x92>
 800d492:	4621      	mov	r1, r4
 800d494:	4628      	mov	r0, r5
 800d496:	f000 ffb9 	bl	800e40c <_fflush_r>
 800d49a:	b190      	cbz	r0, 800d4c2 <__swbuf_r+0x92>
 800d49c:	e00f      	b.n	800d4be <__swbuf_r+0x8e>
 800d49e:	4b0b      	ldr	r3, [pc, #44]	; (800d4cc <__swbuf_r+0x9c>)
 800d4a0:	429c      	cmp	r4, r3
 800d4a2:	d101      	bne.n	800d4a8 <__swbuf_r+0x78>
 800d4a4:	68ac      	ldr	r4, [r5, #8]
 800d4a6:	e7d0      	b.n	800d44a <__swbuf_r+0x1a>
 800d4a8:	4b09      	ldr	r3, [pc, #36]	; (800d4d0 <__swbuf_r+0xa0>)
 800d4aa:	429c      	cmp	r4, r3
 800d4ac:	bf08      	it	eq
 800d4ae:	68ec      	ldreq	r4, [r5, #12]
 800d4b0:	e7cb      	b.n	800d44a <__swbuf_r+0x1a>
 800d4b2:	4621      	mov	r1, r4
 800d4b4:	4628      	mov	r0, r5
 800d4b6:	f000 f80d 	bl	800d4d4 <__swsetup_r>
 800d4ba:	2800      	cmp	r0, #0
 800d4bc:	d0cc      	beq.n	800d458 <__swbuf_r+0x28>
 800d4be:	f04f 37ff 	mov.w	r7, #4294967295
 800d4c2:	4638      	mov	r0, r7
 800d4c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	08012994 	.word	0x08012994
 800d4cc:	080129b4 	.word	0x080129b4
 800d4d0:	08012974 	.word	0x08012974

0800d4d4 <__swsetup_r>:
 800d4d4:	4b32      	ldr	r3, [pc, #200]	; (800d5a0 <__swsetup_r+0xcc>)
 800d4d6:	b570      	push	{r4, r5, r6, lr}
 800d4d8:	681d      	ldr	r5, [r3, #0]
 800d4da:	4606      	mov	r6, r0
 800d4dc:	460c      	mov	r4, r1
 800d4de:	b125      	cbz	r5, 800d4ea <__swsetup_r+0x16>
 800d4e0:	69ab      	ldr	r3, [r5, #24]
 800d4e2:	b913      	cbnz	r3, 800d4ea <__swsetup_r+0x16>
 800d4e4:	4628      	mov	r0, r5
 800d4e6:	f000 fffb 	bl	800e4e0 <__sinit>
 800d4ea:	4b2e      	ldr	r3, [pc, #184]	; (800d5a4 <__swsetup_r+0xd0>)
 800d4ec:	429c      	cmp	r4, r3
 800d4ee:	d10f      	bne.n	800d510 <__swsetup_r+0x3c>
 800d4f0:	686c      	ldr	r4, [r5, #4]
 800d4f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d4f6:	b29a      	uxth	r2, r3
 800d4f8:	0715      	lsls	r5, r2, #28
 800d4fa:	d42c      	bmi.n	800d556 <__swsetup_r+0x82>
 800d4fc:	06d0      	lsls	r0, r2, #27
 800d4fe:	d411      	bmi.n	800d524 <__swsetup_r+0x50>
 800d500:	2209      	movs	r2, #9
 800d502:	6032      	str	r2, [r6, #0]
 800d504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d508:	81a3      	strh	r3, [r4, #12]
 800d50a:	f04f 30ff 	mov.w	r0, #4294967295
 800d50e:	e03e      	b.n	800d58e <__swsetup_r+0xba>
 800d510:	4b25      	ldr	r3, [pc, #148]	; (800d5a8 <__swsetup_r+0xd4>)
 800d512:	429c      	cmp	r4, r3
 800d514:	d101      	bne.n	800d51a <__swsetup_r+0x46>
 800d516:	68ac      	ldr	r4, [r5, #8]
 800d518:	e7eb      	b.n	800d4f2 <__swsetup_r+0x1e>
 800d51a:	4b24      	ldr	r3, [pc, #144]	; (800d5ac <__swsetup_r+0xd8>)
 800d51c:	429c      	cmp	r4, r3
 800d51e:	bf08      	it	eq
 800d520:	68ec      	ldreq	r4, [r5, #12]
 800d522:	e7e6      	b.n	800d4f2 <__swsetup_r+0x1e>
 800d524:	0751      	lsls	r1, r2, #29
 800d526:	d512      	bpl.n	800d54e <__swsetup_r+0x7a>
 800d528:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d52a:	b141      	cbz	r1, 800d53e <__swsetup_r+0x6a>
 800d52c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d530:	4299      	cmp	r1, r3
 800d532:	d002      	beq.n	800d53a <__swsetup_r+0x66>
 800d534:	4630      	mov	r0, r6
 800d536:	f7ff f8b1 	bl	800c69c <_free_r>
 800d53a:	2300      	movs	r3, #0
 800d53c:	6363      	str	r3, [r4, #52]	; 0x34
 800d53e:	89a3      	ldrh	r3, [r4, #12]
 800d540:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d544:	81a3      	strh	r3, [r4, #12]
 800d546:	2300      	movs	r3, #0
 800d548:	6063      	str	r3, [r4, #4]
 800d54a:	6923      	ldr	r3, [r4, #16]
 800d54c:	6023      	str	r3, [r4, #0]
 800d54e:	89a3      	ldrh	r3, [r4, #12]
 800d550:	f043 0308 	orr.w	r3, r3, #8
 800d554:	81a3      	strh	r3, [r4, #12]
 800d556:	6923      	ldr	r3, [r4, #16]
 800d558:	b94b      	cbnz	r3, 800d56e <__swsetup_r+0x9a>
 800d55a:	89a3      	ldrh	r3, [r4, #12]
 800d55c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d560:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d564:	d003      	beq.n	800d56e <__swsetup_r+0x9a>
 800d566:	4621      	mov	r1, r4
 800d568:	4630      	mov	r0, r6
 800d56a:	f001 f875 	bl	800e658 <__smakebuf_r>
 800d56e:	89a2      	ldrh	r2, [r4, #12]
 800d570:	f012 0301 	ands.w	r3, r2, #1
 800d574:	d00c      	beq.n	800d590 <__swsetup_r+0xbc>
 800d576:	2300      	movs	r3, #0
 800d578:	60a3      	str	r3, [r4, #8]
 800d57a:	6963      	ldr	r3, [r4, #20]
 800d57c:	425b      	negs	r3, r3
 800d57e:	61a3      	str	r3, [r4, #24]
 800d580:	6923      	ldr	r3, [r4, #16]
 800d582:	b953      	cbnz	r3, 800d59a <__swsetup_r+0xc6>
 800d584:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d588:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d58c:	d1ba      	bne.n	800d504 <__swsetup_r+0x30>
 800d58e:	bd70      	pop	{r4, r5, r6, pc}
 800d590:	0792      	lsls	r2, r2, #30
 800d592:	bf58      	it	pl
 800d594:	6963      	ldrpl	r3, [r4, #20]
 800d596:	60a3      	str	r3, [r4, #8]
 800d598:	e7f2      	b.n	800d580 <__swsetup_r+0xac>
 800d59a:	2000      	movs	r0, #0
 800d59c:	e7f7      	b.n	800d58e <__swsetup_r+0xba>
 800d59e:	bf00      	nop
 800d5a0:	20000b64 	.word	0x20000b64
 800d5a4:	08012994 	.word	0x08012994
 800d5a8:	080129b4 	.word	0x080129b4
 800d5ac:	08012974 	.word	0x08012974

0800d5b0 <__register_exitproc>:
 800d5b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5b4:	4d2c      	ldr	r5, [pc, #176]	; (800d668 <__register_exitproc+0xb8>)
 800d5b6:	682c      	ldr	r4, [r5, #0]
 800d5b8:	4607      	mov	r7, r0
 800d5ba:	460e      	mov	r6, r1
 800d5bc:	4691      	mov	r9, r2
 800d5be:	4698      	mov	r8, r3
 800d5c0:	b934      	cbnz	r4, 800d5d0 <__register_exitproc+0x20>
 800d5c2:	4b2a      	ldr	r3, [pc, #168]	; (800d66c <__register_exitproc+0xbc>)
 800d5c4:	4c2a      	ldr	r4, [pc, #168]	; (800d670 <__register_exitproc+0xc0>)
 800d5c6:	602c      	str	r4, [r5, #0]
 800d5c8:	b113      	cbz	r3, 800d5d0 <__register_exitproc+0x20>
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 800d5d0:	6863      	ldr	r3, [r4, #4]
 800d5d2:	2b1f      	cmp	r3, #31
 800d5d4:	dd3d      	ble.n	800d652 <__register_exitproc+0xa2>
 800d5d6:	4b27      	ldr	r3, [pc, #156]	; (800d674 <__register_exitproc+0xc4>)
 800d5d8:	b91b      	cbnz	r3, 800d5e2 <__register_exitproc+0x32>
 800d5da:	f04f 30ff 	mov.w	r0, #4294967295
 800d5de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d5e2:	208c      	movs	r0, #140	; 0x8c
 800d5e4:	f7ff f81e 	bl	800c624 <malloc>
 800d5e8:	4604      	mov	r4, r0
 800d5ea:	2800      	cmp	r0, #0
 800d5ec:	d0f5      	beq.n	800d5da <__register_exitproc+0x2a>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	682a      	ldr	r2, [r5, #0]
 800d5f2:	6002      	str	r2, [r0, #0]
 800d5f4:	6043      	str	r3, [r0, #4]
 800d5f6:	6028      	str	r0, [r5, #0]
 800d5f8:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
 800d5fc:	b30f      	cbz	r7, 800d642 <__register_exitproc+0x92>
 800d5fe:	f44f 7084 	mov.w	r0, #264	; 0x108
 800d602:	f7ff f80f 	bl	800c624 <malloc>
 800d606:	2800      	cmp	r0, #0
 800d608:	d0e7      	beq.n	800d5da <__register_exitproc+0x2a>
 800d60a:	2300      	movs	r3, #0
 800d60c:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 800d610:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
 800d614:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 800d618:	6862      	ldr	r2, [r4, #4]
 800d61a:	f840 9022 	str.w	r9, [r0, r2, lsl #2]
 800d61e:	2301      	movs	r3, #1
 800d620:	4093      	lsls	r3, r2
 800d622:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800d626:	f8d0 2100 	ldr.w	r2, [r0, #256]	; 0x100
 800d62a:	431a      	orrs	r2, r3
 800d62c:	2f02      	cmp	r7, #2
 800d62e:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
 800d632:	f8c1 8080 	str.w	r8, [r1, #128]	; 0x80
 800d636:	bf02      	ittt	eq
 800d638:	f8d0 2104 	ldreq.w	r2, [r0, #260]	; 0x104
 800d63c:	4313      	orreq	r3, r2
 800d63e:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 800d642:	6863      	ldr	r3, [r4, #4]
 800d644:	1c5a      	adds	r2, r3, #1
 800d646:	3302      	adds	r3, #2
 800d648:	6062      	str	r2, [r4, #4]
 800d64a:	2000      	movs	r0, #0
 800d64c:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 800d650:	e7c5      	b.n	800d5de <__register_exitproc+0x2e>
 800d652:	2f00      	cmp	r7, #0
 800d654:	d0f5      	beq.n	800d642 <__register_exitproc+0x92>
 800d656:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 800d65a:	2800      	cmp	r0, #0
 800d65c:	d1dc      	bne.n	800d618 <__register_exitproc+0x68>
 800d65e:	4b05      	ldr	r3, [pc, #20]	; (800d674 <__register_exitproc+0xc4>)
 800d660:	2b00      	cmp	r3, #0
 800d662:	d0ba      	beq.n	800d5da <__register_exitproc+0x2a>
 800d664:	e7cb      	b.n	800d5fe <__register_exitproc+0x4e>
 800d666:	bf00      	nop
 800d668:	200017b8 	.word	0x200017b8
 800d66c:	00000000 	.word	0x00000000
 800d670:	2000172c 	.word	0x2000172c
 800d674:	0800c625 	.word	0x0800c625

0800d678 <quorem>:
 800d678:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d67c:	6903      	ldr	r3, [r0, #16]
 800d67e:	690c      	ldr	r4, [r1, #16]
 800d680:	42a3      	cmp	r3, r4
 800d682:	4680      	mov	r8, r0
 800d684:	f2c0 8082 	blt.w	800d78c <quorem+0x114>
 800d688:	3c01      	subs	r4, #1
 800d68a:	f101 0714 	add.w	r7, r1, #20
 800d68e:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d692:	f100 0614 	add.w	r6, r0, #20
 800d696:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d69a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d69e:	eb06 030c 	add.w	r3, r6, ip
 800d6a2:	3501      	adds	r5, #1
 800d6a4:	eb07 090c 	add.w	r9, r7, ip
 800d6a8:	9301      	str	r3, [sp, #4]
 800d6aa:	fbb0 f5f5 	udiv	r5, r0, r5
 800d6ae:	b395      	cbz	r5, 800d716 <quorem+0x9e>
 800d6b0:	f04f 0a00 	mov.w	sl, #0
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	46b6      	mov	lr, r6
 800d6b8:	46d3      	mov	fp, sl
 800d6ba:	f850 2b04 	ldr.w	r2, [r0], #4
 800d6be:	b293      	uxth	r3, r2
 800d6c0:	fb05 a303 	mla	r3, r5, r3, sl
 800d6c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d6c8:	b29b      	uxth	r3, r3
 800d6ca:	ebab 0303 	sub.w	r3, fp, r3
 800d6ce:	0c12      	lsrs	r2, r2, #16
 800d6d0:	f8de b000 	ldr.w	fp, [lr]
 800d6d4:	fb05 a202 	mla	r2, r5, r2, sl
 800d6d8:	fa13 f38b 	uxtah	r3, r3, fp
 800d6dc:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d6e0:	fa1f fb82 	uxth.w	fp, r2
 800d6e4:	f8de 2000 	ldr.w	r2, [lr]
 800d6e8:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d6ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d6f6:	4581      	cmp	r9, r0
 800d6f8:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d6fc:	f84e 3b04 	str.w	r3, [lr], #4
 800d700:	d2db      	bcs.n	800d6ba <quorem+0x42>
 800d702:	f856 300c 	ldr.w	r3, [r6, ip]
 800d706:	b933      	cbnz	r3, 800d716 <quorem+0x9e>
 800d708:	9b01      	ldr	r3, [sp, #4]
 800d70a:	3b04      	subs	r3, #4
 800d70c:	429e      	cmp	r6, r3
 800d70e:	461a      	mov	r2, r3
 800d710:	d330      	bcc.n	800d774 <quorem+0xfc>
 800d712:	f8c8 4010 	str.w	r4, [r8, #16]
 800d716:	4640      	mov	r0, r8
 800d718:	f001 f9f6 	bl	800eb08 <__mcmp>
 800d71c:	2800      	cmp	r0, #0
 800d71e:	db25      	blt.n	800d76c <quorem+0xf4>
 800d720:	3501      	adds	r5, #1
 800d722:	4630      	mov	r0, r6
 800d724:	f04f 0c00 	mov.w	ip, #0
 800d728:	f857 2b04 	ldr.w	r2, [r7], #4
 800d72c:	f8d0 e000 	ldr.w	lr, [r0]
 800d730:	b293      	uxth	r3, r2
 800d732:	ebac 0303 	sub.w	r3, ip, r3
 800d736:	0c12      	lsrs	r2, r2, #16
 800d738:	fa13 f38e 	uxtah	r3, r3, lr
 800d73c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d740:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d744:	b29b      	uxth	r3, r3
 800d746:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d74a:	45b9      	cmp	r9, r7
 800d74c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d750:	f840 3b04 	str.w	r3, [r0], #4
 800d754:	d2e8      	bcs.n	800d728 <quorem+0xb0>
 800d756:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d75a:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d75e:	b92a      	cbnz	r2, 800d76c <quorem+0xf4>
 800d760:	3b04      	subs	r3, #4
 800d762:	429e      	cmp	r6, r3
 800d764:	461a      	mov	r2, r3
 800d766:	d30b      	bcc.n	800d780 <quorem+0x108>
 800d768:	f8c8 4010 	str.w	r4, [r8, #16]
 800d76c:	4628      	mov	r0, r5
 800d76e:	b003      	add	sp, #12
 800d770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d774:	6812      	ldr	r2, [r2, #0]
 800d776:	3b04      	subs	r3, #4
 800d778:	2a00      	cmp	r2, #0
 800d77a:	d1ca      	bne.n	800d712 <quorem+0x9a>
 800d77c:	3c01      	subs	r4, #1
 800d77e:	e7c5      	b.n	800d70c <quorem+0x94>
 800d780:	6812      	ldr	r2, [r2, #0]
 800d782:	3b04      	subs	r3, #4
 800d784:	2a00      	cmp	r2, #0
 800d786:	d1ef      	bne.n	800d768 <quorem+0xf0>
 800d788:	3c01      	subs	r4, #1
 800d78a:	e7ea      	b.n	800d762 <quorem+0xea>
 800d78c:	2000      	movs	r0, #0
 800d78e:	e7ee      	b.n	800d76e <quorem+0xf6>

0800d790 <_dtoa_r>:
 800d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	ec57 6b10 	vmov	r6, r7, d0
 800d798:	b097      	sub	sp, #92	; 0x5c
 800d79a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d79c:	9106      	str	r1, [sp, #24]
 800d79e:	4604      	mov	r4, r0
 800d7a0:	920b      	str	r2, [sp, #44]	; 0x2c
 800d7a2:	9312      	str	r3, [sp, #72]	; 0x48
 800d7a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d7a8:	e9cd 6700 	strd	r6, r7, [sp]
 800d7ac:	b93d      	cbnz	r5, 800d7be <_dtoa_r+0x2e>
 800d7ae:	2010      	movs	r0, #16
 800d7b0:	f7fe ff38 	bl	800c624 <malloc>
 800d7b4:	6260      	str	r0, [r4, #36]	; 0x24
 800d7b6:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d7ba:	6005      	str	r5, [r0, #0]
 800d7bc:	60c5      	str	r5, [r0, #12]
 800d7be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7c0:	6819      	ldr	r1, [r3, #0]
 800d7c2:	b151      	cbz	r1, 800d7da <_dtoa_r+0x4a>
 800d7c4:	685a      	ldr	r2, [r3, #4]
 800d7c6:	604a      	str	r2, [r1, #4]
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	4093      	lsls	r3, r2
 800d7cc:	608b      	str	r3, [r1, #8]
 800d7ce:	4620      	mov	r0, r4
 800d7d0:	f000 ffb8 	bl	800e744 <_Bfree>
 800d7d4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d7d6:	2200      	movs	r2, #0
 800d7d8:	601a      	str	r2, [r3, #0]
 800d7da:	1e3b      	subs	r3, r7, #0
 800d7dc:	bfbb      	ittet	lt
 800d7de:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d7e2:	9301      	strlt	r3, [sp, #4]
 800d7e4:	2300      	movge	r3, #0
 800d7e6:	2201      	movlt	r2, #1
 800d7e8:	bfac      	ite	ge
 800d7ea:	f8c8 3000 	strge.w	r3, [r8]
 800d7ee:	f8c8 2000 	strlt.w	r2, [r8]
 800d7f2:	4baf      	ldr	r3, [pc, #700]	; (800dab0 <_dtoa_r+0x320>)
 800d7f4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d7f8:	ea33 0308 	bics.w	r3, r3, r8
 800d7fc:	d114      	bne.n	800d828 <_dtoa_r+0x98>
 800d7fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d800:	f242 730f 	movw	r3, #9999	; 0x270f
 800d804:	6013      	str	r3, [r2, #0]
 800d806:	9b00      	ldr	r3, [sp, #0]
 800d808:	b923      	cbnz	r3, 800d814 <_dtoa_r+0x84>
 800d80a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d80e:	2800      	cmp	r0, #0
 800d810:	f000 8542 	beq.w	800e298 <_dtoa_r+0xb08>
 800d814:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d816:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800dac4 <_dtoa_r+0x334>
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	f000 8544 	beq.w	800e2a8 <_dtoa_r+0xb18>
 800d820:	f10b 0303 	add.w	r3, fp, #3
 800d824:	f000 bd3e 	b.w	800e2a4 <_dtoa_r+0xb14>
 800d828:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d82c:	2200      	movs	r2, #0
 800d82e:	2300      	movs	r3, #0
 800d830:	4630      	mov	r0, r6
 800d832:	4639      	mov	r1, r7
 800d834:	f7f3 f958 	bl	8000ae8 <__aeabi_dcmpeq>
 800d838:	4681      	mov	r9, r0
 800d83a:	b168      	cbz	r0, 800d858 <_dtoa_r+0xc8>
 800d83c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d83e:	2301      	movs	r3, #1
 800d840:	6013      	str	r3, [r2, #0]
 800d842:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d844:	2b00      	cmp	r3, #0
 800d846:	f000 8524 	beq.w	800e292 <_dtoa_r+0xb02>
 800d84a:	4b9a      	ldr	r3, [pc, #616]	; (800dab4 <_dtoa_r+0x324>)
 800d84c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d84e:	f103 3bff 	add.w	fp, r3, #4294967295
 800d852:	6013      	str	r3, [r2, #0]
 800d854:	f000 bd28 	b.w	800e2a8 <_dtoa_r+0xb18>
 800d858:	aa14      	add	r2, sp, #80	; 0x50
 800d85a:	a915      	add	r1, sp, #84	; 0x54
 800d85c:	ec47 6b10 	vmov	d0, r6, r7
 800d860:	4620      	mov	r0, r4
 800d862:	f001 f9c8 	bl	800ebf6 <__d2b>
 800d866:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d86a:	9004      	str	r0, [sp, #16]
 800d86c:	2d00      	cmp	r5, #0
 800d86e:	d07c      	beq.n	800d96a <_dtoa_r+0x1da>
 800d870:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d874:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d878:	46b2      	mov	sl, r6
 800d87a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d87e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d882:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d886:	2200      	movs	r2, #0
 800d888:	4b8b      	ldr	r3, [pc, #556]	; (800dab8 <_dtoa_r+0x328>)
 800d88a:	4650      	mov	r0, sl
 800d88c:	4659      	mov	r1, fp
 800d88e:	f7f2 fd0b 	bl	80002a8 <__aeabi_dsub>
 800d892:	a381      	add	r3, pc, #516	; (adr r3, 800da98 <_dtoa_r+0x308>)
 800d894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d898:	f7f2 febe 	bl	8000618 <__aeabi_dmul>
 800d89c:	a380      	add	r3, pc, #512	; (adr r3, 800daa0 <_dtoa_r+0x310>)
 800d89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a2:	f7f2 fd03 	bl	80002ac <__adddf3>
 800d8a6:	4606      	mov	r6, r0
 800d8a8:	4628      	mov	r0, r5
 800d8aa:	460f      	mov	r7, r1
 800d8ac:	f7f2 fe4a 	bl	8000544 <__aeabi_i2d>
 800d8b0:	a37d      	add	r3, pc, #500	; (adr r3, 800daa8 <_dtoa_r+0x318>)
 800d8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b6:	f7f2 feaf 	bl	8000618 <__aeabi_dmul>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	460b      	mov	r3, r1
 800d8be:	4630      	mov	r0, r6
 800d8c0:	4639      	mov	r1, r7
 800d8c2:	f7f2 fcf3 	bl	80002ac <__adddf3>
 800d8c6:	4606      	mov	r6, r0
 800d8c8:	460f      	mov	r7, r1
 800d8ca:	f7f3 f955 	bl	8000b78 <__aeabi_d2iz>
 800d8ce:	2200      	movs	r2, #0
 800d8d0:	4682      	mov	sl, r0
 800d8d2:	2300      	movs	r3, #0
 800d8d4:	4630      	mov	r0, r6
 800d8d6:	4639      	mov	r1, r7
 800d8d8:	f7f3 f910 	bl	8000afc <__aeabi_dcmplt>
 800d8dc:	b148      	cbz	r0, 800d8f2 <_dtoa_r+0x162>
 800d8de:	4650      	mov	r0, sl
 800d8e0:	f7f2 fe30 	bl	8000544 <__aeabi_i2d>
 800d8e4:	4632      	mov	r2, r6
 800d8e6:	463b      	mov	r3, r7
 800d8e8:	f7f3 f8fe 	bl	8000ae8 <__aeabi_dcmpeq>
 800d8ec:	b908      	cbnz	r0, 800d8f2 <_dtoa_r+0x162>
 800d8ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d8f2:	f1ba 0f16 	cmp.w	sl, #22
 800d8f6:	d859      	bhi.n	800d9ac <_dtoa_r+0x21c>
 800d8f8:	4970      	ldr	r1, [pc, #448]	; (800dabc <_dtoa_r+0x32c>)
 800d8fa:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d8fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d902:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d906:	f7f3 f917 	bl	8000b38 <__aeabi_dcmpgt>
 800d90a:	2800      	cmp	r0, #0
 800d90c:	d050      	beq.n	800d9b0 <_dtoa_r+0x220>
 800d90e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d912:	2300      	movs	r3, #0
 800d914:	930f      	str	r3, [sp, #60]	; 0x3c
 800d916:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d918:	1b5d      	subs	r5, r3, r5
 800d91a:	f1b5 0801 	subs.w	r8, r5, #1
 800d91e:	bf49      	itett	mi
 800d920:	f1c5 0301 	rsbmi	r3, r5, #1
 800d924:	2300      	movpl	r3, #0
 800d926:	9305      	strmi	r3, [sp, #20]
 800d928:	f04f 0800 	movmi.w	r8, #0
 800d92c:	bf58      	it	pl
 800d92e:	9305      	strpl	r3, [sp, #20]
 800d930:	f1ba 0f00 	cmp.w	sl, #0
 800d934:	db3e      	blt.n	800d9b4 <_dtoa_r+0x224>
 800d936:	2300      	movs	r3, #0
 800d938:	44d0      	add	r8, sl
 800d93a:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d93e:	9307      	str	r3, [sp, #28]
 800d940:	9b06      	ldr	r3, [sp, #24]
 800d942:	2b09      	cmp	r3, #9
 800d944:	f200 8090 	bhi.w	800da68 <_dtoa_r+0x2d8>
 800d948:	2b05      	cmp	r3, #5
 800d94a:	bfc4      	itt	gt
 800d94c:	3b04      	subgt	r3, #4
 800d94e:	9306      	strgt	r3, [sp, #24]
 800d950:	9b06      	ldr	r3, [sp, #24]
 800d952:	f1a3 0302 	sub.w	r3, r3, #2
 800d956:	bfcc      	ite	gt
 800d958:	2500      	movgt	r5, #0
 800d95a:	2501      	movle	r5, #1
 800d95c:	2b03      	cmp	r3, #3
 800d95e:	f200 808f 	bhi.w	800da80 <_dtoa_r+0x2f0>
 800d962:	e8df f003 	tbb	[pc, r3]
 800d966:	7f7d      	.short	0x7f7d
 800d968:	7131      	.short	0x7131
 800d96a:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d96e:	441d      	add	r5, r3
 800d970:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d974:	2820      	cmp	r0, #32
 800d976:	dd13      	ble.n	800d9a0 <_dtoa_r+0x210>
 800d978:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d97c:	9b00      	ldr	r3, [sp, #0]
 800d97e:	fa08 f800 	lsl.w	r8, r8, r0
 800d982:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d986:	fa23 f000 	lsr.w	r0, r3, r0
 800d98a:	ea48 0000 	orr.w	r0, r8, r0
 800d98e:	f7f2 fdc9 	bl	8000524 <__aeabi_ui2d>
 800d992:	2301      	movs	r3, #1
 800d994:	4682      	mov	sl, r0
 800d996:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d99a:	3d01      	subs	r5, #1
 800d99c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d99e:	e772      	b.n	800d886 <_dtoa_r+0xf6>
 800d9a0:	9b00      	ldr	r3, [sp, #0]
 800d9a2:	f1c0 0020 	rsb	r0, r0, #32
 800d9a6:	fa03 f000 	lsl.w	r0, r3, r0
 800d9aa:	e7f0      	b.n	800d98e <_dtoa_r+0x1fe>
 800d9ac:	2301      	movs	r3, #1
 800d9ae:	e7b1      	b.n	800d914 <_dtoa_r+0x184>
 800d9b0:	900f      	str	r0, [sp, #60]	; 0x3c
 800d9b2:	e7b0      	b.n	800d916 <_dtoa_r+0x186>
 800d9b4:	9b05      	ldr	r3, [sp, #20]
 800d9b6:	eba3 030a 	sub.w	r3, r3, sl
 800d9ba:	9305      	str	r3, [sp, #20]
 800d9bc:	f1ca 0300 	rsb	r3, sl, #0
 800d9c0:	9307      	str	r3, [sp, #28]
 800d9c2:	2300      	movs	r3, #0
 800d9c4:	930e      	str	r3, [sp, #56]	; 0x38
 800d9c6:	e7bb      	b.n	800d940 <_dtoa_r+0x1b0>
 800d9c8:	2301      	movs	r3, #1
 800d9ca:	930a      	str	r3, [sp, #40]	; 0x28
 800d9cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d9ce:	2b00      	cmp	r3, #0
 800d9d0:	dd59      	ble.n	800da86 <_dtoa_r+0x2f6>
 800d9d2:	9302      	str	r3, [sp, #8]
 800d9d4:	4699      	mov	r9, r3
 800d9d6:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d9d8:	2200      	movs	r2, #0
 800d9da:	6072      	str	r2, [r6, #4]
 800d9dc:	2204      	movs	r2, #4
 800d9de:	f102 0014 	add.w	r0, r2, #20
 800d9e2:	4298      	cmp	r0, r3
 800d9e4:	6871      	ldr	r1, [r6, #4]
 800d9e6:	d953      	bls.n	800da90 <_dtoa_r+0x300>
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	f000 fe77 	bl	800e6dc <_Balloc>
 800d9ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d9f0:	6030      	str	r0, [r6, #0]
 800d9f2:	f1b9 0f0e 	cmp.w	r9, #14
 800d9f6:	f8d3 b000 	ldr.w	fp, [r3]
 800d9fa:	f200 80e6 	bhi.w	800dbca <_dtoa_r+0x43a>
 800d9fe:	2d00      	cmp	r5, #0
 800da00:	f000 80e3 	beq.w	800dbca <_dtoa_r+0x43a>
 800da04:	ed9d 7b00 	vldr	d7, [sp]
 800da08:	f1ba 0f00 	cmp.w	sl, #0
 800da0c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800da10:	dd74      	ble.n	800dafc <_dtoa_r+0x36c>
 800da12:	4a2a      	ldr	r2, [pc, #168]	; (800dabc <_dtoa_r+0x32c>)
 800da14:	f00a 030f 	and.w	r3, sl, #15
 800da18:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800da1c:	ed93 7b00 	vldr	d7, [r3]
 800da20:	ea4f 162a 	mov.w	r6, sl, asr #4
 800da24:	06f0      	lsls	r0, r6, #27
 800da26:	ed8d 7b08 	vstr	d7, [sp, #32]
 800da2a:	d565      	bpl.n	800daf8 <_dtoa_r+0x368>
 800da2c:	4b24      	ldr	r3, [pc, #144]	; (800dac0 <_dtoa_r+0x330>)
 800da2e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800da32:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800da36:	f7f2 ff19 	bl	800086c <__aeabi_ddiv>
 800da3a:	e9cd 0100 	strd	r0, r1, [sp]
 800da3e:	f006 060f 	and.w	r6, r6, #15
 800da42:	2503      	movs	r5, #3
 800da44:	4f1e      	ldr	r7, [pc, #120]	; (800dac0 <_dtoa_r+0x330>)
 800da46:	e04c      	b.n	800dae2 <_dtoa_r+0x352>
 800da48:	2301      	movs	r3, #1
 800da4a:	930a      	str	r3, [sp, #40]	; 0x28
 800da4c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800da4e:	4453      	add	r3, sl
 800da50:	f103 0901 	add.w	r9, r3, #1
 800da54:	9302      	str	r3, [sp, #8]
 800da56:	464b      	mov	r3, r9
 800da58:	2b01      	cmp	r3, #1
 800da5a:	bfb8      	it	lt
 800da5c:	2301      	movlt	r3, #1
 800da5e:	e7ba      	b.n	800d9d6 <_dtoa_r+0x246>
 800da60:	2300      	movs	r3, #0
 800da62:	e7b2      	b.n	800d9ca <_dtoa_r+0x23a>
 800da64:	2300      	movs	r3, #0
 800da66:	e7f0      	b.n	800da4a <_dtoa_r+0x2ba>
 800da68:	2501      	movs	r5, #1
 800da6a:	2300      	movs	r3, #0
 800da6c:	9306      	str	r3, [sp, #24]
 800da6e:	950a      	str	r5, [sp, #40]	; 0x28
 800da70:	f04f 33ff 	mov.w	r3, #4294967295
 800da74:	9302      	str	r3, [sp, #8]
 800da76:	4699      	mov	r9, r3
 800da78:	2200      	movs	r2, #0
 800da7a:	2312      	movs	r3, #18
 800da7c:	920b      	str	r2, [sp, #44]	; 0x2c
 800da7e:	e7aa      	b.n	800d9d6 <_dtoa_r+0x246>
 800da80:	2301      	movs	r3, #1
 800da82:	930a      	str	r3, [sp, #40]	; 0x28
 800da84:	e7f4      	b.n	800da70 <_dtoa_r+0x2e0>
 800da86:	2301      	movs	r3, #1
 800da88:	9302      	str	r3, [sp, #8]
 800da8a:	4699      	mov	r9, r3
 800da8c:	461a      	mov	r2, r3
 800da8e:	e7f5      	b.n	800da7c <_dtoa_r+0x2ec>
 800da90:	3101      	adds	r1, #1
 800da92:	6071      	str	r1, [r6, #4]
 800da94:	0052      	lsls	r2, r2, #1
 800da96:	e7a2      	b.n	800d9de <_dtoa_r+0x24e>
 800da98:	636f4361 	.word	0x636f4361
 800da9c:	3fd287a7 	.word	0x3fd287a7
 800daa0:	8b60c8b3 	.word	0x8b60c8b3
 800daa4:	3fc68a28 	.word	0x3fc68a28
 800daa8:	509f79fb 	.word	0x509f79fb
 800daac:	3fd34413 	.word	0x3fd34413
 800dab0:	7ff00000 	.word	0x7ff00000
 800dab4:	08012942 	.word	0x08012942
 800dab8:	3ff80000 	.word	0x3ff80000
 800dabc:	08012a00 	.word	0x08012a00
 800dac0:	080129d8 	.word	0x080129d8
 800dac4:	0801296e 	.word	0x0801296e
 800dac8:	07f1      	lsls	r1, r6, #31
 800daca:	d508      	bpl.n	800dade <_dtoa_r+0x34e>
 800dacc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dad0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dad4:	f7f2 fda0 	bl	8000618 <__aeabi_dmul>
 800dad8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dadc:	3501      	adds	r5, #1
 800dade:	1076      	asrs	r6, r6, #1
 800dae0:	3708      	adds	r7, #8
 800dae2:	2e00      	cmp	r6, #0
 800dae4:	d1f0      	bne.n	800dac8 <_dtoa_r+0x338>
 800dae6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800daea:	e9dd 0100 	ldrd	r0, r1, [sp]
 800daee:	f7f2 febd 	bl	800086c <__aeabi_ddiv>
 800daf2:	e9cd 0100 	strd	r0, r1, [sp]
 800daf6:	e01a      	b.n	800db2e <_dtoa_r+0x39e>
 800daf8:	2502      	movs	r5, #2
 800dafa:	e7a3      	b.n	800da44 <_dtoa_r+0x2b4>
 800dafc:	f000 80a0 	beq.w	800dc40 <_dtoa_r+0x4b0>
 800db00:	f1ca 0600 	rsb	r6, sl, #0
 800db04:	4b9f      	ldr	r3, [pc, #636]	; (800dd84 <_dtoa_r+0x5f4>)
 800db06:	4fa0      	ldr	r7, [pc, #640]	; (800dd88 <_dtoa_r+0x5f8>)
 800db08:	f006 020f 	and.w	r2, r6, #15
 800db0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db14:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800db18:	f7f2 fd7e 	bl	8000618 <__aeabi_dmul>
 800db1c:	e9cd 0100 	strd	r0, r1, [sp]
 800db20:	1136      	asrs	r6, r6, #4
 800db22:	2300      	movs	r3, #0
 800db24:	2502      	movs	r5, #2
 800db26:	2e00      	cmp	r6, #0
 800db28:	d17f      	bne.n	800dc2a <_dtoa_r+0x49a>
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d1e1      	bne.n	800daf2 <_dtoa_r+0x362>
 800db2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800db30:	2b00      	cmp	r3, #0
 800db32:	f000 8087 	beq.w	800dc44 <_dtoa_r+0x4b4>
 800db36:	e9dd 6700 	ldrd	r6, r7, [sp]
 800db3a:	2200      	movs	r2, #0
 800db3c:	4b93      	ldr	r3, [pc, #588]	; (800dd8c <_dtoa_r+0x5fc>)
 800db3e:	4630      	mov	r0, r6
 800db40:	4639      	mov	r1, r7
 800db42:	f7f2 ffdb 	bl	8000afc <__aeabi_dcmplt>
 800db46:	2800      	cmp	r0, #0
 800db48:	d07c      	beq.n	800dc44 <_dtoa_r+0x4b4>
 800db4a:	f1b9 0f00 	cmp.w	r9, #0
 800db4e:	d079      	beq.n	800dc44 <_dtoa_r+0x4b4>
 800db50:	9b02      	ldr	r3, [sp, #8]
 800db52:	2b00      	cmp	r3, #0
 800db54:	dd35      	ble.n	800dbc2 <_dtoa_r+0x432>
 800db56:	f10a 33ff 	add.w	r3, sl, #4294967295
 800db5a:	9308      	str	r3, [sp, #32]
 800db5c:	4639      	mov	r1, r7
 800db5e:	2200      	movs	r2, #0
 800db60:	4b8b      	ldr	r3, [pc, #556]	; (800dd90 <_dtoa_r+0x600>)
 800db62:	4630      	mov	r0, r6
 800db64:	f7f2 fd58 	bl	8000618 <__aeabi_dmul>
 800db68:	e9cd 0100 	strd	r0, r1, [sp]
 800db6c:	9f02      	ldr	r7, [sp, #8]
 800db6e:	3501      	adds	r5, #1
 800db70:	4628      	mov	r0, r5
 800db72:	f7f2 fce7 	bl	8000544 <__aeabi_i2d>
 800db76:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db7a:	f7f2 fd4d 	bl	8000618 <__aeabi_dmul>
 800db7e:	2200      	movs	r2, #0
 800db80:	4b84      	ldr	r3, [pc, #528]	; (800dd94 <_dtoa_r+0x604>)
 800db82:	f7f2 fb93 	bl	80002ac <__adddf3>
 800db86:	4605      	mov	r5, r0
 800db88:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800db8c:	2f00      	cmp	r7, #0
 800db8e:	d15d      	bne.n	800dc4c <_dtoa_r+0x4bc>
 800db90:	2200      	movs	r2, #0
 800db92:	4b81      	ldr	r3, [pc, #516]	; (800dd98 <_dtoa_r+0x608>)
 800db94:	e9dd 0100 	ldrd	r0, r1, [sp]
 800db98:	f7f2 fb86 	bl	80002a8 <__aeabi_dsub>
 800db9c:	462a      	mov	r2, r5
 800db9e:	4633      	mov	r3, r6
 800dba0:	e9cd 0100 	strd	r0, r1, [sp]
 800dba4:	f7f2 ffc8 	bl	8000b38 <__aeabi_dcmpgt>
 800dba8:	2800      	cmp	r0, #0
 800dbaa:	f040 8288 	bne.w	800e0be <_dtoa_r+0x92e>
 800dbae:	462a      	mov	r2, r5
 800dbb0:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800dbb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dbb8:	f7f2 ffa0 	bl	8000afc <__aeabi_dcmplt>
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	f040 827c 	bne.w	800e0ba <_dtoa_r+0x92a>
 800dbc2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800dbc6:	e9cd 2300 	strd	r2, r3, [sp]
 800dbca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	f2c0 8150 	blt.w	800de72 <_dtoa_r+0x6e2>
 800dbd2:	f1ba 0f0e 	cmp.w	sl, #14
 800dbd6:	f300 814c 	bgt.w	800de72 <_dtoa_r+0x6e2>
 800dbda:	4b6a      	ldr	r3, [pc, #424]	; (800dd84 <_dtoa_r+0x5f4>)
 800dbdc:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800dbe0:	ed93 7b00 	vldr	d7, [r3]
 800dbe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	ed8d 7b02 	vstr	d7, [sp, #8]
 800dbec:	f280 80d8 	bge.w	800dda0 <_dtoa_r+0x610>
 800dbf0:	f1b9 0f00 	cmp.w	r9, #0
 800dbf4:	f300 80d4 	bgt.w	800dda0 <_dtoa_r+0x610>
 800dbf8:	f040 825e 	bne.w	800e0b8 <_dtoa_r+0x928>
 800dbfc:	2200      	movs	r2, #0
 800dbfe:	4b66      	ldr	r3, [pc, #408]	; (800dd98 <_dtoa_r+0x608>)
 800dc00:	ec51 0b17 	vmov	r0, r1, d7
 800dc04:	f7f2 fd08 	bl	8000618 <__aeabi_dmul>
 800dc08:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dc0c:	f7f2 ff8a 	bl	8000b24 <__aeabi_dcmpge>
 800dc10:	464f      	mov	r7, r9
 800dc12:	464e      	mov	r6, r9
 800dc14:	2800      	cmp	r0, #0
 800dc16:	f040 8234 	bne.w	800e082 <_dtoa_r+0x8f2>
 800dc1a:	2331      	movs	r3, #49	; 0x31
 800dc1c:	f10b 0501 	add.w	r5, fp, #1
 800dc20:	f88b 3000 	strb.w	r3, [fp]
 800dc24:	f10a 0a01 	add.w	sl, sl, #1
 800dc28:	e22f      	b.n	800e08a <_dtoa_r+0x8fa>
 800dc2a:	07f2      	lsls	r2, r6, #31
 800dc2c:	d505      	bpl.n	800dc3a <_dtoa_r+0x4aa>
 800dc2e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc32:	f7f2 fcf1 	bl	8000618 <__aeabi_dmul>
 800dc36:	3501      	adds	r5, #1
 800dc38:	2301      	movs	r3, #1
 800dc3a:	1076      	asrs	r6, r6, #1
 800dc3c:	3708      	adds	r7, #8
 800dc3e:	e772      	b.n	800db26 <_dtoa_r+0x396>
 800dc40:	2502      	movs	r5, #2
 800dc42:	e774      	b.n	800db2e <_dtoa_r+0x39e>
 800dc44:	f8cd a020 	str.w	sl, [sp, #32]
 800dc48:	464f      	mov	r7, r9
 800dc4a:	e791      	b.n	800db70 <_dtoa_r+0x3e0>
 800dc4c:	4b4d      	ldr	r3, [pc, #308]	; (800dd84 <_dtoa_r+0x5f4>)
 800dc4e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dc52:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800dc56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d047      	beq.n	800dcec <_dtoa_r+0x55c>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	460b      	mov	r3, r1
 800dc60:	2000      	movs	r0, #0
 800dc62:	494e      	ldr	r1, [pc, #312]	; (800dd9c <_dtoa_r+0x60c>)
 800dc64:	f7f2 fe02 	bl	800086c <__aeabi_ddiv>
 800dc68:	462a      	mov	r2, r5
 800dc6a:	4633      	mov	r3, r6
 800dc6c:	f7f2 fb1c 	bl	80002a8 <__aeabi_dsub>
 800dc70:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dc74:	465d      	mov	r5, fp
 800dc76:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc7a:	f7f2 ff7d 	bl	8000b78 <__aeabi_d2iz>
 800dc7e:	4606      	mov	r6, r0
 800dc80:	f7f2 fc60 	bl	8000544 <__aeabi_i2d>
 800dc84:	4602      	mov	r2, r0
 800dc86:	460b      	mov	r3, r1
 800dc88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dc8c:	f7f2 fb0c 	bl	80002a8 <__aeabi_dsub>
 800dc90:	3630      	adds	r6, #48	; 0x30
 800dc92:	f805 6b01 	strb.w	r6, [r5], #1
 800dc96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dc9a:	e9cd 0100 	strd	r0, r1, [sp]
 800dc9e:	f7f2 ff2d 	bl	8000afc <__aeabi_dcmplt>
 800dca2:	2800      	cmp	r0, #0
 800dca4:	d163      	bne.n	800dd6e <_dtoa_r+0x5de>
 800dca6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dcaa:	2000      	movs	r0, #0
 800dcac:	4937      	ldr	r1, [pc, #220]	; (800dd8c <_dtoa_r+0x5fc>)
 800dcae:	f7f2 fafb 	bl	80002a8 <__aeabi_dsub>
 800dcb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dcb6:	f7f2 ff21 	bl	8000afc <__aeabi_dcmplt>
 800dcba:	2800      	cmp	r0, #0
 800dcbc:	f040 80b7 	bne.w	800de2e <_dtoa_r+0x69e>
 800dcc0:	eba5 030b 	sub.w	r3, r5, fp
 800dcc4:	429f      	cmp	r7, r3
 800dcc6:	f77f af7c 	ble.w	800dbc2 <_dtoa_r+0x432>
 800dcca:	2200      	movs	r2, #0
 800dccc:	4b30      	ldr	r3, [pc, #192]	; (800dd90 <_dtoa_r+0x600>)
 800dcce:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dcd2:	f7f2 fca1 	bl	8000618 <__aeabi_dmul>
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dcdc:	4b2c      	ldr	r3, [pc, #176]	; (800dd90 <_dtoa_r+0x600>)
 800dcde:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dce2:	f7f2 fc99 	bl	8000618 <__aeabi_dmul>
 800dce6:	e9cd 0100 	strd	r0, r1, [sp]
 800dcea:	e7c4      	b.n	800dc76 <_dtoa_r+0x4e6>
 800dcec:	462a      	mov	r2, r5
 800dcee:	4633      	mov	r3, r6
 800dcf0:	f7f2 fc92 	bl	8000618 <__aeabi_dmul>
 800dcf4:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800dcf8:	eb0b 0507 	add.w	r5, fp, r7
 800dcfc:	465e      	mov	r6, fp
 800dcfe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd02:	f7f2 ff39 	bl	8000b78 <__aeabi_d2iz>
 800dd06:	4607      	mov	r7, r0
 800dd08:	f7f2 fc1c 	bl	8000544 <__aeabi_i2d>
 800dd0c:	3730      	adds	r7, #48	; 0x30
 800dd0e:	4602      	mov	r2, r0
 800dd10:	460b      	mov	r3, r1
 800dd12:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd16:	f7f2 fac7 	bl	80002a8 <__aeabi_dsub>
 800dd1a:	f806 7b01 	strb.w	r7, [r6], #1
 800dd1e:	42ae      	cmp	r6, r5
 800dd20:	e9cd 0100 	strd	r0, r1, [sp]
 800dd24:	f04f 0200 	mov.w	r2, #0
 800dd28:	d126      	bne.n	800dd78 <_dtoa_r+0x5e8>
 800dd2a:	4b1c      	ldr	r3, [pc, #112]	; (800dd9c <_dtoa_r+0x60c>)
 800dd2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800dd30:	f7f2 fabc 	bl	80002ac <__adddf3>
 800dd34:	4602      	mov	r2, r0
 800dd36:	460b      	mov	r3, r1
 800dd38:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd3c:	f7f2 fefc 	bl	8000b38 <__aeabi_dcmpgt>
 800dd40:	2800      	cmp	r0, #0
 800dd42:	d174      	bne.n	800de2e <_dtoa_r+0x69e>
 800dd44:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800dd48:	2000      	movs	r0, #0
 800dd4a:	4914      	ldr	r1, [pc, #80]	; (800dd9c <_dtoa_r+0x60c>)
 800dd4c:	f7f2 faac 	bl	80002a8 <__aeabi_dsub>
 800dd50:	4602      	mov	r2, r0
 800dd52:	460b      	mov	r3, r1
 800dd54:	e9dd 0100 	ldrd	r0, r1, [sp]
 800dd58:	f7f2 fed0 	bl	8000afc <__aeabi_dcmplt>
 800dd5c:	2800      	cmp	r0, #0
 800dd5e:	f43f af30 	beq.w	800dbc2 <_dtoa_r+0x432>
 800dd62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd66:	2b30      	cmp	r3, #48	; 0x30
 800dd68:	f105 32ff 	add.w	r2, r5, #4294967295
 800dd6c:	d002      	beq.n	800dd74 <_dtoa_r+0x5e4>
 800dd6e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800dd72:	e04a      	b.n	800de0a <_dtoa_r+0x67a>
 800dd74:	4615      	mov	r5, r2
 800dd76:	e7f4      	b.n	800dd62 <_dtoa_r+0x5d2>
 800dd78:	4b05      	ldr	r3, [pc, #20]	; (800dd90 <_dtoa_r+0x600>)
 800dd7a:	f7f2 fc4d 	bl	8000618 <__aeabi_dmul>
 800dd7e:	e9cd 0100 	strd	r0, r1, [sp]
 800dd82:	e7bc      	b.n	800dcfe <_dtoa_r+0x56e>
 800dd84:	08012a00 	.word	0x08012a00
 800dd88:	080129d8 	.word	0x080129d8
 800dd8c:	3ff00000 	.word	0x3ff00000
 800dd90:	40240000 	.word	0x40240000
 800dd94:	401c0000 	.word	0x401c0000
 800dd98:	40140000 	.word	0x40140000
 800dd9c:	3fe00000 	.word	0x3fe00000
 800dda0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800dda4:	465d      	mov	r5, fp
 800dda6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddaa:	4630      	mov	r0, r6
 800ddac:	4639      	mov	r1, r7
 800ddae:	f7f2 fd5d 	bl	800086c <__aeabi_ddiv>
 800ddb2:	f7f2 fee1 	bl	8000b78 <__aeabi_d2iz>
 800ddb6:	4680      	mov	r8, r0
 800ddb8:	f7f2 fbc4 	bl	8000544 <__aeabi_i2d>
 800ddbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddc0:	f7f2 fc2a 	bl	8000618 <__aeabi_dmul>
 800ddc4:	4602      	mov	r2, r0
 800ddc6:	460b      	mov	r3, r1
 800ddc8:	4630      	mov	r0, r6
 800ddca:	4639      	mov	r1, r7
 800ddcc:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ddd0:	f7f2 fa6a 	bl	80002a8 <__aeabi_dsub>
 800ddd4:	f805 6b01 	strb.w	r6, [r5], #1
 800ddd8:	eba5 060b 	sub.w	r6, r5, fp
 800dddc:	45b1      	cmp	r9, r6
 800ddde:	4602      	mov	r2, r0
 800dde0:	460b      	mov	r3, r1
 800dde2:	d139      	bne.n	800de58 <_dtoa_r+0x6c8>
 800dde4:	f7f2 fa62 	bl	80002ac <__adddf3>
 800dde8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddec:	4606      	mov	r6, r0
 800ddee:	460f      	mov	r7, r1
 800ddf0:	f7f2 fea2 	bl	8000b38 <__aeabi_dcmpgt>
 800ddf4:	b9c8      	cbnz	r0, 800de2a <_dtoa_r+0x69a>
 800ddf6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ddfa:	4630      	mov	r0, r6
 800ddfc:	4639      	mov	r1, r7
 800ddfe:	f7f2 fe73 	bl	8000ae8 <__aeabi_dcmpeq>
 800de02:	b110      	cbz	r0, 800de0a <_dtoa_r+0x67a>
 800de04:	f018 0f01 	tst.w	r8, #1
 800de08:	d10f      	bne.n	800de2a <_dtoa_r+0x69a>
 800de0a:	9904      	ldr	r1, [sp, #16]
 800de0c:	4620      	mov	r0, r4
 800de0e:	f000 fc99 	bl	800e744 <_Bfree>
 800de12:	2300      	movs	r3, #0
 800de14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800de16:	702b      	strb	r3, [r5, #0]
 800de18:	f10a 0301 	add.w	r3, sl, #1
 800de1c:	6013      	str	r3, [r2, #0]
 800de1e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800de20:	2b00      	cmp	r3, #0
 800de22:	f000 8241 	beq.w	800e2a8 <_dtoa_r+0xb18>
 800de26:	601d      	str	r5, [r3, #0]
 800de28:	e23e      	b.n	800e2a8 <_dtoa_r+0xb18>
 800de2a:	f8cd a020 	str.w	sl, [sp, #32]
 800de2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800de32:	2a39      	cmp	r2, #57	; 0x39
 800de34:	f105 33ff 	add.w	r3, r5, #4294967295
 800de38:	d108      	bne.n	800de4c <_dtoa_r+0x6bc>
 800de3a:	459b      	cmp	fp, r3
 800de3c:	d10a      	bne.n	800de54 <_dtoa_r+0x6c4>
 800de3e:	9b08      	ldr	r3, [sp, #32]
 800de40:	3301      	adds	r3, #1
 800de42:	9308      	str	r3, [sp, #32]
 800de44:	2330      	movs	r3, #48	; 0x30
 800de46:	f88b 3000 	strb.w	r3, [fp]
 800de4a:	465b      	mov	r3, fp
 800de4c:	781a      	ldrb	r2, [r3, #0]
 800de4e:	3201      	adds	r2, #1
 800de50:	701a      	strb	r2, [r3, #0]
 800de52:	e78c      	b.n	800dd6e <_dtoa_r+0x5de>
 800de54:	461d      	mov	r5, r3
 800de56:	e7ea      	b.n	800de2e <_dtoa_r+0x69e>
 800de58:	2200      	movs	r2, #0
 800de5a:	4b9b      	ldr	r3, [pc, #620]	; (800e0c8 <_dtoa_r+0x938>)
 800de5c:	f7f2 fbdc 	bl	8000618 <__aeabi_dmul>
 800de60:	2200      	movs	r2, #0
 800de62:	2300      	movs	r3, #0
 800de64:	4606      	mov	r6, r0
 800de66:	460f      	mov	r7, r1
 800de68:	f7f2 fe3e 	bl	8000ae8 <__aeabi_dcmpeq>
 800de6c:	2800      	cmp	r0, #0
 800de6e:	d09a      	beq.n	800dda6 <_dtoa_r+0x616>
 800de70:	e7cb      	b.n	800de0a <_dtoa_r+0x67a>
 800de72:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800de74:	2a00      	cmp	r2, #0
 800de76:	f000 808b 	beq.w	800df90 <_dtoa_r+0x800>
 800de7a:	9a06      	ldr	r2, [sp, #24]
 800de7c:	2a01      	cmp	r2, #1
 800de7e:	dc6e      	bgt.n	800df5e <_dtoa_r+0x7ce>
 800de80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800de82:	2a00      	cmp	r2, #0
 800de84:	d067      	beq.n	800df56 <_dtoa_r+0x7c6>
 800de86:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800de8a:	9f07      	ldr	r7, [sp, #28]
 800de8c:	9d05      	ldr	r5, [sp, #20]
 800de8e:	9a05      	ldr	r2, [sp, #20]
 800de90:	2101      	movs	r1, #1
 800de92:	441a      	add	r2, r3
 800de94:	4620      	mov	r0, r4
 800de96:	9205      	str	r2, [sp, #20]
 800de98:	4498      	add	r8, r3
 800de9a:	f000 fcf3 	bl	800e884 <__i2b>
 800de9e:	4606      	mov	r6, r0
 800dea0:	2d00      	cmp	r5, #0
 800dea2:	dd0c      	ble.n	800debe <_dtoa_r+0x72e>
 800dea4:	f1b8 0f00 	cmp.w	r8, #0
 800dea8:	dd09      	ble.n	800debe <_dtoa_r+0x72e>
 800deaa:	4545      	cmp	r5, r8
 800deac:	9a05      	ldr	r2, [sp, #20]
 800deae:	462b      	mov	r3, r5
 800deb0:	bfa8      	it	ge
 800deb2:	4643      	movge	r3, r8
 800deb4:	1ad2      	subs	r2, r2, r3
 800deb6:	9205      	str	r2, [sp, #20]
 800deb8:	1aed      	subs	r5, r5, r3
 800deba:	eba8 0803 	sub.w	r8, r8, r3
 800debe:	9b07      	ldr	r3, [sp, #28]
 800dec0:	b1eb      	cbz	r3, 800defe <_dtoa_r+0x76e>
 800dec2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d067      	beq.n	800df98 <_dtoa_r+0x808>
 800dec8:	b18f      	cbz	r7, 800deee <_dtoa_r+0x75e>
 800deca:	4631      	mov	r1, r6
 800decc:	463a      	mov	r2, r7
 800dece:	4620      	mov	r0, r4
 800ded0:	f000 fd78 	bl	800e9c4 <__pow5mult>
 800ded4:	9a04      	ldr	r2, [sp, #16]
 800ded6:	4601      	mov	r1, r0
 800ded8:	4606      	mov	r6, r0
 800deda:	4620      	mov	r0, r4
 800dedc:	f000 fcdb 	bl	800e896 <__multiply>
 800dee0:	9904      	ldr	r1, [sp, #16]
 800dee2:	9008      	str	r0, [sp, #32]
 800dee4:	4620      	mov	r0, r4
 800dee6:	f000 fc2d 	bl	800e744 <_Bfree>
 800deea:	9b08      	ldr	r3, [sp, #32]
 800deec:	9304      	str	r3, [sp, #16]
 800deee:	9b07      	ldr	r3, [sp, #28]
 800def0:	1bda      	subs	r2, r3, r7
 800def2:	d004      	beq.n	800defe <_dtoa_r+0x76e>
 800def4:	9904      	ldr	r1, [sp, #16]
 800def6:	4620      	mov	r0, r4
 800def8:	f000 fd64 	bl	800e9c4 <__pow5mult>
 800defc:	9004      	str	r0, [sp, #16]
 800defe:	2101      	movs	r1, #1
 800df00:	4620      	mov	r0, r4
 800df02:	f000 fcbf 	bl	800e884 <__i2b>
 800df06:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df08:	4607      	mov	r7, r0
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	f000 81d0 	beq.w	800e2b0 <_dtoa_r+0xb20>
 800df10:	461a      	mov	r2, r3
 800df12:	4601      	mov	r1, r0
 800df14:	4620      	mov	r0, r4
 800df16:	f000 fd55 	bl	800e9c4 <__pow5mult>
 800df1a:	9b06      	ldr	r3, [sp, #24]
 800df1c:	2b01      	cmp	r3, #1
 800df1e:	4607      	mov	r7, r0
 800df20:	dc40      	bgt.n	800dfa4 <_dtoa_r+0x814>
 800df22:	9b00      	ldr	r3, [sp, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d139      	bne.n	800df9c <_dtoa_r+0x80c>
 800df28:	9b01      	ldr	r3, [sp, #4]
 800df2a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d136      	bne.n	800dfa0 <_dtoa_r+0x810>
 800df32:	9b01      	ldr	r3, [sp, #4]
 800df34:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df38:	0d1b      	lsrs	r3, r3, #20
 800df3a:	051b      	lsls	r3, r3, #20
 800df3c:	b12b      	cbz	r3, 800df4a <_dtoa_r+0x7ba>
 800df3e:	9b05      	ldr	r3, [sp, #20]
 800df40:	3301      	adds	r3, #1
 800df42:	9305      	str	r3, [sp, #20]
 800df44:	f108 0801 	add.w	r8, r8, #1
 800df48:	2301      	movs	r3, #1
 800df4a:	9307      	str	r3, [sp, #28]
 800df4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800df4e:	2b00      	cmp	r3, #0
 800df50:	d12a      	bne.n	800dfa8 <_dtoa_r+0x818>
 800df52:	2001      	movs	r0, #1
 800df54:	e030      	b.n	800dfb8 <_dtoa_r+0x828>
 800df56:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800df58:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800df5c:	e795      	b.n	800de8a <_dtoa_r+0x6fa>
 800df5e:	9b07      	ldr	r3, [sp, #28]
 800df60:	f109 37ff 	add.w	r7, r9, #4294967295
 800df64:	42bb      	cmp	r3, r7
 800df66:	bfbf      	itttt	lt
 800df68:	9b07      	ldrlt	r3, [sp, #28]
 800df6a:	9707      	strlt	r7, [sp, #28]
 800df6c:	1afa      	sublt	r2, r7, r3
 800df6e:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800df70:	bfbb      	ittet	lt
 800df72:	189b      	addlt	r3, r3, r2
 800df74:	930e      	strlt	r3, [sp, #56]	; 0x38
 800df76:	1bdf      	subge	r7, r3, r7
 800df78:	2700      	movlt	r7, #0
 800df7a:	f1b9 0f00 	cmp.w	r9, #0
 800df7e:	bfb5      	itete	lt
 800df80:	9b05      	ldrlt	r3, [sp, #20]
 800df82:	9d05      	ldrge	r5, [sp, #20]
 800df84:	eba3 0509 	sublt.w	r5, r3, r9
 800df88:	464b      	movge	r3, r9
 800df8a:	bfb8      	it	lt
 800df8c:	2300      	movlt	r3, #0
 800df8e:	e77e      	b.n	800de8e <_dtoa_r+0x6fe>
 800df90:	9f07      	ldr	r7, [sp, #28]
 800df92:	9d05      	ldr	r5, [sp, #20]
 800df94:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800df96:	e783      	b.n	800dea0 <_dtoa_r+0x710>
 800df98:	9a07      	ldr	r2, [sp, #28]
 800df9a:	e7ab      	b.n	800def4 <_dtoa_r+0x764>
 800df9c:	2300      	movs	r3, #0
 800df9e:	e7d4      	b.n	800df4a <_dtoa_r+0x7ba>
 800dfa0:	9b00      	ldr	r3, [sp, #0]
 800dfa2:	e7d2      	b.n	800df4a <_dtoa_r+0x7ba>
 800dfa4:	2300      	movs	r3, #0
 800dfa6:	9307      	str	r3, [sp, #28]
 800dfa8:	693b      	ldr	r3, [r7, #16]
 800dfaa:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800dfae:	6918      	ldr	r0, [r3, #16]
 800dfb0:	f000 fc1a 	bl	800e7e8 <__hi0bits>
 800dfb4:	f1c0 0020 	rsb	r0, r0, #32
 800dfb8:	4440      	add	r0, r8
 800dfba:	f010 001f 	ands.w	r0, r0, #31
 800dfbe:	d047      	beq.n	800e050 <_dtoa_r+0x8c0>
 800dfc0:	f1c0 0320 	rsb	r3, r0, #32
 800dfc4:	2b04      	cmp	r3, #4
 800dfc6:	dd3b      	ble.n	800e040 <_dtoa_r+0x8b0>
 800dfc8:	9b05      	ldr	r3, [sp, #20]
 800dfca:	f1c0 001c 	rsb	r0, r0, #28
 800dfce:	4403      	add	r3, r0
 800dfd0:	9305      	str	r3, [sp, #20]
 800dfd2:	4405      	add	r5, r0
 800dfd4:	4480      	add	r8, r0
 800dfd6:	9b05      	ldr	r3, [sp, #20]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	dd05      	ble.n	800dfe8 <_dtoa_r+0x858>
 800dfdc:	461a      	mov	r2, r3
 800dfde:	9904      	ldr	r1, [sp, #16]
 800dfe0:	4620      	mov	r0, r4
 800dfe2:	f000 fd3d 	bl	800ea60 <__lshift>
 800dfe6:	9004      	str	r0, [sp, #16]
 800dfe8:	f1b8 0f00 	cmp.w	r8, #0
 800dfec:	dd05      	ble.n	800dffa <_dtoa_r+0x86a>
 800dfee:	4639      	mov	r1, r7
 800dff0:	4642      	mov	r2, r8
 800dff2:	4620      	mov	r0, r4
 800dff4:	f000 fd34 	bl	800ea60 <__lshift>
 800dff8:	4607      	mov	r7, r0
 800dffa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dffc:	b353      	cbz	r3, 800e054 <_dtoa_r+0x8c4>
 800dffe:	4639      	mov	r1, r7
 800e000:	9804      	ldr	r0, [sp, #16]
 800e002:	f000 fd81 	bl	800eb08 <__mcmp>
 800e006:	2800      	cmp	r0, #0
 800e008:	da24      	bge.n	800e054 <_dtoa_r+0x8c4>
 800e00a:	2300      	movs	r3, #0
 800e00c:	220a      	movs	r2, #10
 800e00e:	9904      	ldr	r1, [sp, #16]
 800e010:	4620      	mov	r0, r4
 800e012:	f000 fbae 	bl	800e772 <__multadd>
 800e016:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e018:	9004      	str	r0, [sp, #16]
 800e01a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800e01e:	2b00      	cmp	r3, #0
 800e020:	f000 814d 	beq.w	800e2be <_dtoa_r+0xb2e>
 800e024:	2300      	movs	r3, #0
 800e026:	4631      	mov	r1, r6
 800e028:	220a      	movs	r2, #10
 800e02a:	4620      	mov	r0, r4
 800e02c:	f000 fba1 	bl	800e772 <__multadd>
 800e030:	9b02      	ldr	r3, [sp, #8]
 800e032:	2b00      	cmp	r3, #0
 800e034:	4606      	mov	r6, r0
 800e036:	dc4f      	bgt.n	800e0d8 <_dtoa_r+0x948>
 800e038:	9b06      	ldr	r3, [sp, #24]
 800e03a:	2b02      	cmp	r3, #2
 800e03c:	dd4c      	ble.n	800e0d8 <_dtoa_r+0x948>
 800e03e:	e011      	b.n	800e064 <_dtoa_r+0x8d4>
 800e040:	d0c9      	beq.n	800dfd6 <_dtoa_r+0x846>
 800e042:	9a05      	ldr	r2, [sp, #20]
 800e044:	331c      	adds	r3, #28
 800e046:	441a      	add	r2, r3
 800e048:	9205      	str	r2, [sp, #20]
 800e04a:	441d      	add	r5, r3
 800e04c:	4498      	add	r8, r3
 800e04e:	e7c2      	b.n	800dfd6 <_dtoa_r+0x846>
 800e050:	4603      	mov	r3, r0
 800e052:	e7f6      	b.n	800e042 <_dtoa_r+0x8b2>
 800e054:	f1b9 0f00 	cmp.w	r9, #0
 800e058:	dc38      	bgt.n	800e0cc <_dtoa_r+0x93c>
 800e05a:	9b06      	ldr	r3, [sp, #24]
 800e05c:	2b02      	cmp	r3, #2
 800e05e:	dd35      	ble.n	800e0cc <_dtoa_r+0x93c>
 800e060:	f8cd 9008 	str.w	r9, [sp, #8]
 800e064:	9b02      	ldr	r3, [sp, #8]
 800e066:	b963      	cbnz	r3, 800e082 <_dtoa_r+0x8f2>
 800e068:	4639      	mov	r1, r7
 800e06a:	2205      	movs	r2, #5
 800e06c:	4620      	mov	r0, r4
 800e06e:	f000 fb80 	bl	800e772 <__multadd>
 800e072:	4601      	mov	r1, r0
 800e074:	4607      	mov	r7, r0
 800e076:	9804      	ldr	r0, [sp, #16]
 800e078:	f000 fd46 	bl	800eb08 <__mcmp>
 800e07c:	2800      	cmp	r0, #0
 800e07e:	f73f adcc 	bgt.w	800dc1a <_dtoa_r+0x48a>
 800e082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e084:	465d      	mov	r5, fp
 800e086:	ea6f 0a03 	mvn.w	sl, r3
 800e08a:	f04f 0900 	mov.w	r9, #0
 800e08e:	4639      	mov	r1, r7
 800e090:	4620      	mov	r0, r4
 800e092:	f000 fb57 	bl	800e744 <_Bfree>
 800e096:	2e00      	cmp	r6, #0
 800e098:	f43f aeb7 	beq.w	800de0a <_dtoa_r+0x67a>
 800e09c:	f1b9 0f00 	cmp.w	r9, #0
 800e0a0:	d005      	beq.n	800e0ae <_dtoa_r+0x91e>
 800e0a2:	45b1      	cmp	r9, r6
 800e0a4:	d003      	beq.n	800e0ae <_dtoa_r+0x91e>
 800e0a6:	4649      	mov	r1, r9
 800e0a8:	4620      	mov	r0, r4
 800e0aa:	f000 fb4b 	bl	800e744 <_Bfree>
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	4620      	mov	r0, r4
 800e0b2:	f000 fb47 	bl	800e744 <_Bfree>
 800e0b6:	e6a8      	b.n	800de0a <_dtoa_r+0x67a>
 800e0b8:	2700      	movs	r7, #0
 800e0ba:	463e      	mov	r6, r7
 800e0bc:	e7e1      	b.n	800e082 <_dtoa_r+0x8f2>
 800e0be:	f8dd a020 	ldr.w	sl, [sp, #32]
 800e0c2:	463e      	mov	r6, r7
 800e0c4:	e5a9      	b.n	800dc1a <_dtoa_r+0x48a>
 800e0c6:	bf00      	nop
 800e0c8:	40240000 	.word	0x40240000
 800e0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e0ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	f000 80fa 	beq.w	800e2cc <_dtoa_r+0xb3c>
 800e0d8:	2d00      	cmp	r5, #0
 800e0da:	dd05      	ble.n	800e0e8 <_dtoa_r+0x958>
 800e0dc:	4631      	mov	r1, r6
 800e0de:	462a      	mov	r2, r5
 800e0e0:	4620      	mov	r0, r4
 800e0e2:	f000 fcbd 	bl	800ea60 <__lshift>
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	9b07      	ldr	r3, [sp, #28]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d04c      	beq.n	800e188 <_dtoa_r+0x9f8>
 800e0ee:	6871      	ldr	r1, [r6, #4]
 800e0f0:	4620      	mov	r0, r4
 800e0f2:	f000 faf3 	bl	800e6dc <_Balloc>
 800e0f6:	6932      	ldr	r2, [r6, #16]
 800e0f8:	3202      	adds	r2, #2
 800e0fa:	4605      	mov	r5, r0
 800e0fc:	0092      	lsls	r2, r2, #2
 800e0fe:	f106 010c 	add.w	r1, r6, #12
 800e102:	300c      	adds	r0, #12
 800e104:	f7fe fa9e 	bl	800c644 <memcpy>
 800e108:	2201      	movs	r2, #1
 800e10a:	4629      	mov	r1, r5
 800e10c:	4620      	mov	r0, r4
 800e10e:	f000 fca7 	bl	800ea60 <__lshift>
 800e112:	9b00      	ldr	r3, [sp, #0]
 800e114:	f8cd b014 	str.w	fp, [sp, #20]
 800e118:	f003 0301 	and.w	r3, r3, #1
 800e11c:	46b1      	mov	r9, r6
 800e11e:	9307      	str	r3, [sp, #28]
 800e120:	4606      	mov	r6, r0
 800e122:	4639      	mov	r1, r7
 800e124:	9804      	ldr	r0, [sp, #16]
 800e126:	f7ff faa7 	bl	800d678 <quorem>
 800e12a:	4649      	mov	r1, r9
 800e12c:	4605      	mov	r5, r0
 800e12e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e132:	9804      	ldr	r0, [sp, #16]
 800e134:	f000 fce8 	bl	800eb08 <__mcmp>
 800e138:	4632      	mov	r2, r6
 800e13a:	9000      	str	r0, [sp, #0]
 800e13c:	4639      	mov	r1, r7
 800e13e:	4620      	mov	r0, r4
 800e140:	f000 fcfc 	bl	800eb3c <__mdiff>
 800e144:	68c3      	ldr	r3, [r0, #12]
 800e146:	4602      	mov	r2, r0
 800e148:	bb03      	cbnz	r3, 800e18c <_dtoa_r+0x9fc>
 800e14a:	4601      	mov	r1, r0
 800e14c:	9008      	str	r0, [sp, #32]
 800e14e:	9804      	ldr	r0, [sp, #16]
 800e150:	f000 fcda 	bl	800eb08 <__mcmp>
 800e154:	9a08      	ldr	r2, [sp, #32]
 800e156:	4603      	mov	r3, r0
 800e158:	4611      	mov	r1, r2
 800e15a:	4620      	mov	r0, r4
 800e15c:	9308      	str	r3, [sp, #32]
 800e15e:	f000 faf1 	bl	800e744 <_Bfree>
 800e162:	9b08      	ldr	r3, [sp, #32]
 800e164:	b9a3      	cbnz	r3, 800e190 <_dtoa_r+0xa00>
 800e166:	9a06      	ldr	r2, [sp, #24]
 800e168:	b992      	cbnz	r2, 800e190 <_dtoa_r+0xa00>
 800e16a:	9a07      	ldr	r2, [sp, #28]
 800e16c:	b982      	cbnz	r2, 800e190 <_dtoa_r+0xa00>
 800e16e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e172:	d029      	beq.n	800e1c8 <_dtoa_r+0xa38>
 800e174:	9b00      	ldr	r3, [sp, #0]
 800e176:	2b00      	cmp	r3, #0
 800e178:	dd01      	ble.n	800e17e <_dtoa_r+0x9ee>
 800e17a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800e17e:	9b05      	ldr	r3, [sp, #20]
 800e180:	1c5d      	adds	r5, r3, #1
 800e182:	f883 8000 	strb.w	r8, [r3]
 800e186:	e782      	b.n	800e08e <_dtoa_r+0x8fe>
 800e188:	4630      	mov	r0, r6
 800e18a:	e7c2      	b.n	800e112 <_dtoa_r+0x982>
 800e18c:	2301      	movs	r3, #1
 800e18e:	e7e3      	b.n	800e158 <_dtoa_r+0x9c8>
 800e190:	9a00      	ldr	r2, [sp, #0]
 800e192:	2a00      	cmp	r2, #0
 800e194:	db04      	blt.n	800e1a0 <_dtoa_r+0xa10>
 800e196:	d125      	bne.n	800e1e4 <_dtoa_r+0xa54>
 800e198:	9a06      	ldr	r2, [sp, #24]
 800e19a:	bb1a      	cbnz	r2, 800e1e4 <_dtoa_r+0xa54>
 800e19c:	9a07      	ldr	r2, [sp, #28]
 800e19e:	bb0a      	cbnz	r2, 800e1e4 <_dtoa_r+0xa54>
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	ddec      	ble.n	800e17e <_dtoa_r+0x9ee>
 800e1a4:	2201      	movs	r2, #1
 800e1a6:	9904      	ldr	r1, [sp, #16]
 800e1a8:	4620      	mov	r0, r4
 800e1aa:	f000 fc59 	bl	800ea60 <__lshift>
 800e1ae:	4639      	mov	r1, r7
 800e1b0:	9004      	str	r0, [sp, #16]
 800e1b2:	f000 fca9 	bl	800eb08 <__mcmp>
 800e1b6:	2800      	cmp	r0, #0
 800e1b8:	dc03      	bgt.n	800e1c2 <_dtoa_r+0xa32>
 800e1ba:	d1e0      	bne.n	800e17e <_dtoa_r+0x9ee>
 800e1bc:	f018 0f01 	tst.w	r8, #1
 800e1c0:	d0dd      	beq.n	800e17e <_dtoa_r+0x9ee>
 800e1c2:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e1c6:	d1d8      	bne.n	800e17a <_dtoa_r+0x9ea>
 800e1c8:	9b05      	ldr	r3, [sp, #20]
 800e1ca:	9a05      	ldr	r2, [sp, #20]
 800e1cc:	1c5d      	adds	r5, r3, #1
 800e1ce:	2339      	movs	r3, #57	; 0x39
 800e1d0:	7013      	strb	r3, [r2, #0]
 800e1d2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e1d6:	2b39      	cmp	r3, #57	; 0x39
 800e1d8:	f105 32ff 	add.w	r2, r5, #4294967295
 800e1dc:	d04f      	beq.n	800e27e <_dtoa_r+0xaee>
 800e1de:	3301      	adds	r3, #1
 800e1e0:	7013      	strb	r3, [r2, #0]
 800e1e2:	e754      	b.n	800e08e <_dtoa_r+0x8fe>
 800e1e4:	9a05      	ldr	r2, [sp, #20]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	f102 0501 	add.w	r5, r2, #1
 800e1ec:	dd06      	ble.n	800e1fc <_dtoa_r+0xa6c>
 800e1ee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800e1f2:	d0e9      	beq.n	800e1c8 <_dtoa_r+0xa38>
 800e1f4:	f108 0801 	add.w	r8, r8, #1
 800e1f8:	9b05      	ldr	r3, [sp, #20]
 800e1fa:	e7c2      	b.n	800e182 <_dtoa_r+0x9f2>
 800e1fc:	9a02      	ldr	r2, [sp, #8]
 800e1fe:	f805 8c01 	strb.w	r8, [r5, #-1]
 800e202:	eba5 030b 	sub.w	r3, r5, fp
 800e206:	4293      	cmp	r3, r2
 800e208:	d021      	beq.n	800e24e <_dtoa_r+0xabe>
 800e20a:	2300      	movs	r3, #0
 800e20c:	220a      	movs	r2, #10
 800e20e:	9904      	ldr	r1, [sp, #16]
 800e210:	4620      	mov	r0, r4
 800e212:	f000 faae 	bl	800e772 <__multadd>
 800e216:	45b1      	cmp	r9, r6
 800e218:	9004      	str	r0, [sp, #16]
 800e21a:	f04f 0300 	mov.w	r3, #0
 800e21e:	f04f 020a 	mov.w	r2, #10
 800e222:	4649      	mov	r1, r9
 800e224:	4620      	mov	r0, r4
 800e226:	d105      	bne.n	800e234 <_dtoa_r+0xaa4>
 800e228:	f000 faa3 	bl	800e772 <__multadd>
 800e22c:	4681      	mov	r9, r0
 800e22e:	4606      	mov	r6, r0
 800e230:	9505      	str	r5, [sp, #20]
 800e232:	e776      	b.n	800e122 <_dtoa_r+0x992>
 800e234:	f000 fa9d 	bl	800e772 <__multadd>
 800e238:	4631      	mov	r1, r6
 800e23a:	4681      	mov	r9, r0
 800e23c:	2300      	movs	r3, #0
 800e23e:	220a      	movs	r2, #10
 800e240:	4620      	mov	r0, r4
 800e242:	f000 fa96 	bl	800e772 <__multadd>
 800e246:	4606      	mov	r6, r0
 800e248:	e7f2      	b.n	800e230 <_dtoa_r+0xaa0>
 800e24a:	f04f 0900 	mov.w	r9, #0
 800e24e:	2201      	movs	r2, #1
 800e250:	9904      	ldr	r1, [sp, #16]
 800e252:	4620      	mov	r0, r4
 800e254:	f000 fc04 	bl	800ea60 <__lshift>
 800e258:	4639      	mov	r1, r7
 800e25a:	9004      	str	r0, [sp, #16]
 800e25c:	f000 fc54 	bl	800eb08 <__mcmp>
 800e260:	2800      	cmp	r0, #0
 800e262:	dcb6      	bgt.n	800e1d2 <_dtoa_r+0xa42>
 800e264:	d102      	bne.n	800e26c <_dtoa_r+0xadc>
 800e266:	f018 0f01 	tst.w	r8, #1
 800e26a:	d1b2      	bne.n	800e1d2 <_dtoa_r+0xa42>
 800e26c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e270:	2b30      	cmp	r3, #48	; 0x30
 800e272:	f105 32ff 	add.w	r2, r5, #4294967295
 800e276:	f47f af0a 	bne.w	800e08e <_dtoa_r+0x8fe>
 800e27a:	4615      	mov	r5, r2
 800e27c:	e7f6      	b.n	800e26c <_dtoa_r+0xadc>
 800e27e:	4593      	cmp	fp, r2
 800e280:	d105      	bne.n	800e28e <_dtoa_r+0xafe>
 800e282:	2331      	movs	r3, #49	; 0x31
 800e284:	f10a 0a01 	add.w	sl, sl, #1
 800e288:	f88b 3000 	strb.w	r3, [fp]
 800e28c:	e6ff      	b.n	800e08e <_dtoa_r+0x8fe>
 800e28e:	4615      	mov	r5, r2
 800e290:	e79f      	b.n	800e1d2 <_dtoa_r+0xa42>
 800e292:	f8df b064 	ldr.w	fp, [pc, #100]	; 800e2f8 <_dtoa_r+0xb68>
 800e296:	e007      	b.n	800e2a8 <_dtoa_r+0xb18>
 800e298:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e29a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800e2fc <_dtoa_r+0xb6c>
 800e29e:	b11b      	cbz	r3, 800e2a8 <_dtoa_r+0xb18>
 800e2a0:	f10b 0308 	add.w	r3, fp, #8
 800e2a4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e2a6:	6013      	str	r3, [r2, #0]
 800e2a8:	4658      	mov	r0, fp
 800e2aa:	b017      	add	sp, #92	; 0x5c
 800e2ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2b0:	9b06      	ldr	r3, [sp, #24]
 800e2b2:	2b01      	cmp	r3, #1
 800e2b4:	f77f ae35 	ble.w	800df22 <_dtoa_r+0x792>
 800e2b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e2ba:	9307      	str	r3, [sp, #28]
 800e2bc:	e649      	b.n	800df52 <_dtoa_r+0x7c2>
 800e2be:	9b02      	ldr	r3, [sp, #8]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	dc03      	bgt.n	800e2cc <_dtoa_r+0xb3c>
 800e2c4:	9b06      	ldr	r3, [sp, #24]
 800e2c6:	2b02      	cmp	r3, #2
 800e2c8:	f73f aecc 	bgt.w	800e064 <_dtoa_r+0x8d4>
 800e2cc:	465d      	mov	r5, fp
 800e2ce:	4639      	mov	r1, r7
 800e2d0:	9804      	ldr	r0, [sp, #16]
 800e2d2:	f7ff f9d1 	bl	800d678 <quorem>
 800e2d6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800e2da:	f805 8b01 	strb.w	r8, [r5], #1
 800e2de:	9a02      	ldr	r2, [sp, #8]
 800e2e0:	eba5 030b 	sub.w	r3, r5, fp
 800e2e4:	429a      	cmp	r2, r3
 800e2e6:	ddb0      	ble.n	800e24a <_dtoa_r+0xaba>
 800e2e8:	2300      	movs	r3, #0
 800e2ea:	220a      	movs	r2, #10
 800e2ec:	9904      	ldr	r1, [sp, #16]
 800e2ee:	4620      	mov	r0, r4
 800e2f0:	f000 fa3f 	bl	800e772 <__multadd>
 800e2f4:	9004      	str	r0, [sp, #16]
 800e2f6:	e7ea      	b.n	800e2ce <_dtoa_r+0xb3e>
 800e2f8:	08012941 	.word	0x08012941
 800e2fc:	08012965 	.word	0x08012965

0800e300 <__sflush_r>:
 800e300:	898a      	ldrh	r2, [r1, #12]
 800e302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e306:	4605      	mov	r5, r0
 800e308:	0710      	lsls	r0, r2, #28
 800e30a:	460c      	mov	r4, r1
 800e30c:	d458      	bmi.n	800e3c0 <__sflush_r+0xc0>
 800e30e:	684b      	ldr	r3, [r1, #4]
 800e310:	2b00      	cmp	r3, #0
 800e312:	dc05      	bgt.n	800e320 <__sflush_r+0x20>
 800e314:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e316:	2b00      	cmp	r3, #0
 800e318:	dc02      	bgt.n	800e320 <__sflush_r+0x20>
 800e31a:	2000      	movs	r0, #0
 800e31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e320:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e322:	2e00      	cmp	r6, #0
 800e324:	d0f9      	beq.n	800e31a <__sflush_r+0x1a>
 800e326:	2300      	movs	r3, #0
 800e328:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e32c:	682f      	ldr	r7, [r5, #0]
 800e32e:	6a21      	ldr	r1, [r4, #32]
 800e330:	602b      	str	r3, [r5, #0]
 800e332:	d032      	beq.n	800e39a <__sflush_r+0x9a>
 800e334:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e336:	89a3      	ldrh	r3, [r4, #12]
 800e338:	075a      	lsls	r2, r3, #29
 800e33a:	d505      	bpl.n	800e348 <__sflush_r+0x48>
 800e33c:	6863      	ldr	r3, [r4, #4]
 800e33e:	1ac0      	subs	r0, r0, r3
 800e340:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e342:	b10b      	cbz	r3, 800e348 <__sflush_r+0x48>
 800e344:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e346:	1ac0      	subs	r0, r0, r3
 800e348:	2300      	movs	r3, #0
 800e34a:	4602      	mov	r2, r0
 800e34c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e34e:	6a21      	ldr	r1, [r4, #32]
 800e350:	4628      	mov	r0, r5
 800e352:	47b0      	blx	r6
 800e354:	1c43      	adds	r3, r0, #1
 800e356:	89a3      	ldrh	r3, [r4, #12]
 800e358:	d106      	bne.n	800e368 <__sflush_r+0x68>
 800e35a:	6829      	ldr	r1, [r5, #0]
 800e35c:	291d      	cmp	r1, #29
 800e35e:	d848      	bhi.n	800e3f2 <__sflush_r+0xf2>
 800e360:	4a29      	ldr	r2, [pc, #164]	; (800e408 <__sflush_r+0x108>)
 800e362:	40ca      	lsrs	r2, r1
 800e364:	07d6      	lsls	r6, r2, #31
 800e366:	d544      	bpl.n	800e3f2 <__sflush_r+0xf2>
 800e368:	2200      	movs	r2, #0
 800e36a:	6062      	str	r2, [r4, #4]
 800e36c:	04d9      	lsls	r1, r3, #19
 800e36e:	6922      	ldr	r2, [r4, #16]
 800e370:	6022      	str	r2, [r4, #0]
 800e372:	d504      	bpl.n	800e37e <__sflush_r+0x7e>
 800e374:	1c42      	adds	r2, r0, #1
 800e376:	d101      	bne.n	800e37c <__sflush_r+0x7c>
 800e378:	682b      	ldr	r3, [r5, #0]
 800e37a:	b903      	cbnz	r3, 800e37e <__sflush_r+0x7e>
 800e37c:	6560      	str	r0, [r4, #84]	; 0x54
 800e37e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e380:	602f      	str	r7, [r5, #0]
 800e382:	2900      	cmp	r1, #0
 800e384:	d0c9      	beq.n	800e31a <__sflush_r+0x1a>
 800e386:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e38a:	4299      	cmp	r1, r3
 800e38c:	d002      	beq.n	800e394 <__sflush_r+0x94>
 800e38e:	4628      	mov	r0, r5
 800e390:	f7fe f984 	bl	800c69c <_free_r>
 800e394:	2000      	movs	r0, #0
 800e396:	6360      	str	r0, [r4, #52]	; 0x34
 800e398:	e7c0      	b.n	800e31c <__sflush_r+0x1c>
 800e39a:	2301      	movs	r3, #1
 800e39c:	4628      	mov	r0, r5
 800e39e:	47b0      	blx	r6
 800e3a0:	1c41      	adds	r1, r0, #1
 800e3a2:	d1c8      	bne.n	800e336 <__sflush_r+0x36>
 800e3a4:	682b      	ldr	r3, [r5, #0]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d0c5      	beq.n	800e336 <__sflush_r+0x36>
 800e3aa:	2b1d      	cmp	r3, #29
 800e3ac:	d001      	beq.n	800e3b2 <__sflush_r+0xb2>
 800e3ae:	2b16      	cmp	r3, #22
 800e3b0:	d101      	bne.n	800e3b6 <__sflush_r+0xb6>
 800e3b2:	602f      	str	r7, [r5, #0]
 800e3b4:	e7b1      	b.n	800e31a <__sflush_r+0x1a>
 800e3b6:	89a3      	ldrh	r3, [r4, #12]
 800e3b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3bc:	81a3      	strh	r3, [r4, #12]
 800e3be:	e7ad      	b.n	800e31c <__sflush_r+0x1c>
 800e3c0:	690f      	ldr	r7, [r1, #16]
 800e3c2:	2f00      	cmp	r7, #0
 800e3c4:	d0a9      	beq.n	800e31a <__sflush_r+0x1a>
 800e3c6:	0793      	lsls	r3, r2, #30
 800e3c8:	680e      	ldr	r6, [r1, #0]
 800e3ca:	bf08      	it	eq
 800e3cc:	694b      	ldreq	r3, [r1, #20]
 800e3ce:	600f      	str	r7, [r1, #0]
 800e3d0:	bf18      	it	ne
 800e3d2:	2300      	movne	r3, #0
 800e3d4:	eba6 0807 	sub.w	r8, r6, r7
 800e3d8:	608b      	str	r3, [r1, #8]
 800e3da:	f1b8 0f00 	cmp.w	r8, #0
 800e3de:	dd9c      	ble.n	800e31a <__sflush_r+0x1a>
 800e3e0:	4643      	mov	r3, r8
 800e3e2:	463a      	mov	r2, r7
 800e3e4:	6a21      	ldr	r1, [r4, #32]
 800e3e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e3e8:	4628      	mov	r0, r5
 800e3ea:	47b0      	blx	r6
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	dc06      	bgt.n	800e3fe <__sflush_r+0xfe>
 800e3f0:	89a3      	ldrh	r3, [r4, #12]
 800e3f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3f6:	81a3      	strh	r3, [r4, #12]
 800e3f8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3fc:	e78e      	b.n	800e31c <__sflush_r+0x1c>
 800e3fe:	4407      	add	r7, r0
 800e400:	eba8 0800 	sub.w	r8, r8, r0
 800e404:	e7e9      	b.n	800e3da <__sflush_r+0xda>
 800e406:	bf00      	nop
 800e408:	20400001 	.word	0x20400001

0800e40c <_fflush_r>:
 800e40c:	b538      	push	{r3, r4, r5, lr}
 800e40e:	690b      	ldr	r3, [r1, #16]
 800e410:	4605      	mov	r5, r0
 800e412:	460c      	mov	r4, r1
 800e414:	b1db      	cbz	r3, 800e44e <_fflush_r+0x42>
 800e416:	b118      	cbz	r0, 800e420 <_fflush_r+0x14>
 800e418:	6983      	ldr	r3, [r0, #24]
 800e41a:	b90b      	cbnz	r3, 800e420 <_fflush_r+0x14>
 800e41c:	f000 f860 	bl	800e4e0 <__sinit>
 800e420:	4b0c      	ldr	r3, [pc, #48]	; (800e454 <_fflush_r+0x48>)
 800e422:	429c      	cmp	r4, r3
 800e424:	d109      	bne.n	800e43a <_fflush_r+0x2e>
 800e426:	686c      	ldr	r4, [r5, #4]
 800e428:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e42c:	b17b      	cbz	r3, 800e44e <_fflush_r+0x42>
 800e42e:	4621      	mov	r1, r4
 800e430:	4628      	mov	r0, r5
 800e432:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e436:	f7ff bf63 	b.w	800e300 <__sflush_r>
 800e43a:	4b07      	ldr	r3, [pc, #28]	; (800e458 <_fflush_r+0x4c>)
 800e43c:	429c      	cmp	r4, r3
 800e43e:	d101      	bne.n	800e444 <_fflush_r+0x38>
 800e440:	68ac      	ldr	r4, [r5, #8]
 800e442:	e7f1      	b.n	800e428 <_fflush_r+0x1c>
 800e444:	4b05      	ldr	r3, [pc, #20]	; (800e45c <_fflush_r+0x50>)
 800e446:	429c      	cmp	r4, r3
 800e448:	bf08      	it	eq
 800e44a:	68ec      	ldreq	r4, [r5, #12]
 800e44c:	e7ec      	b.n	800e428 <_fflush_r+0x1c>
 800e44e:	2000      	movs	r0, #0
 800e450:	bd38      	pop	{r3, r4, r5, pc}
 800e452:	bf00      	nop
 800e454:	08012994 	.word	0x08012994
 800e458:	080129b4 	.word	0x080129b4
 800e45c:	08012974 	.word	0x08012974

0800e460 <std>:
 800e460:	2300      	movs	r3, #0
 800e462:	b510      	push	{r4, lr}
 800e464:	4604      	mov	r4, r0
 800e466:	e9c0 3300 	strd	r3, r3, [r0]
 800e46a:	6083      	str	r3, [r0, #8]
 800e46c:	8181      	strh	r1, [r0, #12]
 800e46e:	6643      	str	r3, [r0, #100]	; 0x64
 800e470:	81c2      	strh	r2, [r0, #14]
 800e472:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e476:	6183      	str	r3, [r0, #24]
 800e478:	4619      	mov	r1, r3
 800e47a:	2208      	movs	r2, #8
 800e47c:	305c      	adds	r0, #92	; 0x5c
 800e47e:	f7fe f905 	bl	800c68c <memset>
 800e482:	4b05      	ldr	r3, [pc, #20]	; (800e498 <std+0x38>)
 800e484:	6263      	str	r3, [r4, #36]	; 0x24
 800e486:	4b05      	ldr	r3, [pc, #20]	; (800e49c <std+0x3c>)
 800e488:	62a3      	str	r3, [r4, #40]	; 0x28
 800e48a:	4b05      	ldr	r3, [pc, #20]	; (800e4a0 <std+0x40>)
 800e48c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e48e:	4b05      	ldr	r3, [pc, #20]	; (800e4a4 <std+0x44>)
 800e490:	6224      	str	r4, [r4, #32]
 800e492:	6323      	str	r3, [r4, #48]	; 0x30
 800e494:	bd10      	pop	{r4, pc}
 800e496:	bf00      	nop
 800e498:	0800efa1 	.word	0x0800efa1
 800e49c:	0800efc3 	.word	0x0800efc3
 800e4a0:	0800effb 	.word	0x0800effb
 800e4a4:	0800f01f 	.word	0x0800f01f

0800e4a8 <_cleanup_r>:
 800e4a8:	4901      	ldr	r1, [pc, #4]	; (800e4b0 <_cleanup_r+0x8>)
 800e4aa:	f000 b885 	b.w	800e5b8 <_fwalk_reent>
 800e4ae:	bf00      	nop
 800e4b0:	0800e40d 	.word	0x0800e40d

0800e4b4 <__sfmoreglue>:
 800e4b4:	b570      	push	{r4, r5, r6, lr}
 800e4b6:	1e4a      	subs	r2, r1, #1
 800e4b8:	2568      	movs	r5, #104	; 0x68
 800e4ba:	4355      	muls	r5, r2
 800e4bc:	460e      	mov	r6, r1
 800e4be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e4c2:	f7fe f939 	bl	800c738 <_malloc_r>
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	b140      	cbz	r0, 800e4dc <__sfmoreglue+0x28>
 800e4ca:	2100      	movs	r1, #0
 800e4cc:	e9c0 1600 	strd	r1, r6, [r0]
 800e4d0:	300c      	adds	r0, #12
 800e4d2:	60a0      	str	r0, [r4, #8]
 800e4d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e4d8:	f7fe f8d8 	bl	800c68c <memset>
 800e4dc:	4620      	mov	r0, r4
 800e4de:	bd70      	pop	{r4, r5, r6, pc}

0800e4e0 <__sinit>:
 800e4e0:	6983      	ldr	r3, [r0, #24]
 800e4e2:	b510      	push	{r4, lr}
 800e4e4:	4604      	mov	r4, r0
 800e4e6:	bb33      	cbnz	r3, 800e536 <__sinit+0x56>
 800e4e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800e4ec:	6503      	str	r3, [r0, #80]	; 0x50
 800e4ee:	4b12      	ldr	r3, [pc, #72]	; (800e538 <__sinit+0x58>)
 800e4f0:	4a12      	ldr	r2, [pc, #72]	; (800e53c <__sinit+0x5c>)
 800e4f2:	681b      	ldr	r3, [r3, #0]
 800e4f4:	6282      	str	r2, [r0, #40]	; 0x28
 800e4f6:	4298      	cmp	r0, r3
 800e4f8:	bf04      	itt	eq
 800e4fa:	2301      	moveq	r3, #1
 800e4fc:	6183      	streq	r3, [r0, #24]
 800e4fe:	f000 f81f 	bl	800e540 <__sfp>
 800e502:	6060      	str	r0, [r4, #4]
 800e504:	4620      	mov	r0, r4
 800e506:	f000 f81b 	bl	800e540 <__sfp>
 800e50a:	60a0      	str	r0, [r4, #8]
 800e50c:	4620      	mov	r0, r4
 800e50e:	f000 f817 	bl	800e540 <__sfp>
 800e512:	2200      	movs	r2, #0
 800e514:	60e0      	str	r0, [r4, #12]
 800e516:	2104      	movs	r1, #4
 800e518:	6860      	ldr	r0, [r4, #4]
 800e51a:	f7ff ffa1 	bl	800e460 <std>
 800e51e:	2201      	movs	r2, #1
 800e520:	2109      	movs	r1, #9
 800e522:	68a0      	ldr	r0, [r4, #8]
 800e524:	f7ff ff9c 	bl	800e460 <std>
 800e528:	2202      	movs	r2, #2
 800e52a:	2112      	movs	r1, #18
 800e52c:	68e0      	ldr	r0, [r4, #12]
 800e52e:	f7ff ff97 	bl	800e460 <std>
 800e532:	2301      	movs	r3, #1
 800e534:	61a3      	str	r3, [r4, #24]
 800e536:	bd10      	pop	{r4, pc}
 800e538:	0801291c 	.word	0x0801291c
 800e53c:	0800e4a9 	.word	0x0800e4a9

0800e540 <__sfp>:
 800e540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e542:	4b1b      	ldr	r3, [pc, #108]	; (800e5b0 <__sfp+0x70>)
 800e544:	681e      	ldr	r6, [r3, #0]
 800e546:	69b3      	ldr	r3, [r6, #24]
 800e548:	4607      	mov	r7, r0
 800e54a:	b913      	cbnz	r3, 800e552 <__sfp+0x12>
 800e54c:	4630      	mov	r0, r6
 800e54e:	f7ff ffc7 	bl	800e4e0 <__sinit>
 800e552:	3648      	adds	r6, #72	; 0x48
 800e554:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e558:	3b01      	subs	r3, #1
 800e55a:	d503      	bpl.n	800e564 <__sfp+0x24>
 800e55c:	6833      	ldr	r3, [r6, #0]
 800e55e:	b133      	cbz	r3, 800e56e <__sfp+0x2e>
 800e560:	6836      	ldr	r6, [r6, #0]
 800e562:	e7f7      	b.n	800e554 <__sfp+0x14>
 800e564:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e568:	b16d      	cbz	r5, 800e586 <__sfp+0x46>
 800e56a:	3468      	adds	r4, #104	; 0x68
 800e56c:	e7f4      	b.n	800e558 <__sfp+0x18>
 800e56e:	2104      	movs	r1, #4
 800e570:	4638      	mov	r0, r7
 800e572:	f7ff ff9f 	bl	800e4b4 <__sfmoreglue>
 800e576:	6030      	str	r0, [r6, #0]
 800e578:	2800      	cmp	r0, #0
 800e57a:	d1f1      	bne.n	800e560 <__sfp+0x20>
 800e57c:	230c      	movs	r3, #12
 800e57e:	603b      	str	r3, [r7, #0]
 800e580:	4604      	mov	r4, r0
 800e582:	4620      	mov	r0, r4
 800e584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e586:	4b0b      	ldr	r3, [pc, #44]	; (800e5b4 <__sfp+0x74>)
 800e588:	6665      	str	r5, [r4, #100]	; 0x64
 800e58a:	e9c4 5500 	strd	r5, r5, [r4]
 800e58e:	60a5      	str	r5, [r4, #8]
 800e590:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e594:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e598:	2208      	movs	r2, #8
 800e59a:	4629      	mov	r1, r5
 800e59c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e5a0:	f7fe f874 	bl	800c68c <memset>
 800e5a4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e5a8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e5ac:	e7e9      	b.n	800e582 <__sfp+0x42>
 800e5ae:	bf00      	nop
 800e5b0:	0801291c 	.word	0x0801291c
 800e5b4:	ffff0001 	.word	0xffff0001

0800e5b8 <_fwalk_reent>:
 800e5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e5bc:	4680      	mov	r8, r0
 800e5be:	4689      	mov	r9, r1
 800e5c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e5c4:	2600      	movs	r6, #0
 800e5c6:	b914      	cbnz	r4, 800e5ce <_fwalk_reent+0x16>
 800e5c8:	4630      	mov	r0, r6
 800e5ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5ce:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e5d2:	3f01      	subs	r7, #1
 800e5d4:	d501      	bpl.n	800e5da <_fwalk_reent+0x22>
 800e5d6:	6824      	ldr	r4, [r4, #0]
 800e5d8:	e7f5      	b.n	800e5c6 <_fwalk_reent+0xe>
 800e5da:	89ab      	ldrh	r3, [r5, #12]
 800e5dc:	2b01      	cmp	r3, #1
 800e5de:	d907      	bls.n	800e5f0 <_fwalk_reent+0x38>
 800e5e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5e4:	3301      	adds	r3, #1
 800e5e6:	d003      	beq.n	800e5f0 <_fwalk_reent+0x38>
 800e5e8:	4629      	mov	r1, r5
 800e5ea:	4640      	mov	r0, r8
 800e5ec:	47c8      	blx	r9
 800e5ee:	4306      	orrs	r6, r0
 800e5f0:	3568      	adds	r5, #104	; 0x68
 800e5f2:	e7ee      	b.n	800e5d2 <_fwalk_reent+0x1a>

0800e5f4 <_localeconv_r>:
 800e5f4:	4b04      	ldr	r3, [pc, #16]	; (800e608 <_localeconv_r+0x14>)
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	6a18      	ldr	r0, [r3, #32]
 800e5fa:	4b04      	ldr	r3, [pc, #16]	; (800e60c <_localeconv_r+0x18>)
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	bf08      	it	eq
 800e600:	4618      	moveq	r0, r3
 800e602:	30f0      	adds	r0, #240	; 0xf0
 800e604:	4770      	bx	lr
 800e606:	bf00      	nop
 800e608:	20000b64 	.word	0x20000b64
 800e60c:	20000bc8 	.word	0x20000bc8

0800e610 <__swhatbuf_r>:
 800e610:	b570      	push	{r4, r5, r6, lr}
 800e612:	460e      	mov	r6, r1
 800e614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e618:	2900      	cmp	r1, #0
 800e61a:	b096      	sub	sp, #88	; 0x58
 800e61c:	4614      	mov	r4, r2
 800e61e:	461d      	mov	r5, r3
 800e620:	da07      	bge.n	800e632 <__swhatbuf_r+0x22>
 800e622:	2300      	movs	r3, #0
 800e624:	602b      	str	r3, [r5, #0]
 800e626:	89b3      	ldrh	r3, [r6, #12]
 800e628:	061a      	lsls	r2, r3, #24
 800e62a:	d410      	bmi.n	800e64e <__swhatbuf_r+0x3e>
 800e62c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e630:	e00e      	b.n	800e650 <__swhatbuf_r+0x40>
 800e632:	466a      	mov	r2, sp
 800e634:	f000 fd1a 	bl	800f06c <_fstat_r>
 800e638:	2800      	cmp	r0, #0
 800e63a:	dbf2      	blt.n	800e622 <__swhatbuf_r+0x12>
 800e63c:	9a01      	ldr	r2, [sp, #4]
 800e63e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e642:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e646:	425a      	negs	r2, r3
 800e648:	415a      	adcs	r2, r3
 800e64a:	602a      	str	r2, [r5, #0]
 800e64c:	e7ee      	b.n	800e62c <__swhatbuf_r+0x1c>
 800e64e:	2340      	movs	r3, #64	; 0x40
 800e650:	2000      	movs	r0, #0
 800e652:	6023      	str	r3, [r4, #0]
 800e654:	b016      	add	sp, #88	; 0x58
 800e656:	bd70      	pop	{r4, r5, r6, pc}

0800e658 <__smakebuf_r>:
 800e658:	898b      	ldrh	r3, [r1, #12]
 800e65a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e65c:	079d      	lsls	r5, r3, #30
 800e65e:	4606      	mov	r6, r0
 800e660:	460c      	mov	r4, r1
 800e662:	d507      	bpl.n	800e674 <__smakebuf_r+0x1c>
 800e664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e668:	6023      	str	r3, [r4, #0]
 800e66a:	6123      	str	r3, [r4, #16]
 800e66c:	2301      	movs	r3, #1
 800e66e:	6163      	str	r3, [r4, #20]
 800e670:	b002      	add	sp, #8
 800e672:	bd70      	pop	{r4, r5, r6, pc}
 800e674:	ab01      	add	r3, sp, #4
 800e676:	466a      	mov	r2, sp
 800e678:	f7ff ffca 	bl	800e610 <__swhatbuf_r>
 800e67c:	9900      	ldr	r1, [sp, #0]
 800e67e:	4605      	mov	r5, r0
 800e680:	4630      	mov	r0, r6
 800e682:	f7fe f859 	bl	800c738 <_malloc_r>
 800e686:	b948      	cbnz	r0, 800e69c <__smakebuf_r+0x44>
 800e688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e68c:	059a      	lsls	r2, r3, #22
 800e68e:	d4ef      	bmi.n	800e670 <__smakebuf_r+0x18>
 800e690:	f023 0303 	bic.w	r3, r3, #3
 800e694:	f043 0302 	orr.w	r3, r3, #2
 800e698:	81a3      	strh	r3, [r4, #12]
 800e69a:	e7e3      	b.n	800e664 <__smakebuf_r+0xc>
 800e69c:	4b0d      	ldr	r3, [pc, #52]	; (800e6d4 <__smakebuf_r+0x7c>)
 800e69e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e6a0:	89a3      	ldrh	r3, [r4, #12]
 800e6a2:	6020      	str	r0, [r4, #0]
 800e6a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e6a8:	81a3      	strh	r3, [r4, #12]
 800e6aa:	9b00      	ldr	r3, [sp, #0]
 800e6ac:	6163      	str	r3, [r4, #20]
 800e6ae:	9b01      	ldr	r3, [sp, #4]
 800e6b0:	6120      	str	r0, [r4, #16]
 800e6b2:	b15b      	cbz	r3, 800e6cc <__smakebuf_r+0x74>
 800e6b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e6b8:	4630      	mov	r0, r6
 800e6ba:	f000 fce9 	bl	800f090 <_isatty_r>
 800e6be:	b128      	cbz	r0, 800e6cc <__smakebuf_r+0x74>
 800e6c0:	89a3      	ldrh	r3, [r4, #12]
 800e6c2:	f023 0303 	bic.w	r3, r3, #3
 800e6c6:	f043 0301 	orr.w	r3, r3, #1
 800e6ca:	81a3      	strh	r3, [r4, #12]
 800e6cc:	89a3      	ldrh	r3, [r4, #12]
 800e6ce:	431d      	orrs	r5, r3
 800e6d0:	81a5      	strh	r5, [r4, #12]
 800e6d2:	e7cd      	b.n	800e670 <__smakebuf_r+0x18>
 800e6d4:	0800e4a9 	.word	0x0800e4a9

0800e6d8 <__malloc_lock>:
 800e6d8:	4770      	bx	lr

0800e6da <__malloc_unlock>:
 800e6da:	4770      	bx	lr

0800e6dc <_Balloc>:
 800e6dc:	b570      	push	{r4, r5, r6, lr}
 800e6de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e6e0:	4604      	mov	r4, r0
 800e6e2:	460e      	mov	r6, r1
 800e6e4:	b93d      	cbnz	r5, 800e6f6 <_Balloc+0x1a>
 800e6e6:	2010      	movs	r0, #16
 800e6e8:	f7fd ff9c 	bl	800c624 <malloc>
 800e6ec:	6260      	str	r0, [r4, #36]	; 0x24
 800e6ee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e6f2:	6005      	str	r5, [r0, #0]
 800e6f4:	60c5      	str	r5, [r0, #12]
 800e6f6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e6f8:	68eb      	ldr	r3, [r5, #12]
 800e6fa:	b183      	cbz	r3, 800e71e <_Balloc+0x42>
 800e6fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e6fe:	68db      	ldr	r3, [r3, #12]
 800e700:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e704:	b9b8      	cbnz	r0, 800e736 <_Balloc+0x5a>
 800e706:	2101      	movs	r1, #1
 800e708:	fa01 f506 	lsl.w	r5, r1, r6
 800e70c:	1d6a      	adds	r2, r5, #5
 800e70e:	0092      	lsls	r2, r2, #2
 800e710:	4620      	mov	r0, r4
 800e712:	f000 fabf 	bl	800ec94 <_calloc_r>
 800e716:	b160      	cbz	r0, 800e732 <_Balloc+0x56>
 800e718:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e71c:	e00e      	b.n	800e73c <_Balloc+0x60>
 800e71e:	2221      	movs	r2, #33	; 0x21
 800e720:	2104      	movs	r1, #4
 800e722:	4620      	mov	r0, r4
 800e724:	f000 fab6 	bl	800ec94 <_calloc_r>
 800e728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e72a:	60e8      	str	r0, [r5, #12]
 800e72c:	68db      	ldr	r3, [r3, #12]
 800e72e:	2b00      	cmp	r3, #0
 800e730:	d1e4      	bne.n	800e6fc <_Balloc+0x20>
 800e732:	2000      	movs	r0, #0
 800e734:	bd70      	pop	{r4, r5, r6, pc}
 800e736:	6802      	ldr	r2, [r0, #0]
 800e738:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e73c:	2300      	movs	r3, #0
 800e73e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e742:	e7f7      	b.n	800e734 <_Balloc+0x58>

0800e744 <_Bfree>:
 800e744:	b570      	push	{r4, r5, r6, lr}
 800e746:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e748:	4606      	mov	r6, r0
 800e74a:	460d      	mov	r5, r1
 800e74c:	b93c      	cbnz	r4, 800e75e <_Bfree+0x1a>
 800e74e:	2010      	movs	r0, #16
 800e750:	f7fd ff68 	bl	800c624 <malloc>
 800e754:	6270      	str	r0, [r6, #36]	; 0x24
 800e756:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e75a:	6004      	str	r4, [r0, #0]
 800e75c:	60c4      	str	r4, [r0, #12]
 800e75e:	b13d      	cbz	r5, 800e770 <_Bfree+0x2c>
 800e760:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e762:	686a      	ldr	r2, [r5, #4]
 800e764:	68db      	ldr	r3, [r3, #12]
 800e766:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e76a:	6029      	str	r1, [r5, #0]
 800e76c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e770:	bd70      	pop	{r4, r5, r6, pc}

0800e772 <__multadd>:
 800e772:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e776:	690d      	ldr	r5, [r1, #16]
 800e778:	461f      	mov	r7, r3
 800e77a:	4606      	mov	r6, r0
 800e77c:	460c      	mov	r4, r1
 800e77e:	f101 0c14 	add.w	ip, r1, #20
 800e782:	2300      	movs	r3, #0
 800e784:	f8dc 0000 	ldr.w	r0, [ip]
 800e788:	b281      	uxth	r1, r0
 800e78a:	fb02 7101 	mla	r1, r2, r1, r7
 800e78e:	0c0f      	lsrs	r7, r1, #16
 800e790:	0c00      	lsrs	r0, r0, #16
 800e792:	fb02 7000 	mla	r0, r2, r0, r7
 800e796:	b289      	uxth	r1, r1
 800e798:	3301      	adds	r3, #1
 800e79a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e79e:	429d      	cmp	r5, r3
 800e7a0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e7a4:	f84c 1b04 	str.w	r1, [ip], #4
 800e7a8:	dcec      	bgt.n	800e784 <__multadd+0x12>
 800e7aa:	b1d7      	cbz	r7, 800e7e2 <__multadd+0x70>
 800e7ac:	68a3      	ldr	r3, [r4, #8]
 800e7ae:	42ab      	cmp	r3, r5
 800e7b0:	dc12      	bgt.n	800e7d8 <__multadd+0x66>
 800e7b2:	6861      	ldr	r1, [r4, #4]
 800e7b4:	4630      	mov	r0, r6
 800e7b6:	3101      	adds	r1, #1
 800e7b8:	f7ff ff90 	bl	800e6dc <_Balloc>
 800e7bc:	6922      	ldr	r2, [r4, #16]
 800e7be:	3202      	adds	r2, #2
 800e7c0:	f104 010c 	add.w	r1, r4, #12
 800e7c4:	4680      	mov	r8, r0
 800e7c6:	0092      	lsls	r2, r2, #2
 800e7c8:	300c      	adds	r0, #12
 800e7ca:	f7fd ff3b 	bl	800c644 <memcpy>
 800e7ce:	4621      	mov	r1, r4
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	f7ff ffb7 	bl	800e744 <_Bfree>
 800e7d6:	4644      	mov	r4, r8
 800e7d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e7dc:	3501      	adds	r5, #1
 800e7de:	615f      	str	r7, [r3, #20]
 800e7e0:	6125      	str	r5, [r4, #16]
 800e7e2:	4620      	mov	r0, r4
 800e7e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e7e8 <__hi0bits>:
 800e7e8:	0c02      	lsrs	r2, r0, #16
 800e7ea:	0412      	lsls	r2, r2, #16
 800e7ec:	4603      	mov	r3, r0
 800e7ee:	b9b2      	cbnz	r2, 800e81e <__hi0bits+0x36>
 800e7f0:	0403      	lsls	r3, r0, #16
 800e7f2:	2010      	movs	r0, #16
 800e7f4:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e7f8:	bf04      	itt	eq
 800e7fa:	021b      	lsleq	r3, r3, #8
 800e7fc:	3008      	addeq	r0, #8
 800e7fe:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e802:	bf04      	itt	eq
 800e804:	011b      	lsleq	r3, r3, #4
 800e806:	3004      	addeq	r0, #4
 800e808:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e80c:	bf04      	itt	eq
 800e80e:	009b      	lsleq	r3, r3, #2
 800e810:	3002      	addeq	r0, #2
 800e812:	2b00      	cmp	r3, #0
 800e814:	db06      	blt.n	800e824 <__hi0bits+0x3c>
 800e816:	005b      	lsls	r3, r3, #1
 800e818:	d503      	bpl.n	800e822 <__hi0bits+0x3a>
 800e81a:	3001      	adds	r0, #1
 800e81c:	4770      	bx	lr
 800e81e:	2000      	movs	r0, #0
 800e820:	e7e8      	b.n	800e7f4 <__hi0bits+0xc>
 800e822:	2020      	movs	r0, #32
 800e824:	4770      	bx	lr

0800e826 <__lo0bits>:
 800e826:	6803      	ldr	r3, [r0, #0]
 800e828:	f013 0207 	ands.w	r2, r3, #7
 800e82c:	4601      	mov	r1, r0
 800e82e:	d00b      	beq.n	800e848 <__lo0bits+0x22>
 800e830:	07da      	lsls	r2, r3, #31
 800e832:	d423      	bmi.n	800e87c <__lo0bits+0x56>
 800e834:	0798      	lsls	r0, r3, #30
 800e836:	bf49      	itett	mi
 800e838:	085b      	lsrmi	r3, r3, #1
 800e83a:	089b      	lsrpl	r3, r3, #2
 800e83c:	2001      	movmi	r0, #1
 800e83e:	600b      	strmi	r3, [r1, #0]
 800e840:	bf5c      	itt	pl
 800e842:	600b      	strpl	r3, [r1, #0]
 800e844:	2002      	movpl	r0, #2
 800e846:	4770      	bx	lr
 800e848:	b298      	uxth	r0, r3
 800e84a:	b9a8      	cbnz	r0, 800e878 <__lo0bits+0x52>
 800e84c:	0c1b      	lsrs	r3, r3, #16
 800e84e:	2010      	movs	r0, #16
 800e850:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e854:	bf04      	itt	eq
 800e856:	0a1b      	lsreq	r3, r3, #8
 800e858:	3008      	addeq	r0, #8
 800e85a:	071a      	lsls	r2, r3, #28
 800e85c:	bf04      	itt	eq
 800e85e:	091b      	lsreq	r3, r3, #4
 800e860:	3004      	addeq	r0, #4
 800e862:	079a      	lsls	r2, r3, #30
 800e864:	bf04      	itt	eq
 800e866:	089b      	lsreq	r3, r3, #2
 800e868:	3002      	addeq	r0, #2
 800e86a:	07da      	lsls	r2, r3, #31
 800e86c:	d402      	bmi.n	800e874 <__lo0bits+0x4e>
 800e86e:	085b      	lsrs	r3, r3, #1
 800e870:	d006      	beq.n	800e880 <__lo0bits+0x5a>
 800e872:	3001      	adds	r0, #1
 800e874:	600b      	str	r3, [r1, #0]
 800e876:	4770      	bx	lr
 800e878:	4610      	mov	r0, r2
 800e87a:	e7e9      	b.n	800e850 <__lo0bits+0x2a>
 800e87c:	2000      	movs	r0, #0
 800e87e:	4770      	bx	lr
 800e880:	2020      	movs	r0, #32
 800e882:	4770      	bx	lr

0800e884 <__i2b>:
 800e884:	b510      	push	{r4, lr}
 800e886:	460c      	mov	r4, r1
 800e888:	2101      	movs	r1, #1
 800e88a:	f7ff ff27 	bl	800e6dc <_Balloc>
 800e88e:	2201      	movs	r2, #1
 800e890:	6144      	str	r4, [r0, #20]
 800e892:	6102      	str	r2, [r0, #16]
 800e894:	bd10      	pop	{r4, pc}

0800e896 <__multiply>:
 800e896:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e89a:	4614      	mov	r4, r2
 800e89c:	690a      	ldr	r2, [r1, #16]
 800e89e:	6923      	ldr	r3, [r4, #16]
 800e8a0:	429a      	cmp	r2, r3
 800e8a2:	bfb8      	it	lt
 800e8a4:	460b      	movlt	r3, r1
 800e8a6:	4688      	mov	r8, r1
 800e8a8:	bfbc      	itt	lt
 800e8aa:	46a0      	movlt	r8, r4
 800e8ac:	461c      	movlt	r4, r3
 800e8ae:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e8b2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e8b6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e8ba:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e8be:	eb07 0609 	add.w	r6, r7, r9
 800e8c2:	42b3      	cmp	r3, r6
 800e8c4:	bfb8      	it	lt
 800e8c6:	3101      	addlt	r1, #1
 800e8c8:	f7ff ff08 	bl	800e6dc <_Balloc>
 800e8cc:	f100 0514 	add.w	r5, r0, #20
 800e8d0:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e8d4:	462b      	mov	r3, r5
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	4573      	cmp	r3, lr
 800e8da:	d316      	bcc.n	800e90a <__multiply+0x74>
 800e8dc:	f104 0214 	add.w	r2, r4, #20
 800e8e0:	f108 0114 	add.w	r1, r8, #20
 800e8e4:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e8e8:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e8ec:	9300      	str	r3, [sp, #0]
 800e8ee:	9b00      	ldr	r3, [sp, #0]
 800e8f0:	9201      	str	r2, [sp, #4]
 800e8f2:	4293      	cmp	r3, r2
 800e8f4:	d80c      	bhi.n	800e910 <__multiply+0x7a>
 800e8f6:	2e00      	cmp	r6, #0
 800e8f8:	dd03      	ble.n	800e902 <__multiply+0x6c>
 800e8fa:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d05d      	beq.n	800e9be <__multiply+0x128>
 800e902:	6106      	str	r6, [r0, #16]
 800e904:	b003      	add	sp, #12
 800e906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e90a:	f843 2b04 	str.w	r2, [r3], #4
 800e90e:	e7e3      	b.n	800e8d8 <__multiply+0x42>
 800e910:	f8b2 b000 	ldrh.w	fp, [r2]
 800e914:	f1bb 0f00 	cmp.w	fp, #0
 800e918:	d023      	beq.n	800e962 <__multiply+0xcc>
 800e91a:	4689      	mov	r9, r1
 800e91c:	46ac      	mov	ip, r5
 800e91e:	f04f 0800 	mov.w	r8, #0
 800e922:	f859 4b04 	ldr.w	r4, [r9], #4
 800e926:	f8dc a000 	ldr.w	sl, [ip]
 800e92a:	b2a3      	uxth	r3, r4
 800e92c:	fa1f fa8a 	uxth.w	sl, sl
 800e930:	fb0b a303 	mla	r3, fp, r3, sl
 800e934:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e938:	f8dc 4000 	ldr.w	r4, [ip]
 800e93c:	4443      	add	r3, r8
 800e93e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e942:	fb0b 840a 	mla	r4, fp, sl, r8
 800e946:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e94a:	46e2      	mov	sl, ip
 800e94c:	b29b      	uxth	r3, r3
 800e94e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e952:	454f      	cmp	r7, r9
 800e954:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e958:	f84a 3b04 	str.w	r3, [sl], #4
 800e95c:	d82b      	bhi.n	800e9b6 <__multiply+0x120>
 800e95e:	f8cc 8004 	str.w	r8, [ip, #4]
 800e962:	9b01      	ldr	r3, [sp, #4]
 800e964:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e968:	3204      	adds	r2, #4
 800e96a:	f1ba 0f00 	cmp.w	sl, #0
 800e96e:	d020      	beq.n	800e9b2 <__multiply+0x11c>
 800e970:	682b      	ldr	r3, [r5, #0]
 800e972:	4689      	mov	r9, r1
 800e974:	46a8      	mov	r8, r5
 800e976:	f04f 0b00 	mov.w	fp, #0
 800e97a:	f8b9 c000 	ldrh.w	ip, [r9]
 800e97e:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e982:	fb0a 440c 	mla	r4, sl, ip, r4
 800e986:	445c      	add	r4, fp
 800e988:	46c4      	mov	ip, r8
 800e98a:	b29b      	uxth	r3, r3
 800e98c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e990:	f84c 3b04 	str.w	r3, [ip], #4
 800e994:	f859 3b04 	ldr.w	r3, [r9], #4
 800e998:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e99c:	0c1b      	lsrs	r3, r3, #16
 800e99e:	fb0a b303 	mla	r3, sl, r3, fp
 800e9a2:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e9a6:	454f      	cmp	r7, r9
 800e9a8:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e9ac:	d805      	bhi.n	800e9ba <__multiply+0x124>
 800e9ae:	f8c8 3004 	str.w	r3, [r8, #4]
 800e9b2:	3504      	adds	r5, #4
 800e9b4:	e79b      	b.n	800e8ee <__multiply+0x58>
 800e9b6:	46d4      	mov	ip, sl
 800e9b8:	e7b3      	b.n	800e922 <__multiply+0x8c>
 800e9ba:	46e0      	mov	r8, ip
 800e9bc:	e7dd      	b.n	800e97a <__multiply+0xe4>
 800e9be:	3e01      	subs	r6, #1
 800e9c0:	e799      	b.n	800e8f6 <__multiply+0x60>
	...

0800e9c4 <__pow5mult>:
 800e9c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9c8:	4615      	mov	r5, r2
 800e9ca:	f012 0203 	ands.w	r2, r2, #3
 800e9ce:	4606      	mov	r6, r0
 800e9d0:	460f      	mov	r7, r1
 800e9d2:	d007      	beq.n	800e9e4 <__pow5mult+0x20>
 800e9d4:	3a01      	subs	r2, #1
 800e9d6:	4c21      	ldr	r4, [pc, #132]	; (800ea5c <__pow5mult+0x98>)
 800e9d8:	2300      	movs	r3, #0
 800e9da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e9de:	f7ff fec8 	bl	800e772 <__multadd>
 800e9e2:	4607      	mov	r7, r0
 800e9e4:	10ad      	asrs	r5, r5, #2
 800e9e6:	d035      	beq.n	800ea54 <__pow5mult+0x90>
 800e9e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e9ea:	b93c      	cbnz	r4, 800e9fc <__pow5mult+0x38>
 800e9ec:	2010      	movs	r0, #16
 800e9ee:	f7fd fe19 	bl	800c624 <malloc>
 800e9f2:	6270      	str	r0, [r6, #36]	; 0x24
 800e9f4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e9f8:	6004      	str	r4, [r0, #0]
 800e9fa:	60c4      	str	r4, [r0, #12]
 800e9fc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ea00:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ea04:	b94c      	cbnz	r4, 800ea1a <__pow5mult+0x56>
 800ea06:	f240 2171 	movw	r1, #625	; 0x271
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	f7ff ff3a 	bl	800e884 <__i2b>
 800ea10:	2300      	movs	r3, #0
 800ea12:	f8c8 0008 	str.w	r0, [r8, #8]
 800ea16:	4604      	mov	r4, r0
 800ea18:	6003      	str	r3, [r0, #0]
 800ea1a:	f04f 0800 	mov.w	r8, #0
 800ea1e:	07eb      	lsls	r3, r5, #31
 800ea20:	d50a      	bpl.n	800ea38 <__pow5mult+0x74>
 800ea22:	4639      	mov	r1, r7
 800ea24:	4622      	mov	r2, r4
 800ea26:	4630      	mov	r0, r6
 800ea28:	f7ff ff35 	bl	800e896 <__multiply>
 800ea2c:	4639      	mov	r1, r7
 800ea2e:	4681      	mov	r9, r0
 800ea30:	4630      	mov	r0, r6
 800ea32:	f7ff fe87 	bl	800e744 <_Bfree>
 800ea36:	464f      	mov	r7, r9
 800ea38:	106d      	asrs	r5, r5, #1
 800ea3a:	d00b      	beq.n	800ea54 <__pow5mult+0x90>
 800ea3c:	6820      	ldr	r0, [r4, #0]
 800ea3e:	b938      	cbnz	r0, 800ea50 <__pow5mult+0x8c>
 800ea40:	4622      	mov	r2, r4
 800ea42:	4621      	mov	r1, r4
 800ea44:	4630      	mov	r0, r6
 800ea46:	f7ff ff26 	bl	800e896 <__multiply>
 800ea4a:	6020      	str	r0, [r4, #0]
 800ea4c:	f8c0 8000 	str.w	r8, [r0]
 800ea50:	4604      	mov	r4, r0
 800ea52:	e7e4      	b.n	800ea1e <__pow5mult+0x5a>
 800ea54:	4638      	mov	r0, r7
 800ea56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ea5a:	bf00      	nop
 800ea5c:	08012ac8 	.word	0x08012ac8

0800ea60 <__lshift>:
 800ea60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ea64:	460c      	mov	r4, r1
 800ea66:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ea6a:	6923      	ldr	r3, [r4, #16]
 800ea6c:	6849      	ldr	r1, [r1, #4]
 800ea6e:	eb0a 0903 	add.w	r9, sl, r3
 800ea72:	68a3      	ldr	r3, [r4, #8]
 800ea74:	4607      	mov	r7, r0
 800ea76:	4616      	mov	r6, r2
 800ea78:	f109 0501 	add.w	r5, r9, #1
 800ea7c:	42ab      	cmp	r3, r5
 800ea7e:	db32      	blt.n	800eae6 <__lshift+0x86>
 800ea80:	4638      	mov	r0, r7
 800ea82:	f7ff fe2b 	bl	800e6dc <_Balloc>
 800ea86:	2300      	movs	r3, #0
 800ea88:	4680      	mov	r8, r0
 800ea8a:	f100 0114 	add.w	r1, r0, #20
 800ea8e:	461a      	mov	r2, r3
 800ea90:	4553      	cmp	r3, sl
 800ea92:	db2b      	blt.n	800eaec <__lshift+0x8c>
 800ea94:	6920      	ldr	r0, [r4, #16]
 800ea96:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ea9a:	f104 0314 	add.w	r3, r4, #20
 800ea9e:	f016 021f 	ands.w	r2, r6, #31
 800eaa2:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800eaa6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800eaaa:	d025      	beq.n	800eaf8 <__lshift+0x98>
 800eaac:	f1c2 0e20 	rsb	lr, r2, #32
 800eab0:	2000      	movs	r0, #0
 800eab2:	681e      	ldr	r6, [r3, #0]
 800eab4:	468a      	mov	sl, r1
 800eab6:	4096      	lsls	r6, r2
 800eab8:	4330      	orrs	r0, r6
 800eaba:	f84a 0b04 	str.w	r0, [sl], #4
 800eabe:	f853 0b04 	ldr.w	r0, [r3], #4
 800eac2:	459c      	cmp	ip, r3
 800eac4:	fa20 f00e 	lsr.w	r0, r0, lr
 800eac8:	d814      	bhi.n	800eaf4 <__lshift+0x94>
 800eaca:	6048      	str	r0, [r1, #4]
 800eacc:	b108      	cbz	r0, 800ead2 <__lshift+0x72>
 800eace:	f109 0502 	add.w	r5, r9, #2
 800ead2:	3d01      	subs	r5, #1
 800ead4:	4638      	mov	r0, r7
 800ead6:	f8c8 5010 	str.w	r5, [r8, #16]
 800eada:	4621      	mov	r1, r4
 800eadc:	f7ff fe32 	bl	800e744 <_Bfree>
 800eae0:	4640      	mov	r0, r8
 800eae2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eae6:	3101      	adds	r1, #1
 800eae8:	005b      	lsls	r3, r3, #1
 800eaea:	e7c7      	b.n	800ea7c <__lshift+0x1c>
 800eaec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	e7cd      	b.n	800ea90 <__lshift+0x30>
 800eaf4:	4651      	mov	r1, sl
 800eaf6:	e7dc      	b.n	800eab2 <__lshift+0x52>
 800eaf8:	3904      	subs	r1, #4
 800eafa:	f853 2b04 	ldr.w	r2, [r3], #4
 800eafe:	f841 2f04 	str.w	r2, [r1, #4]!
 800eb02:	459c      	cmp	ip, r3
 800eb04:	d8f9      	bhi.n	800eafa <__lshift+0x9a>
 800eb06:	e7e4      	b.n	800ead2 <__lshift+0x72>

0800eb08 <__mcmp>:
 800eb08:	6903      	ldr	r3, [r0, #16]
 800eb0a:	690a      	ldr	r2, [r1, #16]
 800eb0c:	1a9b      	subs	r3, r3, r2
 800eb0e:	b530      	push	{r4, r5, lr}
 800eb10:	d10c      	bne.n	800eb2c <__mcmp+0x24>
 800eb12:	0092      	lsls	r2, r2, #2
 800eb14:	3014      	adds	r0, #20
 800eb16:	3114      	adds	r1, #20
 800eb18:	1884      	adds	r4, r0, r2
 800eb1a:	4411      	add	r1, r2
 800eb1c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eb20:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eb24:	4295      	cmp	r5, r2
 800eb26:	d003      	beq.n	800eb30 <__mcmp+0x28>
 800eb28:	d305      	bcc.n	800eb36 <__mcmp+0x2e>
 800eb2a:	2301      	movs	r3, #1
 800eb2c:	4618      	mov	r0, r3
 800eb2e:	bd30      	pop	{r4, r5, pc}
 800eb30:	42a0      	cmp	r0, r4
 800eb32:	d3f3      	bcc.n	800eb1c <__mcmp+0x14>
 800eb34:	e7fa      	b.n	800eb2c <__mcmp+0x24>
 800eb36:	f04f 33ff 	mov.w	r3, #4294967295
 800eb3a:	e7f7      	b.n	800eb2c <__mcmp+0x24>

0800eb3c <__mdiff>:
 800eb3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb40:	460d      	mov	r5, r1
 800eb42:	4607      	mov	r7, r0
 800eb44:	4611      	mov	r1, r2
 800eb46:	4628      	mov	r0, r5
 800eb48:	4614      	mov	r4, r2
 800eb4a:	f7ff ffdd 	bl	800eb08 <__mcmp>
 800eb4e:	1e06      	subs	r6, r0, #0
 800eb50:	d108      	bne.n	800eb64 <__mdiff+0x28>
 800eb52:	4631      	mov	r1, r6
 800eb54:	4638      	mov	r0, r7
 800eb56:	f7ff fdc1 	bl	800e6dc <_Balloc>
 800eb5a:	2301      	movs	r3, #1
 800eb5c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800eb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eb64:	bfa4      	itt	ge
 800eb66:	4623      	movge	r3, r4
 800eb68:	462c      	movge	r4, r5
 800eb6a:	4638      	mov	r0, r7
 800eb6c:	6861      	ldr	r1, [r4, #4]
 800eb6e:	bfa6      	itte	ge
 800eb70:	461d      	movge	r5, r3
 800eb72:	2600      	movge	r6, #0
 800eb74:	2601      	movlt	r6, #1
 800eb76:	f7ff fdb1 	bl	800e6dc <_Balloc>
 800eb7a:	692b      	ldr	r3, [r5, #16]
 800eb7c:	60c6      	str	r6, [r0, #12]
 800eb7e:	6926      	ldr	r6, [r4, #16]
 800eb80:	f105 0914 	add.w	r9, r5, #20
 800eb84:	f104 0214 	add.w	r2, r4, #20
 800eb88:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800eb8c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800eb90:	f100 0514 	add.w	r5, r0, #20
 800eb94:	f04f 0e00 	mov.w	lr, #0
 800eb98:	f852 ab04 	ldr.w	sl, [r2], #4
 800eb9c:	f859 4b04 	ldr.w	r4, [r9], #4
 800eba0:	fa1e f18a 	uxtah	r1, lr, sl
 800eba4:	b2a3      	uxth	r3, r4
 800eba6:	1ac9      	subs	r1, r1, r3
 800eba8:	0c23      	lsrs	r3, r4, #16
 800ebaa:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800ebae:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800ebb2:	b289      	uxth	r1, r1
 800ebb4:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800ebb8:	45c8      	cmp	r8, r9
 800ebba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800ebbe:	4694      	mov	ip, r2
 800ebc0:	f845 3b04 	str.w	r3, [r5], #4
 800ebc4:	d8e8      	bhi.n	800eb98 <__mdiff+0x5c>
 800ebc6:	45bc      	cmp	ip, r7
 800ebc8:	d304      	bcc.n	800ebd4 <__mdiff+0x98>
 800ebca:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800ebce:	b183      	cbz	r3, 800ebf2 <__mdiff+0xb6>
 800ebd0:	6106      	str	r6, [r0, #16]
 800ebd2:	e7c5      	b.n	800eb60 <__mdiff+0x24>
 800ebd4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ebd8:	fa1e f381 	uxtah	r3, lr, r1
 800ebdc:	141a      	asrs	r2, r3, #16
 800ebde:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ebe2:	b29b      	uxth	r3, r3
 800ebe4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ebe8:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800ebec:	f845 3b04 	str.w	r3, [r5], #4
 800ebf0:	e7e9      	b.n	800ebc6 <__mdiff+0x8a>
 800ebf2:	3e01      	subs	r6, #1
 800ebf4:	e7e9      	b.n	800ebca <__mdiff+0x8e>

0800ebf6 <__d2b>:
 800ebf6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ebfa:	460e      	mov	r6, r1
 800ebfc:	2101      	movs	r1, #1
 800ebfe:	ec59 8b10 	vmov	r8, r9, d0
 800ec02:	4615      	mov	r5, r2
 800ec04:	f7ff fd6a 	bl	800e6dc <_Balloc>
 800ec08:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800ec0c:	4607      	mov	r7, r0
 800ec0e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ec12:	bb34      	cbnz	r4, 800ec62 <__d2b+0x6c>
 800ec14:	9301      	str	r3, [sp, #4]
 800ec16:	f1b8 0300 	subs.w	r3, r8, #0
 800ec1a:	d027      	beq.n	800ec6c <__d2b+0x76>
 800ec1c:	a802      	add	r0, sp, #8
 800ec1e:	f840 3d08 	str.w	r3, [r0, #-8]!
 800ec22:	f7ff fe00 	bl	800e826 <__lo0bits>
 800ec26:	9900      	ldr	r1, [sp, #0]
 800ec28:	b1f0      	cbz	r0, 800ec68 <__d2b+0x72>
 800ec2a:	9a01      	ldr	r2, [sp, #4]
 800ec2c:	f1c0 0320 	rsb	r3, r0, #32
 800ec30:	fa02 f303 	lsl.w	r3, r2, r3
 800ec34:	430b      	orrs	r3, r1
 800ec36:	40c2      	lsrs	r2, r0
 800ec38:	617b      	str	r3, [r7, #20]
 800ec3a:	9201      	str	r2, [sp, #4]
 800ec3c:	9b01      	ldr	r3, [sp, #4]
 800ec3e:	61bb      	str	r3, [r7, #24]
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	bf14      	ite	ne
 800ec44:	2102      	movne	r1, #2
 800ec46:	2101      	moveq	r1, #1
 800ec48:	6139      	str	r1, [r7, #16]
 800ec4a:	b1c4      	cbz	r4, 800ec7e <__d2b+0x88>
 800ec4c:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800ec50:	4404      	add	r4, r0
 800ec52:	6034      	str	r4, [r6, #0]
 800ec54:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ec58:	6028      	str	r0, [r5, #0]
 800ec5a:	4638      	mov	r0, r7
 800ec5c:	b003      	add	sp, #12
 800ec5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ec62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ec66:	e7d5      	b.n	800ec14 <__d2b+0x1e>
 800ec68:	6179      	str	r1, [r7, #20]
 800ec6a:	e7e7      	b.n	800ec3c <__d2b+0x46>
 800ec6c:	a801      	add	r0, sp, #4
 800ec6e:	f7ff fdda 	bl	800e826 <__lo0bits>
 800ec72:	9b01      	ldr	r3, [sp, #4]
 800ec74:	617b      	str	r3, [r7, #20]
 800ec76:	2101      	movs	r1, #1
 800ec78:	6139      	str	r1, [r7, #16]
 800ec7a:	3020      	adds	r0, #32
 800ec7c:	e7e5      	b.n	800ec4a <__d2b+0x54>
 800ec7e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800ec82:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec86:	6030      	str	r0, [r6, #0]
 800ec88:	6918      	ldr	r0, [r3, #16]
 800ec8a:	f7ff fdad 	bl	800e7e8 <__hi0bits>
 800ec8e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800ec92:	e7e1      	b.n	800ec58 <__d2b+0x62>

0800ec94 <_calloc_r>:
 800ec94:	b538      	push	{r3, r4, r5, lr}
 800ec96:	fb02 f401 	mul.w	r4, r2, r1
 800ec9a:	4621      	mov	r1, r4
 800ec9c:	f7fd fd4c 	bl	800c738 <_malloc_r>
 800eca0:	4605      	mov	r5, r0
 800eca2:	b118      	cbz	r0, 800ecac <_calloc_r+0x18>
 800eca4:	4622      	mov	r2, r4
 800eca6:	2100      	movs	r1, #0
 800eca8:	f7fd fcf0 	bl	800c68c <memset>
 800ecac:	4628      	mov	r0, r5
 800ecae:	bd38      	pop	{r3, r4, r5, pc}

0800ecb0 <_realloc_r>:
 800ecb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ecb2:	4607      	mov	r7, r0
 800ecb4:	4614      	mov	r4, r2
 800ecb6:	460e      	mov	r6, r1
 800ecb8:	b921      	cbnz	r1, 800ecc4 <_realloc_r+0x14>
 800ecba:	4611      	mov	r1, r2
 800ecbc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ecc0:	f7fd bd3a 	b.w	800c738 <_malloc_r>
 800ecc4:	b922      	cbnz	r2, 800ecd0 <_realloc_r+0x20>
 800ecc6:	f7fd fce9 	bl	800c69c <_free_r>
 800ecca:	4625      	mov	r5, r4
 800eccc:	4628      	mov	r0, r5
 800ecce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ecd0:	f000 fa12 	bl	800f0f8 <_malloc_usable_size_r>
 800ecd4:	42a0      	cmp	r0, r4
 800ecd6:	d20f      	bcs.n	800ecf8 <_realloc_r+0x48>
 800ecd8:	4621      	mov	r1, r4
 800ecda:	4638      	mov	r0, r7
 800ecdc:	f7fd fd2c 	bl	800c738 <_malloc_r>
 800ece0:	4605      	mov	r5, r0
 800ece2:	2800      	cmp	r0, #0
 800ece4:	d0f2      	beq.n	800eccc <_realloc_r+0x1c>
 800ece6:	4631      	mov	r1, r6
 800ece8:	4622      	mov	r2, r4
 800ecea:	f7fd fcab 	bl	800c644 <memcpy>
 800ecee:	4631      	mov	r1, r6
 800ecf0:	4638      	mov	r0, r7
 800ecf2:	f7fd fcd3 	bl	800c69c <_free_r>
 800ecf6:	e7e9      	b.n	800eccc <_realloc_r+0x1c>
 800ecf8:	4635      	mov	r5, r6
 800ecfa:	e7e7      	b.n	800eccc <_realloc_r+0x1c>

0800ecfc <__ssputs_r>:
 800ecfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ed00:	688e      	ldr	r6, [r1, #8]
 800ed02:	429e      	cmp	r6, r3
 800ed04:	4682      	mov	sl, r0
 800ed06:	460c      	mov	r4, r1
 800ed08:	4690      	mov	r8, r2
 800ed0a:	4699      	mov	r9, r3
 800ed0c:	d837      	bhi.n	800ed7e <__ssputs_r+0x82>
 800ed0e:	898a      	ldrh	r2, [r1, #12]
 800ed10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ed14:	d031      	beq.n	800ed7a <__ssputs_r+0x7e>
 800ed16:	6825      	ldr	r5, [r4, #0]
 800ed18:	6909      	ldr	r1, [r1, #16]
 800ed1a:	1a6f      	subs	r7, r5, r1
 800ed1c:	6965      	ldr	r5, [r4, #20]
 800ed1e:	2302      	movs	r3, #2
 800ed20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ed24:	fb95 f5f3 	sdiv	r5, r5, r3
 800ed28:	f109 0301 	add.w	r3, r9, #1
 800ed2c:	443b      	add	r3, r7
 800ed2e:	429d      	cmp	r5, r3
 800ed30:	bf38      	it	cc
 800ed32:	461d      	movcc	r5, r3
 800ed34:	0553      	lsls	r3, r2, #21
 800ed36:	d530      	bpl.n	800ed9a <__ssputs_r+0x9e>
 800ed38:	4629      	mov	r1, r5
 800ed3a:	f7fd fcfd 	bl	800c738 <_malloc_r>
 800ed3e:	4606      	mov	r6, r0
 800ed40:	b950      	cbnz	r0, 800ed58 <__ssputs_r+0x5c>
 800ed42:	230c      	movs	r3, #12
 800ed44:	f8ca 3000 	str.w	r3, [sl]
 800ed48:	89a3      	ldrh	r3, [r4, #12]
 800ed4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed4e:	81a3      	strh	r3, [r4, #12]
 800ed50:	f04f 30ff 	mov.w	r0, #4294967295
 800ed54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed58:	463a      	mov	r2, r7
 800ed5a:	6921      	ldr	r1, [r4, #16]
 800ed5c:	f7fd fc72 	bl	800c644 <memcpy>
 800ed60:	89a3      	ldrh	r3, [r4, #12]
 800ed62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ed66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ed6a:	81a3      	strh	r3, [r4, #12]
 800ed6c:	6126      	str	r6, [r4, #16]
 800ed6e:	6165      	str	r5, [r4, #20]
 800ed70:	443e      	add	r6, r7
 800ed72:	1bed      	subs	r5, r5, r7
 800ed74:	6026      	str	r6, [r4, #0]
 800ed76:	60a5      	str	r5, [r4, #8]
 800ed78:	464e      	mov	r6, r9
 800ed7a:	454e      	cmp	r6, r9
 800ed7c:	d900      	bls.n	800ed80 <__ssputs_r+0x84>
 800ed7e:	464e      	mov	r6, r9
 800ed80:	4632      	mov	r2, r6
 800ed82:	4641      	mov	r1, r8
 800ed84:	6820      	ldr	r0, [r4, #0]
 800ed86:	f7fd fc68 	bl	800c65a <memmove>
 800ed8a:	68a3      	ldr	r3, [r4, #8]
 800ed8c:	1b9b      	subs	r3, r3, r6
 800ed8e:	60a3      	str	r3, [r4, #8]
 800ed90:	6823      	ldr	r3, [r4, #0]
 800ed92:	441e      	add	r6, r3
 800ed94:	6026      	str	r6, [r4, #0]
 800ed96:	2000      	movs	r0, #0
 800ed98:	e7dc      	b.n	800ed54 <__ssputs_r+0x58>
 800ed9a:	462a      	mov	r2, r5
 800ed9c:	f7ff ff88 	bl	800ecb0 <_realloc_r>
 800eda0:	4606      	mov	r6, r0
 800eda2:	2800      	cmp	r0, #0
 800eda4:	d1e2      	bne.n	800ed6c <__ssputs_r+0x70>
 800eda6:	6921      	ldr	r1, [r4, #16]
 800eda8:	4650      	mov	r0, sl
 800edaa:	f7fd fc77 	bl	800c69c <_free_r>
 800edae:	e7c8      	b.n	800ed42 <__ssputs_r+0x46>

0800edb0 <_svfiprintf_r>:
 800edb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edb4:	461d      	mov	r5, r3
 800edb6:	898b      	ldrh	r3, [r1, #12]
 800edb8:	061f      	lsls	r7, r3, #24
 800edba:	b09d      	sub	sp, #116	; 0x74
 800edbc:	4680      	mov	r8, r0
 800edbe:	460c      	mov	r4, r1
 800edc0:	4616      	mov	r6, r2
 800edc2:	d50f      	bpl.n	800ede4 <_svfiprintf_r+0x34>
 800edc4:	690b      	ldr	r3, [r1, #16]
 800edc6:	b96b      	cbnz	r3, 800ede4 <_svfiprintf_r+0x34>
 800edc8:	2140      	movs	r1, #64	; 0x40
 800edca:	f7fd fcb5 	bl	800c738 <_malloc_r>
 800edce:	6020      	str	r0, [r4, #0]
 800edd0:	6120      	str	r0, [r4, #16]
 800edd2:	b928      	cbnz	r0, 800ede0 <_svfiprintf_r+0x30>
 800edd4:	230c      	movs	r3, #12
 800edd6:	f8c8 3000 	str.w	r3, [r8]
 800edda:	f04f 30ff 	mov.w	r0, #4294967295
 800edde:	e0c8      	b.n	800ef72 <_svfiprintf_r+0x1c2>
 800ede0:	2340      	movs	r3, #64	; 0x40
 800ede2:	6163      	str	r3, [r4, #20]
 800ede4:	2300      	movs	r3, #0
 800ede6:	9309      	str	r3, [sp, #36]	; 0x24
 800ede8:	2320      	movs	r3, #32
 800edea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800edee:	2330      	movs	r3, #48	; 0x30
 800edf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800edf4:	9503      	str	r5, [sp, #12]
 800edf6:	f04f 0b01 	mov.w	fp, #1
 800edfa:	4637      	mov	r7, r6
 800edfc:	463d      	mov	r5, r7
 800edfe:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ee02:	b10b      	cbz	r3, 800ee08 <_svfiprintf_r+0x58>
 800ee04:	2b25      	cmp	r3, #37	; 0x25
 800ee06:	d13e      	bne.n	800ee86 <_svfiprintf_r+0xd6>
 800ee08:	ebb7 0a06 	subs.w	sl, r7, r6
 800ee0c:	d00b      	beq.n	800ee26 <_svfiprintf_r+0x76>
 800ee0e:	4653      	mov	r3, sl
 800ee10:	4632      	mov	r2, r6
 800ee12:	4621      	mov	r1, r4
 800ee14:	4640      	mov	r0, r8
 800ee16:	f7ff ff71 	bl	800ecfc <__ssputs_r>
 800ee1a:	3001      	adds	r0, #1
 800ee1c:	f000 80a4 	beq.w	800ef68 <_svfiprintf_r+0x1b8>
 800ee20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee22:	4453      	add	r3, sl
 800ee24:	9309      	str	r3, [sp, #36]	; 0x24
 800ee26:	783b      	ldrb	r3, [r7, #0]
 800ee28:	2b00      	cmp	r3, #0
 800ee2a:	f000 809d 	beq.w	800ef68 <_svfiprintf_r+0x1b8>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	f04f 32ff 	mov.w	r2, #4294967295
 800ee34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee38:	9304      	str	r3, [sp, #16]
 800ee3a:	9307      	str	r3, [sp, #28]
 800ee3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ee40:	931a      	str	r3, [sp, #104]	; 0x68
 800ee42:	462f      	mov	r7, r5
 800ee44:	2205      	movs	r2, #5
 800ee46:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ee4a:	4850      	ldr	r0, [pc, #320]	; (800ef8c <_svfiprintf_r+0x1dc>)
 800ee4c:	f7f1 f9d8 	bl	8000200 <memchr>
 800ee50:	9b04      	ldr	r3, [sp, #16]
 800ee52:	b9d0      	cbnz	r0, 800ee8a <_svfiprintf_r+0xda>
 800ee54:	06d9      	lsls	r1, r3, #27
 800ee56:	bf44      	itt	mi
 800ee58:	2220      	movmi	r2, #32
 800ee5a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ee5e:	071a      	lsls	r2, r3, #28
 800ee60:	bf44      	itt	mi
 800ee62:	222b      	movmi	r2, #43	; 0x2b
 800ee64:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ee68:	782a      	ldrb	r2, [r5, #0]
 800ee6a:	2a2a      	cmp	r2, #42	; 0x2a
 800ee6c:	d015      	beq.n	800ee9a <_svfiprintf_r+0xea>
 800ee6e:	9a07      	ldr	r2, [sp, #28]
 800ee70:	462f      	mov	r7, r5
 800ee72:	2000      	movs	r0, #0
 800ee74:	250a      	movs	r5, #10
 800ee76:	4639      	mov	r1, r7
 800ee78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee7c:	3b30      	subs	r3, #48	; 0x30
 800ee7e:	2b09      	cmp	r3, #9
 800ee80:	d94d      	bls.n	800ef1e <_svfiprintf_r+0x16e>
 800ee82:	b1b8      	cbz	r0, 800eeb4 <_svfiprintf_r+0x104>
 800ee84:	e00f      	b.n	800eea6 <_svfiprintf_r+0xf6>
 800ee86:	462f      	mov	r7, r5
 800ee88:	e7b8      	b.n	800edfc <_svfiprintf_r+0x4c>
 800ee8a:	4a40      	ldr	r2, [pc, #256]	; (800ef8c <_svfiprintf_r+0x1dc>)
 800ee8c:	1a80      	subs	r0, r0, r2
 800ee8e:	fa0b f000 	lsl.w	r0, fp, r0
 800ee92:	4318      	orrs	r0, r3
 800ee94:	9004      	str	r0, [sp, #16]
 800ee96:	463d      	mov	r5, r7
 800ee98:	e7d3      	b.n	800ee42 <_svfiprintf_r+0x92>
 800ee9a:	9a03      	ldr	r2, [sp, #12]
 800ee9c:	1d11      	adds	r1, r2, #4
 800ee9e:	6812      	ldr	r2, [r2, #0]
 800eea0:	9103      	str	r1, [sp, #12]
 800eea2:	2a00      	cmp	r2, #0
 800eea4:	db01      	blt.n	800eeaa <_svfiprintf_r+0xfa>
 800eea6:	9207      	str	r2, [sp, #28]
 800eea8:	e004      	b.n	800eeb4 <_svfiprintf_r+0x104>
 800eeaa:	4252      	negs	r2, r2
 800eeac:	f043 0302 	orr.w	r3, r3, #2
 800eeb0:	9207      	str	r2, [sp, #28]
 800eeb2:	9304      	str	r3, [sp, #16]
 800eeb4:	783b      	ldrb	r3, [r7, #0]
 800eeb6:	2b2e      	cmp	r3, #46	; 0x2e
 800eeb8:	d10c      	bne.n	800eed4 <_svfiprintf_r+0x124>
 800eeba:	787b      	ldrb	r3, [r7, #1]
 800eebc:	2b2a      	cmp	r3, #42	; 0x2a
 800eebe:	d133      	bne.n	800ef28 <_svfiprintf_r+0x178>
 800eec0:	9b03      	ldr	r3, [sp, #12]
 800eec2:	1d1a      	adds	r2, r3, #4
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	9203      	str	r2, [sp, #12]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	bfb8      	it	lt
 800eecc:	f04f 33ff 	movlt.w	r3, #4294967295
 800eed0:	3702      	adds	r7, #2
 800eed2:	9305      	str	r3, [sp, #20]
 800eed4:	4d2e      	ldr	r5, [pc, #184]	; (800ef90 <_svfiprintf_r+0x1e0>)
 800eed6:	7839      	ldrb	r1, [r7, #0]
 800eed8:	2203      	movs	r2, #3
 800eeda:	4628      	mov	r0, r5
 800eedc:	f7f1 f990 	bl	8000200 <memchr>
 800eee0:	b138      	cbz	r0, 800eef2 <_svfiprintf_r+0x142>
 800eee2:	2340      	movs	r3, #64	; 0x40
 800eee4:	1b40      	subs	r0, r0, r5
 800eee6:	fa03 f000 	lsl.w	r0, r3, r0
 800eeea:	9b04      	ldr	r3, [sp, #16]
 800eeec:	4303      	orrs	r3, r0
 800eeee:	3701      	adds	r7, #1
 800eef0:	9304      	str	r3, [sp, #16]
 800eef2:	7839      	ldrb	r1, [r7, #0]
 800eef4:	4827      	ldr	r0, [pc, #156]	; (800ef94 <_svfiprintf_r+0x1e4>)
 800eef6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eefa:	2206      	movs	r2, #6
 800eefc:	1c7e      	adds	r6, r7, #1
 800eefe:	f7f1 f97f 	bl	8000200 <memchr>
 800ef02:	2800      	cmp	r0, #0
 800ef04:	d038      	beq.n	800ef78 <_svfiprintf_r+0x1c8>
 800ef06:	4b24      	ldr	r3, [pc, #144]	; (800ef98 <_svfiprintf_r+0x1e8>)
 800ef08:	bb13      	cbnz	r3, 800ef50 <_svfiprintf_r+0x1a0>
 800ef0a:	9b03      	ldr	r3, [sp, #12]
 800ef0c:	3307      	adds	r3, #7
 800ef0e:	f023 0307 	bic.w	r3, r3, #7
 800ef12:	3308      	adds	r3, #8
 800ef14:	9303      	str	r3, [sp, #12]
 800ef16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef18:	444b      	add	r3, r9
 800ef1a:	9309      	str	r3, [sp, #36]	; 0x24
 800ef1c:	e76d      	b.n	800edfa <_svfiprintf_r+0x4a>
 800ef1e:	fb05 3202 	mla	r2, r5, r2, r3
 800ef22:	2001      	movs	r0, #1
 800ef24:	460f      	mov	r7, r1
 800ef26:	e7a6      	b.n	800ee76 <_svfiprintf_r+0xc6>
 800ef28:	2300      	movs	r3, #0
 800ef2a:	3701      	adds	r7, #1
 800ef2c:	9305      	str	r3, [sp, #20]
 800ef2e:	4619      	mov	r1, r3
 800ef30:	250a      	movs	r5, #10
 800ef32:	4638      	mov	r0, r7
 800ef34:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef38:	3a30      	subs	r2, #48	; 0x30
 800ef3a:	2a09      	cmp	r2, #9
 800ef3c:	d903      	bls.n	800ef46 <_svfiprintf_r+0x196>
 800ef3e:	2b00      	cmp	r3, #0
 800ef40:	d0c8      	beq.n	800eed4 <_svfiprintf_r+0x124>
 800ef42:	9105      	str	r1, [sp, #20]
 800ef44:	e7c6      	b.n	800eed4 <_svfiprintf_r+0x124>
 800ef46:	fb05 2101 	mla	r1, r5, r1, r2
 800ef4a:	2301      	movs	r3, #1
 800ef4c:	4607      	mov	r7, r0
 800ef4e:	e7f0      	b.n	800ef32 <_svfiprintf_r+0x182>
 800ef50:	ab03      	add	r3, sp, #12
 800ef52:	9300      	str	r3, [sp, #0]
 800ef54:	4622      	mov	r2, r4
 800ef56:	4b11      	ldr	r3, [pc, #68]	; (800ef9c <_svfiprintf_r+0x1ec>)
 800ef58:	a904      	add	r1, sp, #16
 800ef5a:	4640      	mov	r0, r8
 800ef5c:	f7fd fe1a 	bl	800cb94 <_printf_float>
 800ef60:	f1b0 3fff 	cmp.w	r0, #4294967295
 800ef64:	4681      	mov	r9, r0
 800ef66:	d1d6      	bne.n	800ef16 <_svfiprintf_r+0x166>
 800ef68:	89a3      	ldrh	r3, [r4, #12]
 800ef6a:	065b      	lsls	r3, r3, #25
 800ef6c:	f53f af35 	bmi.w	800edda <_svfiprintf_r+0x2a>
 800ef70:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ef72:	b01d      	add	sp, #116	; 0x74
 800ef74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef78:	ab03      	add	r3, sp, #12
 800ef7a:	9300      	str	r3, [sp, #0]
 800ef7c:	4622      	mov	r2, r4
 800ef7e:	4b07      	ldr	r3, [pc, #28]	; (800ef9c <_svfiprintf_r+0x1ec>)
 800ef80:	a904      	add	r1, sp, #16
 800ef82:	4640      	mov	r0, r8
 800ef84:	f7fe f8bc 	bl	800d100 <_printf_i>
 800ef88:	e7ea      	b.n	800ef60 <_svfiprintf_r+0x1b0>
 800ef8a:	bf00      	nop
 800ef8c:	08012920 	.word	0x08012920
 800ef90:	08012926 	.word	0x08012926
 800ef94:	0801292a 	.word	0x0801292a
 800ef98:	0800cb95 	.word	0x0800cb95
 800ef9c:	0800ecfd 	.word	0x0800ecfd

0800efa0 <__sread>:
 800efa0:	b510      	push	{r4, lr}
 800efa2:	460c      	mov	r4, r1
 800efa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efa8:	f000 f8ae 	bl	800f108 <_read_r>
 800efac:	2800      	cmp	r0, #0
 800efae:	bfab      	itete	ge
 800efb0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800efb2:	89a3      	ldrhlt	r3, [r4, #12]
 800efb4:	181b      	addge	r3, r3, r0
 800efb6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800efba:	bfac      	ite	ge
 800efbc:	6563      	strge	r3, [r4, #84]	; 0x54
 800efbe:	81a3      	strhlt	r3, [r4, #12]
 800efc0:	bd10      	pop	{r4, pc}

0800efc2 <__swrite>:
 800efc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efc6:	461f      	mov	r7, r3
 800efc8:	898b      	ldrh	r3, [r1, #12]
 800efca:	05db      	lsls	r3, r3, #23
 800efcc:	4605      	mov	r5, r0
 800efce:	460c      	mov	r4, r1
 800efd0:	4616      	mov	r6, r2
 800efd2:	d505      	bpl.n	800efe0 <__swrite+0x1e>
 800efd4:	2302      	movs	r3, #2
 800efd6:	2200      	movs	r2, #0
 800efd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800efdc:	f000 f868 	bl	800f0b0 <_lseek_r>
 800efe0:	89a3      	ldrh	r3, [r4, #12]
 800efe2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800efe6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800efea:	81a3      	strh	r3, [r4, #12]
 800efec:	4632      	mov	r2, r6
 800efee:	463b      	mov	r3, r7
 800eff0:	4628      	mov	r0, r5
 800eff2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eff6:	f000 b817 	b.w	800f028 <_write_r>

0800effa <__sseek>:
 800effa:	b510      	push	{r4, lr}
 800effc:	460c      	mov	r4, r1
 800effe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f002:	f000 f855 	bl	800f0b0 <_lseek_r>
 800f006:	1c43      	adds	r3, r0, #1
 800f008:	89a3      	ldrh	r3, [r4, #12]
 800f00a:	bf15      	itete	ne
 800f00c:	6560      	strne	r0, [r4, #84]	; 0x54
 800f00e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f012:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f016:	81a3      	strheq	r3, [r4, #12]
 800f018:	bf18      	it	ne
 800f01a:	81a3      	strhne	r3, [r4, #12]
 800f01c:	bd10      	pop	{r4, pc}

0800f01e <__sclose>:
 800f01e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f022:	f000 b813 	b.w	800f04c <_close_r>
	...

0800f028 <_write_r>:
 800f028:	b538      	push	{r3, r4, r5, lr}
 800f02a:	4c07      	ldr	r4, [pc, #28]	; (800f048 <_write_r+0x20>)
 800f02c:	4605      	mov	r5, r0
 800f02e:	4608      	mov	r0, r1
 800f030:	4611      	mov	r1, r2
 800f032:	2200      	movs	r2, #0
 800f034:	6022      	str	r2, [r4, #0]
 800f036:	461a      	mov	r2, r3
 800f038:	f7f2 fefd 	bl	8001e36 <_write>
 800f03c:	1c43      	adds	r3, r0, #1
 800f03e:	d102      	bne.n	800f046 <_write_r+0x1e>
 800f040:	6823      	ldr	r3, [r4, #0]
 800f042:	b103      	cbz	r3, 800f046 <_write_r+0x1e>
 800f044:	602b      	str	r3, [r5, #0]
 800f046:	bd38      	pop	{r3, r4, r5, pc}
 800f048:	200017c0 	.word	0x200017c0

0800f04c <_close_r>:
 800f04c:	b538      	push	{r3, r4, r5, lr}
 800f04e:	4c06      	ldr	r4, [pc, #24]	; (800f068 <_close_r+0x1c>)
 800f050:	2300      	movs	r3, #0
 800f052:	4605      	mov	r5, r0
 800f054:	4608      	mov	r0, r1
 800f056:	6023      	str	r3, [r4, #0]
 800f058:	f7f2 ff09 	bl	8001e6e <_close>
 800f05c:	1c43      	adds	r3, r0, #1
 800f05e:	d102      	bne.n	800f066 <_close_r+0x1a>
 800f060:	6823      	ldr	r3, [r4, #0]
 800f062:	b103      	cbz	r3, 800f066 <_close_r+0x1a>
 800f064:	602b      	str	r3, [r5, #0]
 800f066:	bd38      	pop	{r3, r4, r5, pc}
 800f068:	200017c0 	.word	0x200017c0

0800f06c <_fstat_r>:
 800f06c:	b538      	push	{r3, r4, r5, lr}
 800f06e:	4c07      	ldr	r4, [pc, #28]	; (800f08c <_fstat_r+0x20>)
 800f070:	2300      	movs	r3, #0
 800f072:	4605      	mov	r5, r0
 800f074:	4608      	mov	r0, r1
 800f076:	4611      	mov	r1, r2
 800f078:	6023      	str	r3, [r4, #0]
 800f07a:	f7f2 ff04 	bl	8001e86 <_fstat>
 800f07e:	1c43      	adds	r3, r0, #1
 800f080:	d102      	bne.n	800f088 <_fstat_r+0x1c>
 800f082:	6823      	ldr	r3, [r4, #0]
 800f084:	b103      	cbz	r3, 800f088 <_fstat_r+0x1c>
 800f086:	602b      	str	r3, [r5, #0]
 800f088:	bd38      	pop	{r3, r4, r5, pc}
 800f08a:	bf00      	nop
 800f08c:	200017c0 	.word	0x200017c0

0800f090 <_isatty_r>:
 800f090:	b538      	push	{r3, r4, r5, lr}
 800f092:	4c06      	ldr	r4, [pc, #24]	; (800f0ac <_isatty_r+0x1c>)
 800f094:	2300      	movs	r3, #0
 800f096:	4605      	mov	r5, r0
 800f098:	4608      	mov	r0, r1
 800f09a:	6023      	str	r3, [r4, #0]
 800f09c:	f7f2 ff03 	bl	8001ea6 <_isatty>
 800f0a0:	1c43      	adds	r3, r0, #1
 800f0a2:	d102      	bne.n	800f0aa <_isatty_r+0x1a>
 800f0a4:	6823      	ldr	r3, [r4, #0]
 800f0a6:	b103      	cbz	r3, 800f0aa <_isatty_r+0x1a>
 800f0a8:	602b      	str	r3, [r5, #0]
 800f0aa:	bd38      	pop	{r3, r4, r5, pc}
 800f0ac:	200017c0 	.word	0x200017c0

0800f0b0 <_lseek_r>:
 800f0b0:	b538      	push	{r3, r4, r5, lr}
 800f0b2:	4c07      	ldr	r4, [pc, #28]	; (800f0d0 <_lseek_r+0x20>)
 800f0b4:	4605      	mov	r5, r0
 800f0b6:	4608      	mov	r0, r1
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	6022      	str	r2, [r4, #0]
 800f0be:	461a      	mov	r2, r3
 800f0c0:	f7f2 fefc 	bl	8001ebc <_lseek>
 800f0c4:	1c43      	adds	r3, r0, #1
 800f0c6:	d102      	bne.n	800f0ce <_lseek_r+0x1e>
 800f0c8:	6823      	ldr	r3, [r4, #0]
 800f0ca:	b103      	cbz	r3, 800f0ce <_lseek_r+0x1e>
 800f0cc:	602b      	str	r3, [r5, #0]
 800f0ce:	bd38      	pop	{r3, r4, r5, pc}
 800f0d0:	200017c0 	.word	0x200017c0

0800f0d4 <__ascii_mbtowc>:
 800f0d4:	b082      	sub	sp, #8
 800f0d6:	b901      	cbnz	r1, 800f0da <__ascii_mbtowc+0x6>
 800f0d8:	a901      	add	r1, sp, #4
 800f0da:	b142      	cbz	r2, 800f0ee <__ascii_mbtowc+0x1a>
 800f0dc:	b14b      	cbz	r3, 800f0f2 <__ascii_mbtowc+0x1e>
 800f0de:	7813      	ldrb	r3, [r2, #0]
 800f0e0:	600b      	str	r3, [r1, #0]
 800f0e2:	7812      	ldrb	r2, [r2, #0]
 800f0e4:	1c10      	adds	r0, r2, #0
 800f0e6:	bf18      	it	ne
 800f0e8:	2001      	movne	r0, #1
 800f0ea:	b002      	add	sp, #8
 800f0ec:	4770      	bx	lr
 800f0ee:	4610      	mov	r0, r2
 800f0f0:	e7fb      	b.n	800f0ea <__ascii_mbtowc+0x16>
 800f0f2:	f06f 0001 	mvn.w	r0, #1
 800f0f6:	e7f8      	b.n	800f0ea <__ascii_mbtowc+0x16>

0800f0f8 <_malloc_usable_size_r>:
 800f0f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f0fc:	1f18      	subs	r0, r3, #4
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	bfbc      	itt	lt
 800f102:	580b      	ldrlt	r3, [r1, r0]
 800f104:	18c0      	addlt	r0, r0, r3
 800f106:	4770      	bx	lr

0800f108 <_read_r>:
 800f108:	b538      	push	{r3, r4, r5, lr}
 800f10a:	4c07      	ldr	r4, [pc, #28]	; (800f128 <_read_r+0x20>)
 800f10c:	4605      	mov	r5, r0
 800f10e:	4608      	mov	r0, r1
 800f110:	4611      	mov	r1, r2
 800f112:	2200      	movs	r2, #0
 800f114:	6022      	str	r2, [r4, #0]
 800f116:	461a      	mov	r2, r3
 800f118:	f7f2 fe70 	bl	8001dfc <_read>
 800f11c:	1c43      	adds	r3, r0, #1
 800f11e:	d102      	bne.n	800f126 <_read_r+0x1e>
 800f120:	6823      	ldr	r3, [r4, #0]
 800f122:	b103      	cbz	r3, 800f126 <_read_r+0x1e>
 800f124:	602b      	str	r3, [r5, #0]
 800f126:	bd38      	pop	{r3, r4, r5, pc}
 800f128:	200017c0 	.word	0x200017c0

0800f12c <__ascii_wctomb>:
 800f12c:	b149      	cbz	r1, 800f142 <__ascii_wctomb+0x16>
 800f12e:	2aff      	cmp	r2, #255	; 0xff
 800f130:	bf85      	ittet	hi
 800f132:	238a      	movhi	r3, #138	; 0x8a
 800f134:	6003      	strhi	r3, [r0, #0]
 800f136:	700a      	strbls	r2, [r1, #0]
 800f138:	f04f 30ff 	movhi.w	r0, #4294967295
 800f13c:	bf98      	it	ls
 800f13e:	2001      	movls	r0, #1
 800f140:	4770      	bx	lr
 800f142:	4608      	mov	r0, r1
 800f144:	4770      	bx	lr
	...

0800f148 <_init>:
 800f148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f14a:	bf00      	nop
 800f14c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f14e:	bc08      	pop	{r3}
 800f150:	469e      	mov	lr, r3
 800f152:	4770      	bx	lr

0800f154 <_fini>:
 800f154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f156:	bf00      	nop
 800f158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f15a:	bc08      	pop	{r3}
 800f15c:	469e      	mov	lr, r3
 800f15e:	4770      	bx	lr
